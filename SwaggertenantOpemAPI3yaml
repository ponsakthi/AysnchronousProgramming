openapi: 3.0.0
info:
  version: v1
  title: BullDog Public Tenant WebAPIs
paths:
  "/api/systems/{systemGuid}/alarms/{alarmId}/acknowledge":
    post:
      tags:
        - AlarmAcknowledge
      summary: Acknowledges an alarm
      description: "Send alarm acknowledge command to CC to acknowledge an alarm.\r

        
Authorization:SystemPermissionBySystemType-AlarmAckno\
        wledge

\r

        
Action:PostAlarmAck

"
      operationId: AlarmAcknowledge_PostAlarmAck
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: alarmId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: callingAppName
          in: query
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmAckResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmAckResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmAckResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmAckResponse"
        "400":
          description: Bad Request-Invalid parameters, or AlarmId should be no more than
            100 bytes, or callingAppName parameter should not be null, or
            CallingAppName must be less than or equal to 30 bytes
        "404":
          description: Not Found-System Guid not found
        "500":
          description: Internal Server Error-Can not get valid caller description, or No
            response received from device for alarm ack
      deprecated: false
  "/api/models/{modelId}/products/{productId}/alarmConfigurations/discover/{faultRuleId}":
    get:
      tags:
        - AlarmConfiguration
      summary: Gets applicable configuration sets
      description: "
This methods discovers and returns the applicable configuration
        sets for faultRuleId and productId
\r

        
These sets can be used to create alarm
        configurations
\r

        
Authorization:ModelPermissionByModelType-ReadAlarmCon\
        fig

\r

        
Action:GetAlarmConfigurationApplicableConfigSets

"
      operationId: AlarmConfiguration_GetAlarmConfigurationApplicableConfigSets
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: faultRuleId
          in: path
          description: faultRuleId must be alphanumeric string
          required: true
          schema:
            type: string
        - name: productId
          in: path
          description: productId must be base64 encoded string
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigApplicableConfigSets"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigApplicableConfigSets"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigApplicableConfigSets"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigApplicableConfigSets"
        "204":
          description: "No Content <br />\r

            \             faultRuleId not applicable for product
            <br />"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigApplicableConfigSets"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigApplicableConfigSets"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigApplicableConfigSets"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigApplicableConfigSets"
        "400":
          description: "Bad Request <br />\r

            \             1. faultRuleId contains invalid characters
            <br />\r

            \             2. productId is not base64 encoded <br
            />"
        "404":
          description: "Not Found <br />\r

            \            1. productId not found in the given modelId
            <br />\r

            \            2. faultRuleId not present <br />"
        "500":
          description: Unknown error in server
      deprecated: false
  "/api/models/{modelId}/products/{productId}/alarmConfigurations":
    get:
      tags:
        - AlarmConfiguration
      summary: Gets all alarm configurations
      description: "
This method gets all the alarm configurations done on the
        product
\r

        
Authorization:ModelPermissionByModelType-ReadAlarmCon\
        fig

\r

        
Action:GetAllAlarmConfigurations

"
      operationId: AlarmConfiguration_GetAllAlarmConfigurations
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: productId
          in: path
          description: productId must be base64 encoded string
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAlarmConfigDetail"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAlarmConfigDetail"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAlarmConfigDetail"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAlarmConfigDetail"
        "204":
          description: "No Content <br />\r

            \            No alarms configured for productId <br
            />"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAlarmConfigDetail"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAlarmConfigDetail"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAlarmConfigDetail"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAlarmConfigDetail"
        "400":
          description: "Bad request <br />\r

            \            productId is not base64encoded"
        "404":
          description: "Not Found <br />\r

            \            productId not found in the given modelId
            <br />"
        "500":
          description: Unknown error in server
      deprecated: false
    post:
      tags:
        - AlarmConfiguration
      summary: Creates an alarm configuration
      description: "
(Permissions for this api will be changed by June 10 2016)
\r

        
This methods creates new alarm configuration based on
        productID, faultRuleId and configuration values 
\r

        
If EnableConfig is set to true, the alarm processing is
        immediately started. By default alarm configuration is set to
        false
\r

        
Authorization:ModelPermissionByModelType-AlarmConfigu\
        ration

\r

        
Action:CreateAlarmConfiguration

"
      operationId: AlarmConfiguration_CreateAlarmConfiguration
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: productId
          in: path
          description: productId must be base64 encoded string
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCreateAlarmConfig"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCreateAlarmConfig"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCreateAlarmConfig"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCreateAlarmConfig"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCreateAlarmConfig"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/xml:
              schema:
                type: string
        "400":
          description: "BadRequest <br />\r

            \             1. faultRuleId invalid for given product
            <br />\r

            \             2. faultRuleId contains invalid characters
            <br />\r

            \             3. productId is not base64 encoded <br
            />"
        "404":
          description: "Not Found <br />\r

            \            1. productId not found in the given modelId
            <br />\r

            \            2. faultRuleId not present <br />"
        "500":
          description: Unknown error in server
      deprecated: false
  "/api/models/{modelId}/alarmConfigurations/{alarmConfigId}":
    get:
      tags:
        - AlarmConfiguration
      summary: Gets an alarm configuration
      description: "
This method gets the alarm configuration details based on
        alarmConfigId
\r

        
Authorization:ModelPermissionByModelType-ReadAlarmCon\
        fig

\r

        
Action:GetAlarmConfiguration

"
      operationId: AlarmConfiguration_GetAlarmConfiguration
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: alarmConfigId
          in: path
          description: alarmConfigId must be a guid
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigDetail"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigDetail"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigDetail"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigDetail"
        "400":
          description: "Bad request <br />\r

            \            alarmConfigId is not a guid"
        "404":
          description: "Not Found <br />\r

            \            alarmConfigId not present <br />"
        "500":
          description: Unknown error in server
      deprecated: false
    delete:
      tags:
        - AlarmConfiguration
      summary: Deletes an alarm configuration
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyAlarmC\
        onfig

\r

        
Action:DeleteAlarmConfiguration

"
      operationId: AlarmConfiguration_DeleteAlarmConfiguration
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: alarmConfigId
          in: path
          description: alarmConfigId must be a guid
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigDeleteStatus"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigDeleteStatus"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigDeleteStatus"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigDeleteStatus"
        "404":
          description: "Not Found <br />\r

            \            AlarmConfigId not present <br />"
        "500":
          description: Unknown error in server
      deprecated: false
  "/api/models/{modelId}/alarmConfigurations/{alarmConfigId}/enabled":
    get:
      tags:
        - AlarmConfiguration
      summary: Gets alarm configuration status
      description: "
This method gets the alarm configuration enable status
\r

        
When the alarm configuration is enabled, point history
        messages are processed and alarm is raised based on condition
        set
\r

        
When the alarm configuration is disabled, point history
        messages are not processed
\r

        
Authorization:ModelPermissionByModelType-ReadAlarmCon\
        fig

\r

        
Action:GetAlarmConfigurationEnabled

"
      operationId: AlarmConfiguration_GetAlarmConfigurationEnabled
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: alarmConfigId
          in: path
          description: alarmConfigId must be a guid
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigEnableResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigEnableResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigEnableResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigEnableResponse"
        "400":
          description: "Bad request <br />\r

            \            alarmConfigId is not a guid"
        "404":
          description: "Not Found <br />\r

            \            Alarm configuration ID is not found. <br
            />"
        "500":
          description: Unknown error in server
      deprecated: false
    put:
      tags:
        - AlarmConfiguration
      summary: Enables or disables an alarm configuration
      description: "
This method allows to enable or disable the alarm
        configuration
\r

        
When EnableAlarmProcessing is set to true, point history
        messages are processed and alarm is raised based on condition
        set
\r

        
When EnableAlarmProcessing is set to false, point history
        messages are not processed
\r

        
Authorization:ModelPermissionByModelType-ModifyAlarmC\
        onfig

\r

        
Action:SetAlarmConfigurationEnabled

"
      operationId: AlarmConfiguration_SetAlarmConfigurationEnabled
      parameters:
        - name: modelId
          in: path
          description: company ID
          required: true
          schema:
            type: string
        - name: alarmConfigId
          in: path
          description: Alarm configuration ID to be enabled or disabled. ID should be a GUID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAlarmConfigEnable"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAlarmConfigEnable"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAlarmConfigEnable"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAlarmConfigEnable"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAlarmConfigEnable"
        description: Alarm Configuration enabled status. Set value as true to enable alarm
          processing else false
        required: true
      responses:
        "200":
          description: "OK <br />\r

            \            Successfully set the value for alarm
            Configuration enabled status."
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/xml:
              schema:
                type: string
        "400":
          description: "Bad request <br />\r

            \            alarmConfigId is not a guid"
        "404":
          description: "Not Found <br />\r

            \            Alarm configuration ID is not found. <br
            />"
        "500":
          description: Unknown error in server
      deprecated: false
  "/api/models/{modelId}/alarmConfigurations/batch/enabled":
    post:
      tags:
        - AlarmConfiguration
      summary: Enables or disables a batch of alarm configuration
      description: "
\r

        
Use this method to change the alarm configuration enabled
        status in bulk.
\r

        
When an alarm configuration is enabled the point history
        messages are analyzed for this alarm condition and alarms raised or
        updated if required. 
\r

        
When the alarm configuration is disabled, point history
        messages are not analyzed for this alarm condition
\r

        
Authorization:ModelPermissionByModelType-ModifyAlarmC\
        onfig

\r

        
Action:SetAlarmConfigurationEnabledBatch

"
      operationId: AlarmConfiguration_SetAlarmConfigurationEnabledBatch
      parameters:
        - name: modelId
          in: path
          description: The id of the model that alarms are configured on
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiAlarmConfigEnableRequest"
          text/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiAlarmConfigEnableRequest"
          application/xml:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiAlarmConfigEnableRequest"
          text/xml:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiAlarmConfigEnableRequest"
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiAlarmConfigEnableRequest"
        description: Array of alarm configurations to change the status of for this model
        required: true
      responses:
        "200":
          description: "OK <br />\r

            \            Applied the configuration changes, the
            response object contains the result of the batch and individual
            changes."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmBatchEnableConfigResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmBatchEnableConfigResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmBatchEnableConfigResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmBatchEnableConfigResponse"
        "500":
          description: Unknown error in server
      deprecated: false
  "/api/models/{modelId}/alarmConfigurations/{alarmConfigId}/parameterValues":
    get:
      tags:
        - AlarmConfiguration
      summary: Gets alarm configuration values
      description: "\r

        
Authorization:ModelPermissionByModelType-ReadAlarmCon\
        fig

\r

        
Action:GetAlarmConfigurationParameterValues

"
      operationId: AlarmConfiguration_GetAlarmConfigurationParameterValues
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: alarmConfigId
          in: path
          description: alarmConfigId must be a guid
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigParametersResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigParametersResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigParametersResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAlarmConfigParametersResponse"
        "404":
          description: "Not Found <br />\r

            \            AlarmConfigId not present <br />"
        "500":
          description: Unknown error in server
      deprecated: false
    put:
      tags:
        - AlarmConfiguration
      summary: Updates alarm configuration values
      description: "
This method allows to update alarm configuration values like
        DurationForFault, MaxAllowedValue, MinAllowedValue etc
\r

        
If alarm configuration is enabled, the changes will affect
        immediately
\r

        
If alarm configuration is disabled, the changes will affect
        when configuration is enabled
\r

        
Authorization:ModelPermissionByModelType-ModifyAlarmC\
        onfig

\r

        
Action:SetAlarmConfigurationParameterValues

"
      operationId: AlarmConfiguration_SetAlarmConfigurationParameterValues
      parameters:
        - name: modelId
          in: path
          description: company ID
          required: true
          schema:
            type: string
        - name: alarmConfigId
          in: path
          description: Alarm configuration ID to be enabled or disabled. ID should be a GUID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiUpdateAlarmConfig"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiUpdateAlarmConfig"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiUpdateAlarmConfig"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiUpdateAlarmConfig"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiUpdateAlarmConfig"
        description: Alarm Configuration parameter values
        required: true
      responses:
        "200":
          description: "OK <br />\r

            \            Successfully updated the alarm
            configuration values."
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/xml:
              schema:
                type: string
        "400":
          description: "Bad request <br />\r

            \            1. AlarmConfigId is not a guid <br
            />\r

            \            2. Request contains invalid configuration
            values <br />"
        "404":
          description: "Not Found <br />\r

            \            Alarm configuration ID is not found. <br
            />"
        "500":
          description: Unknown error in server
      deprecated: false
  /api/annotationManagement/admin/annotationStreams:
    get:
      tags:
        - AnnotationAdmin
      summary: Gets all annotation streams
      description: "Get all Annotation Streams-DevOps usage\r

        \            DevOps can call this web api to get all available
        annotation streams created by different applications.\r

        \            returns a list of streams, with stream details,
        annotation filters and owner who created them\r

        
Authorization:GlobalActivity-RetrieveAnyAnnotationStr\
        eam

\r

        
Action:GetAnnotationStreams

"
      operationId: AnnotationAdmin_GetAnnotationStreams
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
        "204":
          description: No Content-No annotation streams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
        "403":
          description: Forbidden
        "500":
          description: InternalServerError-Failed to get annotation streams
      deprecated: false
  "/api/annotationManagement/admin/owners/{ownerId}":
    get:
      tags:
        - AnnotationAdmin
      summary: Gets annotation streams given owner id
      description: "Get Annotation Stream by application App Id/user object id-DevOps
        usage\r

        \            DevOps can use this web api to get annotation
        stream created by any custom application/user.\r

        \            This API will be helpful for DevOps to check how
        many/what annotation streams are created by a custom application/user.\r

        \            returns a list of streams, with stream details,
        annotation filters and owner who created them\r

        
Authorization:GlobalActivity-RetrieveAnyAnnotationStr\
        eam

\r

        
Action:GetAnnotationStreamsByOwnerId

"
      operationId: AnnotationAdmin_GetAnnotationStreamsByOwnerId
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
        "204":
          description: No Content-No annotation streams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiAnnotationStreamExt"
        "403":
          description: Forbidden
        "404":
          description: Not Found, application appId not found
        "500":
          description: InternalServerError-Failed to get annotation streams
      deprecated: false
  "/api/annotationManagement/admin/annotationStreams/{streamId}":
    delete:
      tags:
        - AnnotationAdmin
      summary: Deletes an annotation stream
      description: "Remove an annotation stream, also will remove its annotation
        filters-DevOps usage. \r

        \            DevOps can use this WebAPI to remove any annotation
        stream created by any owner(application app id or user object id)\r

        
Authorization:GlobalActivity-DeleteAnyAnnotationStrea\
        m

\r

        
Action:RemoveAnnotationStream

"
      operationId: AnnotationAdmin_RemoveAnnotationStream
      parameters:
        - name: streamId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: InternalServerError
      deprecated: false
  /api/annotationManagement/admin/annotationStreams/clean:
    delete:
      tags:
        - AnnotationAdmin
      summary: Cleans annotation stream store
      description: "Clean annotation stream store by removing annotation stream collections
        which have no stream-DevOps usage. \r

        \            DevOps can use this WebAPI to clean stream store.
        \r

        \            For each tenant environment, only need to call this
        web api once to clean legacy stream collections.\r

        
Authorization:GlobalActivity-DeleteAnyAnnotationStrea\
        m

\r

        
Action:CleanAnnotationStreamStore

"
      operationId: AnnotationAdmin_CleanAnnotationStreamStore
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCleanResult"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCleanResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCleanResult"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCleanResult"
        "403":
          description: Forbidden
        "500":
          description: InternalServerError
      deprecated: false
  "/api/annotationPublish/systems/{systemGuid}":
    post:
      tags:
        - AnnotationEventPublish
      summary: Publishes new data updates or events on behalf of a system
      description: "Publish new events via annotation stream.\r

        \            Event details which are passed in as parameter will
        be published via annotation stream so that it can be received by all the
        listeners.\r

        
Authorization:SystemPermissionBySystemType-PublishSys\
        temAnnotationEvent

\r

        
Action:PublishSystemAnnotationEvent

"
      operationId: AnnotationEventPublish_PublishSystemAnnotationEvent
      parameters:
        - name: systemGuid
          in: path
          description: SystemGuid for which the annotation event is published
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationEventPublishRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationEventPublishRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationEventPublishRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationEventPublishRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationEventPublishRequest"
        description: Pay load which holds the event parameters
        required: true
      responses:
        "200":
          description: "Ok: Successfully published the event"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationEventPublishResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationEventPublishResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationEventPublishResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationEventPublishResponse"
        "400":
          description: "BadRequest: Input parameters are not valid. This may be due to any
            event in the request is above the size limit (256K)."
        "403":
          description: "UnAuthorized: Caller is not authorized to invoke the API"
        "500":
          description: "InternalServerError: Event publish failed due to unknown error"
      deprecated: false
  "/api/annotationPublish/tenants/{tenantName}":
    post:
      tags:
        - AnnotationEventPublish
      summary: Publishes new data updates or events on the given tenant
      description: "Publish new events via annotation stream.\r

        \            Event details which are passed in as parameter will
        be published via annotation stream so that it can be received by all the
        listeners.\r

        
Authorization:TenantActivity-PublishTenantAnnotationE\
        vent

\r

        
Action:PublishAnnotationEvent

"
      operationId: AnnotationEventPublish_PublishAnnotationEvent
      parameters:
        - name: tenantName
          in: path
          description: Tenant Name for which the annotation event is published
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationEventPublishRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationEventPublishRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationEventPublishRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationEventPublishRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationEventPublishRequest"
        description: Payload which holds the event parameters
        required: true
      responses:
        "200":
          description: "Ok: Successfully published the event"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationEventPublishResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationEventPublishResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationEventPublishResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationEventPublishResponse"
        "400":
          description: "BadRequest when: <br />\r

            \            1. Input parameters are not valid. This may
            be due to any event in the request is above the size limit (256K).
            <br />\r

            \            2. Tenant name in the request is invalid or
            not same as the called tenant. <br />"
        "403":
          description: "Unauthorized: Caller is not authorized to invoke the API"
        "500":
          description: "InternalServerError: Event publish failed due to unknown error"
      deprecated: false
  /api/annotationManagement/annotationstreams/servicebus:
    post:
      tags:
        - AnnotationSubscription
      summary: Creates an annotation stream with Event Hub publisher
      description: "Create Annotation Stream for the application. The SasConnectionString
        and SetPartitionKey are only required as part of the request when want
        to create stream with EventHub(PublishMode is EventHub(or 1))\r

        \            As a part of the request the SasConnectionString
        should include Endpoint, SharedAccessKeyName, SharedAccessKey,
        EntityPath values when the PublishMode is EventHub\r

        \            if SetPartitionKey is true, messages sent to
        EventHub will have PartitionKey set. If the content type is not
        specified then the default value: application/json it will be used.\r

        
Authorization:GlobalActivity-CreateDeleteAnnotationSt\
        ream

\r

        
Action:CreateAnnotationStreamWithServiceBusPublisher<\
        /p>"
      operationId: AnnotationSubscription_CreateAnnotationStreamWithServiceBusPublisher
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamCreateRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamCreateRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamCreateRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamCreateRequest"
        required: true
      responses:
        "201":
          description: Created Annotation Stream
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/xml:
              schema:
                type: string
        "400":
          description: "Bad Request - Invalid or missing input\r

            \            If PublishMode is Topic ContentType
            application/json+gzip is not allowed, \r

            \            Allowed values for ContentType are
            application/json, application/json+gzip or null\r

            \            If ContentType is null the default value is
            application/json"
        "403":
          description: Forbidden
        "500":
          description: Error while creating annoation stream
      deprecated: false
  /api/annotationManagement/annotationStreams/v2:
    post:
      tags:
        - AnnotationSubscription
      summary: Creates an annotation stream
      description: "Creates an annotation stream using the supplied connection details for
        the messaging endpoint annotations will be sent to\r

        

Authorization:GlobalActivity-CreateDeleteAnnotationSt\
        ream

\r

        
Action:CreateAnnotationStreamV2

"
      operationId: AnnotationSubscription_CreateAnnotationStreamV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamCreationRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamCreationRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamCreationRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamCreationRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamCreationRequest"
        description: WebApiAnnotationStreamCreationRequest
        required: true
      responses:
        "201":
          description: Created annotation stream
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStreamCreationResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStreamCreationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStreamCreationResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStreamCreationResponse"
        "400":
          description: Input parameters not valid
        "403":
          description: Forbidden
        "409":
          description: Annotation stream with same name exists
        "500":
          description: Unknown Error while creating annoation stream
      deprecated: false
  "/api/annotationManagement/annotationStreams/{annotationStreamId}/v2":
    put:
      tags:
        - AnnotationSubscription
      summary: Updates an annotation stream
      description: "Updates an annotation stream with the supplied connection details for
        the messaging endpoint that annotations will be sent to\r

        \            Each custom application can only update an
        annotation stream that it created. And it's able to update an existing
        annotatoin stream created by previous version of web api.\r

        
Authorization:GlobalActivity-ManageAnnotationStream\r

        

Action:UpdateAnnotationStreamV2

"
      operationId: AnnotationSubscription_UpdateAnnotationStreamV2
      parameters:
        - name: annotationStreamId
          in: path
          description: Id of Stream Id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamConnectionDetails"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamConnectionDetails"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamConnectionDetails"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamConnectionDetails"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamConnectionDetails"
        description: WebApiAnnotationStreamConnectionDetails
        required: true
      responses:
        "200":
          description: Updated
        "400":
          description: Input parameters are not valid
        "403":
          description: Forbidden
        "404":
          description: Annotation with given id is not found
        "500":
          description: Error while updating detail of Annotation stream
      deprecated: false
  "/api/annotationManagement/annotationStreams/{annotationStreamId}/classificationnamespaces":
    put:
      tags:
        - AnnotationSubscription
      summary: Updates the setting to filter out classified data and also overwrites
        existing classficationnamespaces
      description: "Updates the following properties of an annotation stream\r

        \            ShouldFilteroutClassifiedData: If set to true,
        Event or values will be searched for the required classification and
        removed. If false, no filtering will be done, all the events and
        contents will be sent as is\r

        \            ClassificationNamespacesToFilter: This list
        contains the classification namespaces to be filtered out. This will
        overwrite the already existing namespaces.\r

        
Authorization:GlobalActivity-CreateDeleteAnnotationSt\
        ream

\r

        
Action:UpdateClassificationNamespacesToAnnotationStre\
        am

"
      operationId: AnnotationSubscription_UpdateClassificationNamespacesToAnnotationStream
      parameters:
        - name: annotationStreamId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamClassificationNames\
                paceUpdateRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamClassificationNames\
                paceUpdateRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamClassificationNames\
                paceUpdateRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamClassificationNames\
                paceUpdateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamClassificationNames\
                paceUpdateRequest"
        required: true
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/xml:
              schema:
                type: string
        "400":
          description: Input parameters are not valid. The ShouldFilteroutClassifiedData is
            true and ClassificationNamespacesToFilter is empty
        "404":
          description: Annotation with given id is not found
        "500":
          description: Error while updating
            ShouldFilteroutClassifiedData/ClassificationNamespacesToFilter of
            annotation stream
      deprecated: false
  "/api/annotationManagement/annotationStreams/servicebus/{annotationStreamId}/eventhub/sastoken":
    put:
      tags:
        - AnnotationSubscription
      summary: Updates the Event Hub connection string for an annotation stream
      description: "Update SaS connection string of event hub for given annotation stream
        Id\r

        \            As a part of the request the SasConnectionString
        should include Endpoint, SharedAccessKeyName, SharedAccessKey,
        EntityPath values when the PublishMode is an Event Hub\r

        
Authorization:GlobalActivity-CreateDeleteAnnotationSt\
        ream

\r

        
Action:UpdateSasConnectionStingAnnoationStreamEventHu\
        bPublisher

"
      operationId: AnnotationSubscription_UpdateSasConnectionStingAnnoationStreamEventHubPublisher
      parameters:
        - name: annotationStreamId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamSasConnectionString\
                UpdateRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamSasConnectionString\
                UpdateRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamSasConnectionString\
                UpdateRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamSasConnectionString\
                UpdateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamSasConnectionString\
                UpdateRequest"
        required: true
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/xml:
              schema:
                type: string
        "400":
          description: Input parameters are not valid
        "404":
          description: Annotation with given id is not found
        "500":
          description: Error while updateing SaS connection string of annotation stream
      deprecated: false
  "/api/annotationManagement/annotationStreams/servicebus/{annotationStreamId}/eventhub/setpartitionkey":
    put:
      tags:
        - AnnotationSubscription
      summary: Sets Event Hub partitioning configuration for an annotation stream
      description: "Update an annotation stream with SetPartitionKey\r

        \            By updating SetPartitionKey to true/false, messages
        sent to EventHub will have PartitionKey set or not.\r

        
Authorization:GlobalActivity-CreateDeleteAnnotationSt\
        ream

\r

        
Action:UpdateEventHubSetPartitionKeyToAnnotationStrea\
        m

"
      operationId: AnnotationSubscription_UpdateEventHubSetPartitionKeyToAnnotationStream
      parameters:
        - name: annotationStreamId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamSetPartitionKeyUpda\
                teRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamSetPartitionKeyUpda\
                teRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamSetPartitionKeyUpda\
                teRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamSetPartitionKeyUpda\
                teRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationStreamSetPartitionKeyUpda\
                teRequest"
        required: true
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
            text/xml:
              schema:
                type: string
        "400":
          description: Input parameters are not valid
        "404":
          description: Annotation with given id is not found
        "500":
          description: Error while updateing SetPartitionKey of annotation stream
      deprecated: false
  "/api/annotationManagement/annotationStreams/{annotationStreamId}/annotationFilters":
    post:
      tags:
        - AnnotationSubscription
      summary: Adds an annotation filter to an annotation stream
      description: "Create an annotation filter and add it to the annotation stream.\r

        
Authorization:GlobalActivity-ManageAnnotationStream\r

        

Action:CreateAnnotationFilter

"
      operationId: AnnotationSubscription_CreateAnnotationFilter
      parameters:
        - name: annotationStreamId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationFilterCreateRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationFilterCreateRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationFilterCreateRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationFilterCreateRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAnnotationFilterCreateRequest"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationFilter"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationFilter"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationFilter"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationFilter"
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: InternalServerError
      deprecated: false
  "/api/annotationManagement/annotationStreams/{annotationStreamId}/annotationFilters/{annotationFilterId}":
    get:
      tags:
        - AnnotationSubscription
      summary: Gets annotation filter given annotation id and filter id
      description: "Get annotation filter given annotation stream id and annotation filter
        Id. \r

        \            One custom application can only get annotation
        filter which belongs to annotation streams created by it.\r

        
Authorization:GlobalActivity-ManageAnnotationStream\r

        

Action:GetAnnotationFilterById

"
      operationId: AnnotationSubscription_GetAnnotationFilterById
      parameters:
        - name: annotationStreamId
          in: path
          required: true
          schema:
            type: string
        - name: annotationFilterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationFilter"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationFilter"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationFilter"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationFilter"
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: InternalServerError
      deprecated: false
    delete:
      tags:
        - AnnotationSubscription
      summary: Removes an annotation filter from an annotation stream
      description: "Remove an annotation filter from an AnnotationStream.\r

        
Authorization:GlobalActivity-ManageAnnotationStream\r

        

Action:RemoveAnnotationFilter

"
      operationId: AnnotationSubscription_RemoveAnnotationFilter
      parameters:
        - name: annotationStreamId
          in: path
          required: true
          schema:
            type: string
        - name: annotationFilterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: InternalServerError
      deprecated: false
  "/api/annotationManagement/annotationStreams/{annotationStreamId}":
    get:
      tags:
        - AnnotationSubscription
      summary: Gets annotation stream given annotation stream id
      description: "Get Annotation Stream by Id\r

        \            Each custom application can only get details of an
        annotation stream that it created. \r

        \            This Api should be called multiple times till get
        status code of OK or InternalServerError.\r

        \            Once the annotation stream is created, need call
        WebApi GetSubscription to get subscription detail, including token.\r

        
Authorization:GlobalActivity-ManageAnnotationStream\r

        

Action:GetAnnotationStreamById

"
      operationId: AnnotationSubscription_GetAnnotationStreamById
      parameters:
        - name: annotationStreamId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK-stream is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStream"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStream"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStream"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStream"
        "202":
          description: Accepted-stream creation in progress
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStream"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStream"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStream"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStream"
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: InternalServerError-stream creation failed or unknown error
      deprecated: false
  "/api/annotationManagement/annotationStreams/{annotationStreamId}/annotationFilters/{annotationFilterId}/SourceInstances":
    post:
      tags:
        - AnnotationSubscription
      summary: Adds system, system type or tenant to an existing annotation filter
      description: "Add source instances to an annotation filter given annotation stream id
        and annotation filter id.\r

        \            More source instances(system guids or model ids)
        can be added to an annotation filter in case of applying the annotation
        filter to more instances.\r

        
Authorization:GlobalActivity-ManageAnnotationStream\r

        

Action:AddSourceInstancesToAnnotationFilter

"
      operationId: AnnotationSubscription_AddSourceInstancesToAnnotationFilter
      parameters:
        - name: annotationStreamId
          in: path
          required: true
          schema:
            type: string
        - name: annotationFilterId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiSourceInstancesAddRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiSourceInstancesAddRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiSourceInstancesAddRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiSourceInstancesAddRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiSourceInstancesAddRequest"
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: InternalServerError
      deprecated: false
  "/api/annotationmanagement/annotationStreams/{annotationStreamId}/annotationFilters/{annotationFilterId}/SourceInstances/{encodedSourceInstance}":
    delete:
      tags:
        - AnnotationSubscription
      summary: Removes a system, system type or tenant from an annotation filter
      description: "Remove a source instance from an annotation filter given annotation
        stream id, annotation filter id and source instance.\r

        \            Call this web api to remove a source instance when
        dont want to filter on the instance.\r

        \            source instance should be Base64-encoded.\r

        
Authorization:GlobalActivity-ManageAnnotationStream\r

        

Action:RemoveSourceInstanceFromAnnotationFilter

"
      operationId: AnnotationSubscription_RemoveSourceInstanceFromAnnotationFilter
      parameters:
        - name: annotationStreamId
          in: path
          required: true
          schema:
            type: string
        - name: annotationFilterId
          in: path
          required: true
          schema:
            type: string
        - name: encodedSourceInstance
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: InternalServerError
      deprecated: false
  "/api/annotationManagement/annotationStreams/{streamId}":
    delete:
      tags:
        - AnnotationSubscription
      summary: Deletes an annotation stream
      description: "Remove an annotation stream, also will remove its annotation filters.
        This method only deletes annotation streams created by the calling
        application.\r

        
Authorization:GlobalActivity-CreateDeleteAnnotationSt\
        ream

\r

        
Action:RemoveAnnotationStream

"
      operationId: AnnotationSubscription_RemoveAnnotationStream
      parameters:
        - name: streamId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: Invalid annotation stream id
        "403":
          description: Forbidden
        "404":
          description: Annotation stream not found for the calling application, it may no
            longer exist or may have been created by a different application
        "500":
          description: Internal error removing stream. Contact support to review the logs.
      deprecated: false
  "/api/annotationManagement/subscriptions/{annotationStreamId}":
    get:
      tags:
        - AnnotationSubscription
      summary: Gets subscription details for an annotation stream
      description: "Get subscription detail of an annotation stream\r

        \            Once Annotation Stream is created, call this web
        api to get subscription detail of the stream.\r

        
Authorization:GlobalActivity-ManageAnnotationStream\r

        

Action:GetSubscription

"
      operationId: AnnotationSubscription_GetSubscription
      parameters:
        - name: annotationStreamId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStreamSubscription"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStreamSubscription"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStreamSubscription"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAnnotationStreamSubscription"
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: InternalServerError
      deprecated: false
  "/api/models/{modelId}/graphql":
    get:
      tags:
        - AssetRegistryGraphQL
      summary: Issues a read-only GraphQL query on a model
      description: "Needs a valid model id and a well-formatted query as required
        parameters to be executed.\r

        \                Optional parameters: operationName,
        namedQuery.\r

        \                Cannot send mutations within the query.\r

        \                If data is present within the Json returned
        then errors will be empty.\r

        \                Return shape:\r

        \                {\r

        \                    \"data\":{\r

        \                        \"objects\": [\r

        \                            {\r

        \                                \"id\": \"tag::element1\",\r

        \                                \"types\": []\r

        \                            }\r

        \                        ],\r

        \                        \"properties\": [\r

        \                            {\r

        \                                \"id\": \"propertyId\"\r

        \                            }\r

        \                        ]    \r

        \                    },\r

        \                    \"errors\":[\r

        \                        {\r

        \                            \"locations\":[\r

        \                                {\r

        \                                    \"line\": 1,\r

        \                                    \"column\": 5\r

        \                                }\r

        \                            ],\r

        \                            \"message\": \"errorMessage\"\r

        \                        }\r

        \                    ]\r

        \                }\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:GetAsync

"
      operationId: AssetRegistryGraphQL_GetAsync
      parameters:
        - name: modelId
          in: path
          description: The Id of the model to query.
          required: true
          schema:
            type: string
        - name: operationName
          in: query
          description: Operation name inside the query to be executed
          required: false
          schema:
            type: string
        - name: namedQuery
          in: query
          description: Name of supported query.
          required: false
          schema:
            type: string
        - name: query
          in: query
          description: A GraphQL to be executed
          required: true
          schema:
            type: string
        - name: variables
          in: query
          description: A JSON-enconded object containing the variables for the query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAssetRegistryGraphQLResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAssetRegistryGraphQLResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAssetRegistryGraphQLResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAssetRegistryGraphQLResponse"
        "400":
          description: Parameter not valid
        "401":
          description: Unauthorized; No authorization to issue a GraphQL query on a model
        "404":
          description: Not found; The model id does not exist
        "500":
          description: An unexpected error has occurred.
      deprecated: false
    post:
      tags:
        - AssetRegistryGraphQL
      summary: Issues a GraphQL query on a model
      description: "Needs a valid model id and a well-formatted query as required
        parameters to be executed.\r

        \                Optional parameters: operationName,
        namedQuery.\r

        \                If data is present within the Json returned
        then errors will be empty.\r

        \                Return shape:\r

        \                {\r

        \                    \"data\":{\r

        \                        \"objects\": [\r

        \                            {\r

        \                                \"id\": \"tag::element1\",\r

        \                                \"types\": []\r

        \                            }\r

        \                        ],\r

        \                        \"properties\": [\r

        \                            {\r

        \                                \"id\": \"propertyId\"\r

        \                            }\r

        \                        ]    \r

        \                    },\r

        \                    \"errors\":[\r

        \                        {\r

        \                            \"locations\":[\r

        \                                {\r

        \                                    \"line\": 1,\r

        \                                    \"column\": 5\r

        \                                }\r

        \                            ],\r

        \                            \"message\": \"errorMessage\"\r

        \                        }\r

        \                    ]\r

        \                }\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:PostAsync

"
      operationId: AssetRegistryGraphQL_PostAsync
      parameters:
        - name: modelId
          in: path
          description: The Id of the model to query.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAssetRegistryGraphQLPostRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAssetRegistryGraphQLPostRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAssetRegistryGraphQLPostRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAssetRegistryGraphQLPostRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAssetRegistryGraphQLPostRequest"
        description: Contains the query to be issued.
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiAssetRegistryGraphQLResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiAssetRegistryGraphQLResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiAssetRegistryGraphQLResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiAssetRegistryGraphQLResponse"
        "400":
          description: Parameter not valid
        "401":
          description: Unauthorized; No authorization to issue a GraphQL query on a model
        "404":
          description: Not found; The model id sent does not exist
        "500":
          description: An unexpected error has occurred.
      deprecated: false
  "/api/systems/{systemGuid}/bigdata/points/history/summary":
    post:
      tags:
        - BigDataPointHistory
      summary: Query History Summary
      description: "Given systemGuid, point Ids and start/end datetime, get history
        summary: avg, min, max value by sample interval.\r

        
Authorization:SystemPermissionBySystemType-ReadPointH\
        istory

\r

        
Action:PostHistorySummaryQuery

"
      operationId: BigDataPointHistory_PostHistorySummaryQuery
      parameters:
        - name: systemGuid
          in: path
          description: The system to query history summary for
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PointHistorySummaryQueryParams"
          text/json:
            schema:
              $ref: "#/components/schemas/PointHistorySummaryQueryParams"
          application/xml:
            schema:
              $ref: "#/components/schemas/PointHistorySummaryQueryParams"
          text/xml:
            schema:
              $ref: "#/components/schemas/PointHistorySummaryQueryParams"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PointHistorySummaryQueryParams"
        description: The query parameters including point ids, Start/End Time and summary
          time interval
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySampleSummary"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySampleSummary"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySampleSummary"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySampleSummary"
        "400":
          description: Bad Request-Invalid parameters, or Invalid query parameters
        "500":
          description: Internal Server Error
      deprecated: false
  "/api/systems/{systemGuid}/bigdata/points/history/interval":
    post:
      tags:
        - BigDataPointHistory
      summary: Query history samples
      description: "Get history samples with given systemGuid and point Ids and start/end
        time\r

        
Authorization:SystemPermissionBySystemType-ReadPointH\
        istory

\r

        
Action:PostHistoryQuery

"
      operationId: BigDataPointHistory_PostHistoryQuery
      parameters:
        - name: systemGuid
          in: path
          description: The system to query history summary for
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PointHistoryQueryParams"
          text/json:
            schema:
              $ref: "#/components/schemas/PointHistoryQueryParams"
          application/xml:
            schema:
              $ref: "#/components/schemas/PointHistoryQueryParams"
          text/xml:
            schema:
              $ref: "#/components/schemas/PointHistoryQueryParams"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PointHistoryQueryParams"
        description: The query parameters including point ids, Start/End Time
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
        "400":
          description: Bad Request-Invalid parameters
        "500":
          description: Internal Server Error
      deprecated: false
  /analytic/api/v2/query/operational:
    post:
      tags:
        - BigDataPointHistory
      summary: Retrieves all the information for a specified data point and time range
      description: Retrieves all the information for a specified data point and time range
      operationId: BigDataPointHistory_TimeSeriesQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataPointTSDBIntervalRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/DataPointTSDBIntervalRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/DataPointTSDBIntervalRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/DataPointTSDBIntervalRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/DataPointTSDBIntervalRequest"
        description: The query parameters including Start/End Time and collection of query
          in which item contains pointId, systemGuid, aggregator, downSample and
          pointAttributes
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DPSResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/DPSResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/DPSResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/DPSResponse"
        "400":
          description: Bad Request-Invalid parameters
        "500":
          description: Internal Server Error
      deprecated: false
  "/api/models/{modelId}/bulkuploads":
    post:
      tags:
        - BulkUpload
      summary: Creates a bulk upload request to add CoreObjects into a Model.
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:CreateRequest

"
      operationId: BulkUpload_CreateRequest
      parameters:
        - name: modelId
          in: path
          description: The id of the model that will be updated.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiBulkUploadRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiBulkUploadRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiBulkUploadRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiBulkUploadRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiBulkUploadRequest"
        description: Configuration of the request.
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiBulkUploadCreateResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiBulkUploadCreateResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiBulkUploadCreateResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiBulkUploadCreateResponse"
        "400":
          description: Parameter not valid
        "401":
          description: Unauthorized; No authorization access to create the request for the
            specified model
        "404":
          description: Not found; The model id sent does not exists
      deprecated: false
  "/api/models/{modelId}/bulkuploads/{requestId}":
    get:
      tags:
        - BulkUpload
      summary: Retrieves the status of a given Bulk Upload request.
      description: "\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:QueryRequestStatus

"
      operationId: BulkUpload_QueryRequestStatus
      parameters:
        - name: modelId
          in: path
          description: The Id of the model in which the CoreObjects CRUDs action will be
            performed.
          required: true
          schema:
            type: string
        - name: requestId
          in: path
          description: The Id of a created Bulk Upload request.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiBulkUploadRequestStatusResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiBulkUploadRequestStatusResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiBulkUploadRequestStatusResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiBulkUploadRequestStatusResponse"
        "400":
          description: Parameter not valid
        "401":
          description: Unauthorized; No authorization access to obtain the modelid status
        "404":
          description: Not found; The request id does not exists
      deprecated: false
  "/api/systems/{systemGuid}/connection/restart":
    put:
      tags:
        - ConnectionMonitor
      summary: Requests a connected system restarts
      description: "Restart CloudConnector on EBI with given system Guid.\r

        
Authorization:SystemPermissionBySystemType-ManageConn\
        ections

\r

        
Action:RestartCloudConnection

"
      operationId: ConnectionMonitor_RestartCloudConnection
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiConnectionRestartResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiConnectionRestartResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiConnectionRestartResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiConnectionRestartResponse"
        "400":
          description: Bad Request-Invalid parameters
        "404":
          description: Not Found-No device found for system guid
        "500":
          description: Internal Server Error-No response received from device for
            connection restart
      deprecated: false
  "/api/systems/{systemGuid}/heartbeat/last":
    get:
      tags:
        - ConnectionMonitor
      summary: Gets the time of the last heartbeat sent by a system
      description: "Get last heartbeat.\r

        
Authorization:SystemPermissionBySystemType-ManageConn\
        ections

\r

        
Action:GetLastHeartBeat

"
      operationId: ConnectionMonitor_GetLastHeartBeat
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiLastHeartbeatResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiLastHeartbeatResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiLastHeartbeatResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiLastHeartbeatResponse"
        "400":
          description: Bad Request-Invalid parameters
        "404":
          description: Not Found-No last connection available
      deprecated: false
  "/api/systems/{systemGuid}/systeminfo/last":
    get:
      tags:
        - ConnectionMonitor
      summary: Gets the last system information details sent by a system
      description: "Get last system info.\r

        
Authorization:SystemPermissionBySystemType-ManageConn\
        ections

\r

        
Action:GetLastSystemInfo

"
      operationId: ConnectionMonitor_GetLastSystemInfo
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiLastSystemInfoResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiLastSystemInfoResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiLastSystemInfoResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiLastSystemInfoResponse"
        "400":
          description: Bad Request-Invalid parameters
        "404":
          description: Not Found-No last connection available
      deprecated: false
  "/api/systems/{systemGuid}/status":
    get:
      tags:
        - ConnectionMonitor
      summary: Gets the online status of a system
      description: "Get System Online Status.\r

        
Authorization:SystemPermissionBySystemType-ManageConn\
        ections

\r

        
Action:GetSystemOnlineStatus

"
      operationId: ConnectionMonitor_GetSystemOnlineStatus
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiSystemStatusResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiSystemStatusResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiSystemStatusResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiSystemStatusResponse"
        "400":
          description: Bad Request-Invalid parameters
      deprecated: false
  "/api/models/{modelId}/element":
    post:
      tags:
        - Element
      summary: Adds an element to a model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:AddElement

"
      operationId: Element_AddElement
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreElement"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreElement"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreElement"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreElement"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCoreElement"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreElement"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreElement"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreElement"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreElement"
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If element Id is null or invalid. <br
            />\r

            \            3. If building is null or invalid."
        "409":
          description: "Conflict <br />\r

            \            If item of same type already exists with
            message \"SAME_TYPE\", or if item of different type already exists
            with message \"DIFFERENT_TYPE\"."
        "500":
          description: For any other errors
      deprecated: false
  "/api/models/{modelId}/cloudplatformgateway":
    post:
      tags:
        - Element
      summary: Adds a gateway to a model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:AddCloudPlatformGateway

"
      operationId: Element_AddCloudPlatformGateway
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCloudPlatformGateway"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCloudPlatformGateway"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCloudPlatformGateway"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCloudPlatformGateway"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCloudPlatformGateway"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCloudPlatformGateway"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCloudPlatformGateway"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCloudPlatformGateway"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCloudPlatformGateway"
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If gateway Id is null or invalid. <br
            />\r

            \            3. If spatial element is null or invalid."
        "409":
          description: "Conflict <br />\r

            \            If item of same type already exists with
            message \"SAME_TYPE\", or if item of different type already exists
            with message \"DIFFERENT_TYPE\"."
        "500":
          description: For any other errors
      deprecated: false
  "/api/models/{modelId}/element/{encodedElementId}":
    get:
      tags:
        - Element
      summary: Gets details of a model element given element Id and detail level
      description: "Given a modelId and element id, this will retrieve the element
        details.\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:GetElement

"
      operationId: Element_GetElement
      parameters:
        - name: modelId
          in: path
          description: Id of the model in which the Element to be retrieved
          required: true
          schema:
            type: string
        - name: encodedElementId
          in: path
          description: Base64 encoded Id of the Element
          required: true
          schema:
            type: string
        - name: basicinfo
          in: query
          description: Retrieve basic details like id and types
          required: false
          schema:
            type: boolean
        - name: includepropertybasics
          in: query
          description: Retrieve Property basic details. Set this and other property items
            to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertybindings
          in: query
          description: Retrieve Property Bindings. Set this and other property items to
            false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertyroles
          in: query
          description: Retrieve Property Roles. Set this and other property items to false
            to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includerelationships
          in: query
          description: Retrieve Relationships to other Objects. Set this and other property
            items to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: alldetails
          in: query
          description: Return all details for the object, a shortcut for setting all
            previous items to true
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Retrieved, if successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreElement"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreElement"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreElement"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreElement"
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If element Id is null or invalid."
        "404":
          description: Not found, if element does not exist in that specific model, or
            model was not found
        "500":
          description: For any other errors
      deprecated: false
    delete:
      tags:
        - Element
      summary: Removes an element from a model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:RemoveElement2

"
      operationId: Element_RemoveElement2
      parameters:
        - name: encodedElementId
          in: path
          description: base64 encoded id of element to remove
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Removed
          content:
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
            application/xml:
              schema:
                type: boolean
            text/xml:
              schema:
                type: boolean
        "400":
          description: "BadRequest <br />\r

            \             1. If modelId is null or invalid. <br
            />\r

            \             2. If element Id is null or invalid.
            <br />"
        "404":
          description: "Not Found <br />\r

            \             Element Id does not exist in the model, or
            model was not found"
        "409":
          description: "Conflict <br />\r

            \             if item of different type already exists
            with message \"DIFFERENT_TYPE\"."
        "500":
          description: For any other errors
      deprecated: false
  "/api/models/{modelId}/cloudplatformgateway/{productId}/onlinestatus":
    get:
      tags:
        - Element
      summary: Gets the online status of a gateway
      description: "\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:GetCloudPlatformGatewayStatusV3

"
      operationId: Element_GetCloudPlatformGatewayStatusV3
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: productId
          in: path
          description: productId encoded as base64 string
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
        "400":
          description: Bad Request-Invalid parameters
        "403":
          description: Authorization Failure - No model access; No access to the systemguid
            for productId requested
        "500":
          description: InternalServerError
      deprecated: false
  "/api/models/{modelId}/cloudplatformgateway/{productId}/status":
    get:
      tags:
        - Element
      summary: Obsolete - Get CloudPlatformGateway Online Status. This method is marked
        as obsolete and will not be available after April 30th 2017. Please use
        GetCloudPlatformGatewayStatusV3 with proper permissions.
      description: ""
      operationId: Element_GetCloudPlatformGatewayStatus2
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: productId
          in: path
          description: productId encoded as base64 string
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
        "400":
          description: Bad Request-Invalid parameters
      deprecated: true
  "/api/models/{modelId}/cloudplatformgateway/batch/onlinestatus":
    post:
      tags:
        - Element
      summary: Gets the status of gateways given model id and a set of product ids
      description: "\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:GetCloudPlatformGatewayBatchStatusV2

"
      operationId: Element_GetCloudPlatformGatewayBatchStatusV2
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Element_GetCloudPlatformGatewayBatchStatu\
          sV2Productids"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
        "400":
          description: Bad Request-Invalid parameters
        "403":
          description: Authorization Failure - No model access; No access to one or more of
            the systemguids for productIds requested
        "500":
          description: InternalServerError
      deprecated: false
  "/api/models/{modelId}/cloudplatformgateway/batch/status":
    post:
      tags:
        - Element
      summary: Obsolete - Get CloudPlatformGateway Online Status. This method is marked
        as obsolete and will not be available after April 30th 2017. Please use
        GetCloudPlatformGatewayBatchStatusV2 with proper permissions.
      description: ""
      operationId: Element_GetCloudPlatformGatewayBatchStatus
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Element_GetCloudPlatformGatewayBatchStatu\
          sV2Productids"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiGatewayProductStatusResponse"
        "400":
          description: Bad Request-Invalid parameters
      deprecated: true
  "/api/models/{modelId}/elements/{elementId}/hasLocation":
    put:
      tags:
        - ElementOntology
      summary: Updates the HasLocation relationship of an element in the model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateHasLocationRelationship

"
      operationId: ElementOntology_UpdateHasLocationRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the element to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded element id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/json:
            schema:
              type: string
          application/xml:
            schema:
              type: string
          text/xml:
            schema:
              type: string
          application/x-www-form-urlencoded:
            schema:
              type: string
        description: Spatial element id that will become the new location of the element.
        required: true
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If spatialElementId is null or
            whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element does not exist. 
\r

            \            2. If location does not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/communicatesElectricallyWithElement":
    put:
      tags:
        - ElementOntology
      summary: Updates the CommunicatesElectricallyWithElement relationship of an
        element in the model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateCommunicatesElectricallyWithElementRelat\
        ionship

"
      operationId: ElementOntology_UpdateCommunicatesElectricallyWithElementRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the element to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded element id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
          text/json:
            schema:
              type: array
              items:
                type: string
          application/xml:
            schema:
              type: array
              items:
                type: string
          text/xml:
            schema:
              type: array
              items:
                type: string
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                type: string
        description: Collection of element ids that will replace the existing
          CommunicatesElectricallyWithElement collection of the element.
        required: true
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If coreElementIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element does not exist. 
\r

            \            2. If any of the related elements does not
            exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/suppliesElements":
    put:
      tags:
        - ElementOntology
      summary: Updates the SuppliesElements relationship of an element in the model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateSuppliesElementsRelationship

"
      operationId: ElementOntology_UpdateSuppliesElementsRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the element to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded element id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
          text/json:
            schema:
              type: array
              items:
                type: string
          application/xml:
            schema:
              type: array
              items:
                type: string
          text/xml:
            schema:
              type: array
              items:
                type: string
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                type: string
        description: Collection of element ids that will replace the existing
          SuppliesElements collection of the element.
        required: true
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If coreElementIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element does not exist. 
\r

            \            2. If any of the related elements does not
            exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/suppliesSpatialElements":
    put:
      tags:
        - ElementOntology
      summary: Updates the SuppliesSpatialElements relationship of an element in the
        model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateSuppliesSpatialElementsRelationship

"
      operationId: ElementOntology_UpdateSuppliesSpatialElementsRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the element to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded element id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
          text/json:
            schema:
              type: array
              items:
                type: string
          application/xml:
            schema:
              type: array
              items:
                type: string
          text/xml:
            schema:
              type: array
              items:
                type: string
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                type: string
        description: Collection of spatial element ids that will replace the existing
          SuppliesSpatialElements collection of the element.
        required: true
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If coreSpatialElementIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element does not exist. 
\r

            \            2. If any of the related spatial elements
            does not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/containsElements":
    put:
      tags:
        - ElementOntology
      summary: Updates the ContainsElements relationship of an element in the model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateContainsElementsRelationship

"
      operationId: ElementOntology_UpdateContainsElementsRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the element to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded element id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
          text/json:
            schema:
              type: array
              items:
                type: string
          application/xml:
            schema:
              type: array
              items:
                type: string
          text/xml:
            schema:
              type: array
              items:
                type: string
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                type: string
        description: Collection of element ids that will replace the existing
          ContainsElements collection of the element.
        required: true
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If coreElementIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element does not exist. 
\r

            \            2. If any of the related elements does not
            exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/label":
    put:
      tags:
        - ElementOntology
      summary: Updates the label of a property of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateLabel

"
      operationId: ElementOntology_UpdateLabel
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateLabelNewlabelvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/comment":
    put:
      tags:
        - ElementOntology
      summary: Updates the comment of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateComment

"
      operationId: ElementOntology_UpdateComment
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateCommentNewcommentva\
          lue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/properties/{propertyId}/label":
    put:
      tags:
        - ElementOntology
      summary: Updates the property label of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyLabel

"
      operationId: ElementOntology_UpdatePropertyLabel
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which label will be updated.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyLabelNewlab\
          elvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/properties/{propertyId}/comment":
    put:
      tags:
        - ElementOntology
      summary: Updates the property comment of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyComment

"
      operationId: ElementOntology_UpdatePropertyComment
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which comment will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyLabelNewlab\
          elvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/properties/{propertyId}/isdescribedbyunit":
    put:
      tags:
        - ElementOntology
      summary: Updates the property IsDescribedByUnit attribute of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyIsDescribedByUnit

"
      operationId: ElementOntology_UpdatePropertyIsDescribedByUnit
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which its IsDescribedByUnit attribute
            will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyIsDescribed\
          ByUnitNewisdescribedbyunitvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/literals":
    put:
      tags:
        - ElementOntology
      summary: Overwrites the custom literals collection of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateCustomLiterals

"
      operationId: ElementOntology_UpdateCustomLiterals
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCustomLiteralItemArray"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If customLiteralItems is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/properties/{propertyId}/literals":
    put:
      tags:
        - ElementOntology
      summary: Overwrites the custom literals collection of an element property
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyCustomLiterals

"
      operationId: ElementOntology_UpdatePropertyCustomLiterals
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which custom literals collection will be
            overwritten.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCustomLiteralItemArray2"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/properties/{propertyId}/role":
    put:
      tags:
        - ElementOntology
      summary: Updates the property role of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyRole

"
      operationId: ElementOntology_UpdatePropertyRole
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which the role will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCorePropertyRole"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/properties":
    post:
      tags:
        - ElementOntology
      summary: Adds a property to an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:AddProperty

"
      operationId: ElementOntology_AddProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be added.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCoreProperty"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: NotFound, if element is not found.
        "409":
          description: Conflict, if the property already exists in the ontology object.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/properties/{propertyId}":
    put:
      tags:
        - ElementOntology
      summary: Overwrites the full property of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateProperty

"
      operationId: ElementOntology_UpdateProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id that will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCoreProperty2"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace. 
\r

            \            4. If propertyId is different from the
            property object id provided in the request body."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
    delete:
      tags:
        - ElementOntology
      summary: Removes a property from an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:RemoveProperty

"
      operationId: ElementOntology_RemoveProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id that will be removed from the ontology
            object.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{elementId}/isrelatedto":
    put:
      tags:
        - ElementOntology
      summary: Updates the IsRelatedTo relationships of an ontology object in the model
        store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsRelatedToRelationship

"
      operationId: ElementOntology_UpdateIsRelatedToRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with IsRelatedTo
            objects to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateIsRelatedToRelation\
          shipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found.  
\r

            \            2. If at least one target object for the
            IsRelatedTo relationship is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{objectId}/hasClassficationTags":
    put:
      tags:
        - ElementOntology
      summary: Updates the data classification tags on an object
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateHasClassificationTags

"
      operationId: ElementOntology_UpdateHasClassificationTags
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the
            Classification tags that will be overwritten.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateHasClassificationTa\
          gsHasclassificationtags"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If hasClassificationTags is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{objectId}/properties/{propertyId}/hasClassficationTags":
    put:
      tags:
        - ElementOntology
      summary: Updates the data classification tags on a property
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyHasClassficationTags

"
      operationId: ElementOntology_UpdatePropertyHasClassficationTags
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id of which classification tags collection
            will be overwritten.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyHasClassfic\
          ationTagsHasclassificationtags"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
       \r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If propertyId is null or whitespace.\r

            \            3. If hasClassificationTags is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If object is not found. 
\r

            \            2. If property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/elements/{objectId}/hasstorageretentionpolicies":
    put:
      tags:
        - ElementOntology
      summary: Updates the storage retention policies on a gateway
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateHasStorageRetentionPolicies

"
      operationId: ElementOntology_UpdateHasStorageRetentionPolicies
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the object of which the storage
            retention policy will be overwritten.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded gateway id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiStorageRetentionPolicyArray"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If hasStorageRetentionPolicies is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "1. The objectId is not valid a base64Encoded string\r

            \            2. The ontology object was not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/systems/{systemGuid}/events/remove":
    post:
      tags:
        - EventStoreUpdate
      summary: Creates and initiates an operation to remove events of given event types
        from event store for the given system
      description: "Creates and initiates an operation to remove events of given event
        types in event store for a given system\r

        \            Use returned resource URL to check progress on
        remove operation.\r

        
Authorization:SystemPermissionBySystemType-ManageEven\
        ts

\r

        
Action:CreateRemoveEventsRequest

"
      operationId: EventStoreUpdate_CreateRemoveEventsRequest
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiEventStoreRemoveEventsRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiEventStoreRemoveEventsRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiEventStoreRemoveEventsRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiEventStoreRemoveEventsRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiEventStoreRemoveEventsRequest"
        required: true
      responses:
        "201":
          description: Created - Remove operation request is created, resource URI to query
            operation status is created and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiEventStoreRemoveEventsResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiEventStoreRemoveEventsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiEventStoreRemoveEventsResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiEventStoreRemoveEventsResponse"
        "400":
          description: BadRequest - Start time/End time is invalid (or) StartTime is
            greater than EndTime
        "401":
          description: Unauthorized
        "500":
          description: InternalServerError
      deprecated: false
  "/api/systems/{systemGuid}/events/modify":
    post:
      tags:
        - EventStoreUpdate
      summary: Creates and initiates an operation to modify events of the given event
        type in the event store for a given system
      description: "Creates and initiates an operation to modify events of the given event
        type in the event store for a given system\r

        \            Use the returned resource URL to check progress on
        the modify operation.\r

        \            NOTE: \r

        \            1. No validation, verification and parsing will be
        performed on the Body value passed in
        WebApiEventStoreModifyEventsRequest . The new value will be written
        as-is.\r

        \            2. If the BodyProperty array contains properties
        that doesn't exist already, those properties will be ignored. For keys
        that already exist, their corresponding values will be overwritten.\r

        
Authorization:SystemPermissionBySystemType-ManageEven\
        ts

\r

        
Action:CreateModifyEventsRequest

"
      operationId: EventStoreUpdate_CreateModifyEventsRequest
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiEventStoreModifyEventsRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiEventStoreModifyEventsRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiEventStoreModifyEventsRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiEventStoreModifyEventsRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiEventStoreModifyEventsRequest"
        required: true
      responses:
        "201":
          description: Created - A resource to track the modification operation is created
            and returned. It contains the resource URI to query operation status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiEventStoreModifyEventsResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiEventStoreModifyEventsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiEventStoreModifyEventsResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiEventStoreModifyEventsResponse"
        "400":
          description: "BadRequest - This is thrown for any of the following conditions\r

            \            1. Both Body and BodyProperties are null.
            This API requires that atleast one of them is passed\r

            \            2. Event type is empty (or) start time/end
            time is invalid (or) start time is greater than end time\r

            \            3. BodyProperties has any platform reserved
            keys like 'SystemGuid', 'SystemType' or 'TenantId' (the check for
            these keys is done in a case-insensitive manner)\r

            \            4. Body is NOT of type TextualBody or the
            format is NOT 'application/json' or 'application/text'"
        "401":
          description: Unauthorized
        "500":
          description: InternalServerError
      deprecated: false
  "/api/models/{modelId}/properties":
    post:
      tags:
        - ModelProperties
      summary: Adds a property to a model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:AddProperty

"
      operationId: ModelProperties_AddProperty
      parameters:
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreProperty"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreProperty"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreProperty"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreProperty"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCoreProperty"
        description: Property details
        required: true
      responses:
        "200":
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreProperty"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreProperty"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreProperty"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreProperty"
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If property Id is null or invalid.
            <br />\r

            \            3. If property information is not provided.
            <br />\r

            \            4. If feature is disabled."
        "409":
          description: Property ID is already in use.
        "500":
          description: For any other errors
      deprecated: false
  "/api/models/{modelId}/properties/{encodedPropertyId}":
    delete:
      tags:
        - ModelProperties
      summary: Removes a property from a model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:RemoveProperty

"
      operationId: ModelProperties_RemoveProperty
      parameters:
        - name: modelId
          in: path
          description: Model ID
          required: true
          schema:
            type: string
        - name: encodedPropertyId
          in: path
          description: Base64 encoded property ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successfully removed
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If property Id is null or invalid.
            <br />\r

            \            3. If feature is disabled."
        "404":
          description: "NotFound <br />\r

            \            Model or property was not found."
        "500":
          description: For any other errors
      deprecated: false
  "/api/models/{modelId}/properties/batch/history/last":
    post:
      tags:
        - ModelProperties
      summary: Queries the last history values for a list of properties
      description: "PREVIEW - Retrieves the last value the cloud has received for a given
        list of properties. If there are no history values for a particular
        property, then that property value will not be returned.\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:GetLastHistoryValueByProperties

"
      operationId: ModelProperties_GetLastHistoryValueByProperties
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiModelProperties"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiModelProperties"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiModelProperties"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiModelProperties"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiModelProperties"
        description: Including an array of property Ids
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LastPropertyHistoryValue"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LastPropertyHistoryValue"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LastPropertyHistoryValue"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LastPropertyHistoryValue"
        "204":
          description: No Content - the request was valid, but there were no values to
            return
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LastPropertyHistoryValue"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LastPropertyHistoryValue"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LastPropertyHistoryValue"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LastPropertyHistoryValue"
        "400":
          description: "BadRequest when <br />\r

            \            1. If modelId is null, empty or whitespace.
            <br />\r

            \            2. If properties is null. <br />\r

            \            3. If propertyIds property of properties is
            null or empty. <br />\r

            \            4. If propertyIds contains more than 1000
            entries"
        "403":
          description: Authorization Failure - No model access; No access to one or more of
            the systemguids for properties requested
        "500":
          description: For other errors
      deprecated: false
  "/api/models/{modelId}/elements/queries":
    post:
      tags:
        - ModelQuery
      summary: Queries a model for elements
      description: "\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:QueryElements

"
      operationId: ModelQuery_QueryElements
      parameters:
        - name: modelId
          in: path
          description: The id of the model to query.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreElementQuery"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreElementQuery"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreElementQuery"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreElementQuery"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCoreElementQuery"
        description: The query to perform
        required: true
      responses:
        "200":
          description: OK, if the model query was successfully executed (even if the result
            is empty).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreElement"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreElement"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreElement"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreElement"
        "400":
          description: "Bad request <br />\r

            \                1. If modelId is null or whitespace.
            <br />\r

            \                2. If the query is invalid.\r

            \                3. If the same alias is used for
            different object types"
        "401":
          description: The caller does not have permissions to perform the ReadModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ReadModel
            activity on the model or its type.
        "500":
          description: Unexpected error
      deprecated: false
  "/api/models/{modelId}/spatialelements/queries":
    post:
      tags:
        - ModelQuery
      summary: Queries a model for spatial elements
      description: "\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:QuerySpatialElements

"
      operationId: ModelQuery_QuerySpatialElements
      parameters:
        - name: modelId
          in: path
          description: The id of the model to query.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElementQuery"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElementQuery"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElementQuery"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElementQuery"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElementQuery"
        description: The query to perform
        required: true
      responses:
        "200":
          description: OK, if the model query was successfully executed (even if the result
            is empty).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
        "400":
          description: "Bad request <br />\r

            \                1. If modelId is null or whitespace.
            <br />\r

            \                2. If the query is invalid.\r

            \                3. If the same alias is used for
            different object types"
        "401":
          description: The caller does not have permissions to perform the ReadModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ReadModel
            activity on the model or its type.
        "500":
          description: Unexpected error
      deprecated: false
  "/api/models/{modelId}/persons/queries":
    post:
      tags:
        - ModelQuery
      summary: Queries a model for persons
      description: "\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:QueryPerson

"
      operationId: ModelQuery_QueryPerson
      parameters:
        - name: modelId
          in: path
          description: The id of the model to query.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCorePersonQuery"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCorePersonQuery"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCorePersonQuery"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCorePersonQuery"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCorePersonQuery"
        description: The query to perform
        required: true
      responses:
        "200":
          description: OK, if the model query was successfully executed (even if the result
            is empty).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCorePerson"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCorePerson"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCorePerson"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCorePerson"
        "400":
          description: "Bad request <br />\r

            \                1. If modelId is null or whitespace.
            <br />\r

            \                2. If the query is invalid.\r

            \                3. If the same alias is used for
            different object types"
        "401":
          description: The caller does not have permissions to perform the ReadModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ReadModel
            activity on the model or its type.
        "500":
          description: Unexpected error
      deprecated: false
  "/api/models/{modelId}/organizations/queries":
    post:
      tags:
        - ModelQuery
      summary: Queries a model for organizations
      description: "PREVIEW\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:QueryOrganization

"
      operationId: ModelQuery_QueryOrganization
      parameters:
        - name: modelId
          in: path
          description: The id of the model to query.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreOrganizationQuery"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreOrganizationQuery"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreOrganizationQuery"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreOrganizationQuery"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCoreOrganizationQuery"
        description: The query to perform
        required: true
      responses:
        "200":
          description: OK, if the model query was successfully executed (even if the result
            is empty).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreOrganization"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreOrganization"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreOrganization"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreOrganization"
        "400":
          description: "Bad request <br />\r

            \                1. If modelId is null or whitespace.
            <br />\r

            \                2. If the query is invalid.\r

            \                3. If the same alias is used for
            different object types"
        "401":
          description: The caller does not have permissions to perform the ReadModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ReadModel
            activity on the model or its type.
        "500":
          description: Unexpected error
      deprecated: false
  "/api/models/{modelId}/queries":
    post:
      tags:
        - ModelQuery
      summary: Queries a model starting from a particular object and returns all the
        indicated objects for each result
      description: "The result will contain one Model Query Result per match, where a Model
        Query Result will contain one dictionary (alias, object)\r

        \                for each supported type (Element, Spatial
        Element, Organization, Person). The dictionary for each type maps each
        of the specified \r

        \                aliases to the object of that type matching the
        alias in the result.\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:QueryModel

"
      operationId: ModelQuery_QueryModel
      parameters:
        - name: modelId
          in: path
          description: The id of the model to query.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreObjectQuery"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreObjectQuery"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreObjectQuery"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreObjectQuery"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCoreObjectQuery"
        description: The query to perform.
        required: true
      responses:
        "200":
          description: OK, if the model query was successfully executed (even if the result
            is empty).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiModelQueryResult"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiModelQueryResult"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiModelQueryResult"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiModelQueryResult"
        "400":
          description: "Bad request <br />\r

            \                1. If modelId is null or whitespace.
            <br />\r

            \                2. If the query is invalid.\r

            \                3. If the same alias is used for
            different object types\r

            \                4. If there are aliases null or empty\r

            \                5. If there query contains unsupported
            object types\r

            \                6. If there are repeated aliases\r

            \                7. If there is more than just one
            object match criteria specified within the query"
        "401":
          description: The caller does not have permissions to perform the ReadModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ReadModel
            activity on the model or its type.
        "500":
          description: Unexpected error
      deprecated: false
  /api/models:
    get:
      tags:
        - ModelRegistry
      summary: Gets all models
      description: "\r

        
Authorization:GlobalActivity-ListModels

\r

        
Action:GetModels

"
      operationId: ModelRegistry_GetModels
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiModelDetail"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiModelDetail"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiModelDetail"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiModelDetail"
      deprecated: false
    post:
      tags:
        - ModelRegistry
      summary: Creates a model
      description: "\r

        
Authorization:GlobalActivity-RegisterModel

\r

        
Action:AddModel

"
      operationId: ModelRegistry_AddModel
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/json:
            schema:
              type: string
          application/xml:
            schema:
              type: string
          text/xml:
            schema:
              type: string
          application/x-www-form-urlencoded:
            schema:
              type: string
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
            application/xml:
              schema:
                type: boolean
            text/xml:
              schema:
                type: boolean
        "400":
          description: "BAD_REQUEST when <br />\r

            \            1. modelId is null or empty\r

            \            2. modelId contains plus(+)\r

            \            3. modelId ends with dot(.)"
        "409":
          description: "CONFLICT when <br />\r

            \            1. item of same type already exists with
            message \"SAME_TYPE\""
        "500":
          description: Other errors
      deprecated: false
  /api/models/v2:
    post:
      tags:
        - ModelRegistry
      summary: Creates a new model with a model type
      description: "\r

        
Authorization:ModelRegistryAdd-RegisterModel

\r

        
Action:AddModel2

"
      operationId: ModelRegistry_AddModel2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAddModelRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAddModelRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAddModelRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAddModelRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAddModelRequest"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
            application/xml:
              schema:
                type: boolean
            text/xml:
              schema:
                type: boolean
        "400":
          description: "BAD_REQUEST when <br />\r

            \            1. ModelId is null or empty\r

            \            2. ModelTypeId is null or empty\r

            \            3. modelId contains plus(+)\r

            \            4. modelId ends with dot(.)\r

            \            5. modelId with more than 50 characters"
        "403":
          description: "Forbidden. Required activity: RegisterModel."
        "404":
          description: NotFound. Model type does not exist.
        "409":
          description: "CONFLICT when <br />\r

            \            1. item of same type already exists with
            message \"SAME_TYPE\""
        "500":
          description: Other errors
      deprecated: false
  /api/models/v3:
    post:
      tags:
        - ModelRegistry
      summary: Creates a new model with a model type and grants the caller read and
        modify permissions
      description: "Creates a new model with the supplied model type and grants the calling
        identity permission to read and modify the model.\r

        \            This simplifies scenarios where the creating
        application or user will be changing the model.\r

        
Authorization:ModelRegistryAdd-RegisterModel

\r

        
Action:AddModel3

"
      operationId: ModelRegistry_AddModel3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiAddModelRequestV3"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiAddModelRequestV3"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiAddModelRequestV3"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiAddModelRequestV3"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiAddModelRequestV3"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
            application/xml:
              schema:
                type: boolean
            text/xml:
              schema:
                type: boolean
        "400":
          description: "Bad Request when <br />\r

            \            1. ModelId is null or empty\r

            \            2. ModelTypeId is null or empty\r

            \            3. modelId contains plus(+)\r

            \            4. modelId ends with dot(.) \r

            \            5. Model type does not exist"
        "403":
          description: "Forbidden. Required activity: RegisterModel."
        "409":
          description: "Conflict when <br />\r

            \            1. item of same type already exists with
            message \"SAME_TYPE\""
        "500":
          description: Other errors
      deprecated: false
  "/api/models/{modelId}":
    delete:
      tags:
        - ModelRegistry
      summary: Deletes a model along with its contents and permissions around this model
      description: "Deletes the given model along with all its entities. The permissions
        set for this model will also be deleted making it inaccessible using
        either ModelType or Model permissions.\r

        
Authorization:ModelPermissionByModelType-DeleteModel<\
        /p>\r

        

Action:DeleteModel

"
      operationId: ModelRegistry_DeleteModel
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "204":
          description: NoContent, if successful
        "400":
          description: "BAD_REQUEST when <br />\r

            \            1. modelId contains plus(+)\r

            \            2. modelId ends with dot(.)\r

            \            3. modelId with more than 50 characters"
        "403":
          description: The caller does not have permissions to perform the DeleteModel
            activity on the model or its type.
        "404":
          description: Model with given Id does not exist.
        "409":
          description: "Conflict when one or more systems are mapped to the model\r

            \            Invoke ResetSystemToModelMap API to unlink
            the model"
        "500":
          description: Other errors
      deprecated: false
  "/api/models/{modelId}/organizations":
    post:
      tags:
        - Organization
      summary: Adds an organization to a model
      description: "Given a modelId and Organization details, this will add the
        Organization details into the model.\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:AddOrganization

"
      operationId: Organization_AddOrganization
      parameters:
        - name: modelId
          in: path
          description: Id of the model in which the Organization to be added
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreOrganization"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreOrganization"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreOrganization"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreOrganization"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCoreOrganization"
        description: Details of the organization
        required: true
      responses:
        "201":
          description: Created, if successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreOrganization"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreOrganization"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreOrganization"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreOrganization"
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If organization Id is null or invalid.\r

            \            3. Some related core object does not exist"
        "409":
          description: Conflict, if the organization already exists.
        "500":
          description: For any other errors
      deprecated: false
  "/api/models/{modelId}/organizations/{encodedOrganizationId}":
    get:
      tags:
        - Organization
      summary: Gets an organization
      description: "Given a modelId and Organization id, api will retrieve the Organization
        details.\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:RetrieveOrganization

"
      operationId: Organization_RetrieveOrganization
      parameters:
        - name: modelId
          in: path
          description: Id of the model which contains the Organization to be retrieved
          required: true
          schema:
            type: string
        - name: encodedOrganizationId
          in: path
          description: Base64 encoded id of the organization
          required: true
          schema:
            type: string
        - name: basicinfo
          in: query
          description: Retrieve basic details like id and types
          required: false
          schema:
            type: boolean
        - name: includepropertybasics
          in: query
          description: Retrieve Property basic details. Set this and other property items
            to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertybindings
          in: query
          description: Retrieve Property Bindings. Set this and other property items to
            false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertyroles
          in: query
          description: Retrieve Property Roles. Set this and other property items to false
            to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includerelationships
          in: query
          description: Retrieve Relationships to other Objects. Set this and other property
            items to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: alldetails
          in: query
          description: Return all details for the object, a shortcut for setting all
            previous items to true
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Ok, if found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreOrganization"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreOrganization"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreOrganization"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreOrganization"
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If organization Id is null or invalid."
        "404":
          description: Organization does not exist in that specific model, or model was not
            found.
        "500":
          description: For any other errors
      deprecated: false
    delete:
      tags:
        - Organization
      summary: Removes an Organization
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:RemoveOrganization

"
      operationId: Organization_RemoveOrganization
      parameters:
        - name: modelId
          in: path
          description: Id of the model which contains the Organization to be deleted.
          required: true
          schema:
            type: string
        - name: encodedOrganizationId
          in: path
          description: Base64 encoded id of the organization.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: NoContent, if successful
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If organization Id is null or invalid."
        "401":
          description: The caller has not been granted permission to modify the model
        "403":
          description: The request must be HTTPs
        "404":
          description: The organization was not found in that specific model, or model was
            not found
        "500":
          description: An unexpected error has occurred
      deprecated: false
  "/api/models/{modelId}/organizations/{organizationId}/relatedspatialelements":
    get:
      tags:
        - Organization
      summary: Returns spatial elements related to an organization
      description: "Given a modelId and organization id, this will retrieve the all
        sites.\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:GetRelatedSpatialElementsOfOrganization

"
      operationId: Organization_GetRelatedSpatialElementsOfOrganization
      parameters:
        - name: modelId
          in: path
          description: Id of the model in which the Organization is present
          required: true
          schema:
            type: string
        - name: organizationId
          in: path
          description: Base64 encoded Id of the Organization
          required: true
          schema:
            type: string
        - name: relatedSpatialElementType
          in: query
          description: Type of the spatialElements to be retrieved. Send null for
            retrieving all.
          required: false
          schema:
            type: string
        - name: basicinfo
          in: query
          description: Retrieve basic details like id and types
          required: false
          schema:
            type: boolean
        - name: includepropertybasics
          in: query
          description: Retrieve Property basic details. Set this and other property items
            to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertybindings
          in: query
          description: Retrieve Property Bindings. Set this and other property items to
            false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertyroles
          in: query
          description: Retrieve Property Roles. Set this and other property items to false
            to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includerelationships
          in: query
          description: Retrieve Relationships to other Objects. Set this and other property
            items to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: alldetails
          in: query
          description: Return all details for the object, a shortcut for setting all
            previous items to true
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Retrieved, if successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If organization Id is null or invalid."
        "404":
          description: Not found, if organization does not exist
        "500":
          description: For any other errors
      deprecated: false
  "/api/models/{modelId}/organizations/{organizationId}":
    patch:
      tags:
        - Organization
      summary: Updates an Organization (currently limited to Label and CustomLiterals)
      description: "This method updates an Organization\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateOrganization

"
      operationId: Organization_UpdateOrganization
      parameters:
        - name: modelId
          in: path
          description: Id of the model which contains the Organization to be updated.
          required: true
          schema:
            type: string
        - name: organizationId
          in: path
          description: Base64 encoded id of the organization.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiResourceUpdateDetails"
          text/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiResourceUpdateDetails"
          application/xml:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiResourceUpdateDetails"
          text/xml:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiResourceUpdateDetails"
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiResourceUpdateDetails"
        description: Updates to be applied on the organization.
        required: true
      responses:
        "204":
          description: No content, if operation is successful.
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If organization Id is null or invalid.
            <br />\r

            \            3. If updateDetails are ill-formed."
        "404":
          description: Organization does not exist
        "422":
          description: Unprocessable Entity, if specified property is absent in the
            organization.
        "500":
          description: For any other errors
      deprecated: false
  "/api/models/{modelId}/organizations/{actorId}/isHvacTechnicianFor":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the IsHvacTechnicianFor relationship of an actor in the model
        store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsHvacTechnicianForRelationship

"
      operationId: OrganizationOntology_UpdateIsHvacTechnicianForRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the actor to be updated.
          required: true
          schema:
            type: string
        - name: actorId
          in: path
          description: Base64 encoded actor id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OrganizationOntology_UpdateIsHvacTechnici\
          anForRelationshipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If actorId is null or whitespace. 
\r

            \            3. If coreObjectIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If actor does not exist. 
\r

            \            2. If any of the related core objects does
            not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{actorId}/isInstaller":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the IsInstaller relationship of an actor in the model store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsInstallerRelationship

"
      operationId: OrganizationOntology_UpdateIsInstallerRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the actor to be updated.
          required: true
          schema:
            type: string
        - name: actorId
          in: path
          description: Base64 encoded actor id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OrganizationOntology_UpdateIsInstallerRel\
          ationshipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If actorId is null or whitespace. 
\r

            \            3. If coreObjectIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If actor does not exist. 
\r

            \            2. If any of the related core objects does
            not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{actorId}/isOwnerOf":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the IsOwnerOf relationship of an actor in the model store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsOwnerOfRelationship

"
      operationId: OrganizationOntology_UpdateIsOwnerOfRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the actor to be updated.
          required: true
          schema:
            type: string
        - name: actorId
          in: path
          description: Base64 encoded actor id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OrganizationOntology_UpdateIsOwnerOfRelat\
          ionshipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If actorId is null or whitespace. 
\r

            \            3. If coreObjectIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If actor does not exist. 
\r

            \            2. If any of the related coreobject does
            not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{actorId}/isTechnicianFor":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the IsTechnicianFor relationship of an actor in the model store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsTechnicianForRelationship

"
      operationId: OrganizationOntology_UpdateIsTechnicianForRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the actor to be updated.
          required: true
          schema:
            type: string
        - name: actorId
          in: path
          description: Base64 encoded actor id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OrganizationOntology_UpdateIsTechnicianFo\
          rRelationshipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If actorId is null or whitespace. 
\r

            \            3. If coreObjectIds is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If actor does not exist. 
\r

            \            2. If any of the related core objects does
            not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{elementId}/label":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the label of a property of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateLabel

"
      operationId: OrganizationOntology_UpdateLabel
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateLabelNewlabelvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{elementId}/comment":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the comment of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateComment

"
      operationId: OrganizationOntology_UpdateComment
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateCommentNewcommentva\
          lue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{elementId}/properties/{propertyId}/label":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the property label of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyLabel

"
      operationId: OrganizationOntology_UpdatePropertyLabel
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which label will be updated.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyLabelNewlab\
          elvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{elementId}/properties/{propertyId}/comment":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the property comment of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyComment

"
      operationId: OrganizationOntology_UpdatePropertyComment
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which comment will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyLabelNewlab\
          elvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{elementId}/properties/{propertyId}/isdescribedbyunit":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the property IsDescribedByUnit attribute of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyIsDescribedByUnit

"
      operationId: OrganizationOntology_UpdatePropertyIsDescribedByUnit
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which its IsDescribedByUnit attribute
            will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyIsDescribed\
          ByUnitNewisdescribedbyunitvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{elementId}/literals":
    put:
      tags:
        - OrganizationOntology
      summary: Overwrites the custom literals collection of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateCustomLiterals

"
      operationId: OrganizationOntology_UpdateCustomLiterals
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCustomLiteralItemArray"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If customLiteralItems is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{elementId}/properties/{propertyId}/literals":
    put:
      tags:
        - OrganizationOntology
      summary: Overwrites the custom literals collection of an element property
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyCustomLiterals

"
      operationId: OrganizationOntology_UpdatePropertyCustomLiterals
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which custom literals collection will be
            overwritten.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCustomLiteralItemArray2"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{elementId}/properties/{propertyId}/role":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the property role of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyRole

"
      operationId: OrganizationOntology_UpdatePropertyRole
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which the role will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCorePropertyRole"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{elementId}/properties":
    post:
      tags:
        - OrganizationOntology
      summary: Adds a property to an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:AddProperty

"
      operationId: OrganizationOntology_AddProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be added.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCoreProperty"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: NotFound, if element is not found.
        "409":
          description: Conflict, if the property already exists in the ontology object.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{elementId}/properties/{propertyId}":
    put:
      tags:
        - OrganizationOntology
      summary: Overwrites the full property of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateProperty

"
      operationId: OrganizationOntology_UpdateProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id that will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCoreProperty2"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace. 
\r

            \            4. If propertyId is different from the
            property object id provided in the request body."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
    delete:
      tags:
        - OrganizationOntology
      summary: Removes a property from an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:RemoveProperty

"
      operationId: OrganizationOntology_RemoveProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id that will be removed from the ontology
            object.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{elementId}/isrelatedto":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the IsRelatedTo relationships of an ontology object in the model
        store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsRelatedToRelationship

"
      operationId: OrganizationOntology_UpdateIsRelatedToRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with IsRelatedTo
            objects to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateIsRelatedToRelation\
          shipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found.  
\r

            \            2. If at least one target object for the
            IsRelatedTo relationship is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{objectId}/hasClassficationTags":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the data classification tags on an object
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateHasClassificationTags

"
      operationId: OrganizationOntology_UpdateHasClassificationTags
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the
            Classification tags that will be overwritten.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateHasClassificationTa\
          gsHasclassificationtags"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If hasClassificationTags is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{objectId}/properties/{propertyId}/hasClassficationTags":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the data classification tags on a property
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyHasClassficationTags

"
      operationId: OrganizationOntology_UpdatePropertyHasClassficationTags
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id of which classification tags collection
            will be overwritten.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyHasClassfic\
          ationTagsHasclassificationtags"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
       \r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If propertyId is null or whitespace.\r

            \            3. If hasClassificationTags is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If object is not found. 
\r

            \            2. If property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/organizations/{objectId}/hasstorageretentionpolicies":
    put:
      tags:
        - OrganizationOntology
      summary: Updates the storage retention policies on a gateway
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateHasStorageRetentionPolicies

"
      operationId: OrganizationOntology_UpdateHasStorageRetentionPolicies
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the object of which the storage
            retention policy will be overwritten.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded gateway id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiStorageRetentionPolicyArray"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If hasStorageRetentionPolicies is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "1. The objectId is not valid a base64Encoded string\r

            \            2. The ontology object was not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons":
    post:
      tags:
        - Person
      summary: Adds a person
      description: "Given a modelId and person details, this will add the Person into the
        model.\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:AddPerson

"
      operationId: Person_AddPerson
      parameters:
        - name: modelId
          in: path
          description: Id of the model in which the Person to be added
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCorePerson"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCorePerson"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCorePerson"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCorePerson"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCorePerson"
        description: Details of the Person
        required: true
      responses:
        "201":
          description: Created, if successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCorePerson"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCorePerson"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCorePerson"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCorePerson"
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If person is null or invalid.\r

            \            3. Some related core object does not exist"
        "409":
          description: Conflict, if the person already exists.
        "500":
          description: For any other errors
      deprecated: false
  "/api/models/{modelId}/persons/{encodedPersonId}":
    get:
      tags:
        - Person
      summary: Gets person details
      description: "Given a modelId and person id, this will retrieve the person details.\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:RetrievePerson

"
      operationId: Person_RetrievePerson
      parameters:
        - name: modelId
          in: path
          description: Id of the model in which the Person to be retrieved
          required: true
          schema:
            type: string
        - name: encodedPersonId
          in: path
          description: Base64 encoded Id of the Person
          required: true
          schema:
            type: string
        - name: basicinfo
          in: query
          description: Retrieve basic details like id and types
          required: false
          schema:
            type: boolean
        - name: includepropertybasics
          in: query
          description: Retrieve Property basic details. Set this and other property items
            to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertybindings
          in: query
          description: Retrieve Property Bindings. Set this and other property items to
            false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertyroles
          in: query
          description: Retrieve Property Roles. Set this and other property items to false
            to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includerelationships
          in: query
          description: Retrieve Relationships to other Objects. Set this and other property
            items to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: alldetails
          in: query
          description: Return all details for the object, a shortcut for setting all
            previous items to true
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Retrieved, if successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCorePerson"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCorePerson"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCorePerson"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCorePerson"
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If person Id is null or invalid."
        "404":
          description: Not found, if person does not exist in that specific model, or model
            was not found
        "500":
          description: For any other errors
      deprecated: false
    delete:
      tags:
        - Person
      summary: Removes a person
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:RemovePerson

"
      operationId: Person_RemovePerson
      parameters:
        - name: modelId
          in: path
          description: Id of the model in which the Person to be deleted
          required: true
          schema:
            type: string
        - name: encodedPersonId
          in: path
          description: Base64 encoded Id of the Person
          required: true
          schema:
            type: string
      responses:
        "204":
          description: NoContent, if successful
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If person Id is null or invalid."
        "401":
          description: The caller has not been granted permission to modify the model
        "403":
          description: The request must be HTTPs
        "404":
          description: The person was not found in that specific model, or model was not
            found
        "500":
          description: An unexpected error has occurred
      deprecated: false
  "/api/models/{modelId}/persons/{personId}/isEngagedIn":
    put:
      tags:
        - PersonOntology
      summary: Updates the IsEngagedIn relationship of a person in the model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsEngagedInRelationship

"
      operationId: PersonOntology_UpdateIsEngagedInRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the element to be updated.
          required: true
          schema:
            type: string
        - name: personId
          in: path
          description: Base64 encoded person id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
          text/json:
            schema:
              type: array
              items:
                type: string
          application/xml:
            schema:
              type: array
              items:
                type: string
          text/xml:
            schema:
              type: array
              items:
                type: string
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                type: string
        description: Collection of organization ids that will replace the existing
          IsEngagedIn collection of the organization.
        required: true
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If personId is null or whitespace. 
\r

            \            3. If coreOrganizationIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If person does not exist. 
\r

            \            2. If any of the related organizations does
            not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{personId}/isOwnerOfOrganization":
    put:
      tags:
        - PersonOntology
      summary: Updates the IsOwnerOfOrganization relationship of a person in the model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsOwnerOfOrganizationRelationship

"
      operationId: PersonOntology_UpdateIsOwnerOfOrganizationRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the element to be updated.
          required: true
          schema:
            type: string
        - name: personId
          in: path
          description: Base64 encoded person id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
          text/json:
            schema:
              type: array
              items:
                type: string
          application/xml:
            schema:
              type: array
              items:
                type: string
          text/xml:
            schema:
              type: array
              items:
                type: string
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                type: string
        description: Collection of organization ids that will replace the existing
          IsOwnerOfOrganization collection of the organization.
        required: true
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If personId is null or whitespace. 
\r

            \            3. If coreOrganizationIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If person does not exist. 
\r

            \            2. If any of the related organizations does
            not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{actorId}/isHvacTechnicianFor":
    put:
      tags:
        - PersonOntology
      summary: Updates the IsHvacTechnicianFor relationship of an actor in the model
        store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsHvacTechnicianForRelationship

"
      operationId: PersonOntology_UpdateIsHvacTechnicianForRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the actor to be updated.
          required: true
          schema:
            type: string
        - name: actorId
          in: path
          description: Base64 encoded actor id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OrganizationOntology_UpdateIsHvacTechnici\
          anForRelationshipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If actorId is null or whitespace. 
\r

            \            3. If coreObjectIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If actor does not exist. 
\r

            \            2. If any of the related core objects does
            not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{actorId}/isInstaller":
    put:
      tags:
        - PersonOntology
      summary: Updates the IsInstaller relationship of an actor in the model store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsInstallerRelationship

"
      operationId: PersonOntology_UpdateIsInstallerRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the actor to be updated.
          required: true
          schema:
            type: string
        - name: actorId
          in: path
          description: Base64 encoded actor id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OrganizationOntology_UpdateIsInstallerRel\
          ationshipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If actorId is null or whitespace. 
\r

            \            3. If coreObjectIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If actor does not exist. 
\r

            \            2. If any of the related core objects does
            not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{actorId}/isOwnerOf":
    put:
      tags:
        - PersonOntology
      summary: Updates the IsOwnerOf relationship of an actor in the model store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsOwnerOfRelationship

"
      operationId: PersonOntology_UpdateIsOwnerOfRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the actor to be updated.
          required: true
          schema:
            type: string
        - name: actorId
          in: path
          description: Base64 encoded actor id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OrganizationOntology_UpdateIsOwnerOfRelat\
          ionshipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If actorId is null or whitespace. 
\r

            \            3. If coreObjectIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If actor does not exist. 
\r

            \            2. If any of the related coreobject does
            not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{actorId}/isTechnicianFor":
    put:
      tags:
        - PersonOntology
      summary: Updates the IsTechnicianFor relationship of an actor in the model store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsTechnicianForRelationship

"
      operationId: PersonOntology_UpdateIsTechnicianForRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the actor to be updated.
          required: true
          schema:
            type: string
        - name: actorId
          in: path
          description: Base64 encoded actor id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/OrganizationOntology_UpdateIsTechnicianFo\
          rRelationshipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If actorId is null or whitespace. 
\r

            \            3. If coreObjectIds is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If actor does not exist. 
\r

            \            2. If any of the related core objects does
            not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{elementId}/label":
    put:
      tags:
        - PersonOntology
      summary: Updates the label of a property of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateLabel

"
      operationId: PersonOntology_UpdateLabel
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateLabelNewlabelvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{elementId}/comment":
    put:
      tags:
        - PersonOntology
      summary: Updates the comment of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateComment

"
      operationId: PersonOntology_UpdateComment
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateCommentNewcommentva\
          lue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{elementId}/properties/{propertyId}/label":
    put:
      tags:
        - PersonOntology
      summary: Updates the property label of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyLabel

"
      operationId: PersonOntology_UpdatePropertyLabel
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which label will be updated.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyLabelNewlab\
          elvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{elementId}/properties/{propertyId}/comment":
    put:
      tags:
        - PersonOntology
      summary: Updates the property comment of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyComment

"
      operationId: PersonOntology_UpdatePropertyComment
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which comment will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyLabelNewlab\
          elvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{elementId}/properties/{propertyId}/isdescribedbyunit":
    put:
      tags:
        - PersonOntology
      summary: Updates the property IsDescribedByUnit attribute of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyIsDescribedByUnit

"
      operationId: PersonOntology_UpdatePropertyIsDescribedByUnit
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which its IsDescribedByUnit attribute
            will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyIsDescribed\
          ByUnitNewisdescribedbyunitvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{elementId}/literals":
    put:
      tags:
        - PersonOntology
      summary: Overwrites the custom literals collection of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateCustomLiterals

"
      operationId: PersonOntology_UpdateCustomLiterals
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCustomLiteralItemArray"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If customLiteralItems is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{elementId}/properties/{propertyId}/literals":
    put:
      tags:
        - PersonOntology
      summary: Overwrites the custom literals collection of an element property
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyCustomLiterals

"
      operationId: PersonOntology_UpdatePropertyCustomLiterals
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which custom literals collection will be
            overwritten.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCustomLiteralItemArray2"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{elementId}/properties/{propertyId}/role":
    put:
      tags:
        - PersonOntology
      summary: Updates the property role of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyRole

"
      operationId: PersonOntology_UpdatePropertyRole
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which the role will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCorePropertyRole"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{elementId}/properties":
    post:
      tags:
        - PersonOntology
      summary: Adds a property to an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:AddProperty

"
      operationId: PersonOntology_AddProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be added.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCoreProperty"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: NotFound, if element is not found.
        "409":
          description: Conflict, if the property already exists in the ontology object.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{elementId}/properties/{propertyId}":
    put:
      tags:
        - PersonOntology
      summary: Overwrites the full property of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateProperty

"
      operationId: PersonOntology_UpdateProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id that will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCoreProperty2"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace. 
\r

            \            4. If propertyId is different from the
            property object id provided in the request body."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
    delete:
      tags:
        - PersonOntology
      summary: Removes a property from an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:RemoveProperty

"
      operationId: PersonOntology_RemoveProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id that will be removed from the ontology
            object.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{elementId}/isrelatedto":
    put:
      tags:
        - PersonOntology
      summary: Updates the IsRelatedTo relationships of an ontology object in the model
        store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsRelatedToRelationship

"
      operationId: PersonOntology_UpdateIsRelatedToRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with IsRelatedTo
            objects to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateIsRelatedToRelation\
          shipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found.  
\r

            \            2. If at least one target object for the
            IsRelatedTo relationship is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{objectId}/hasClassficationTags":
    put:
      tags:
        - PersonOntology
      summary: Updates the data classification tags on an object
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateHasClassificationTags

"
      operationId: PersonOntology_UpdateHasClassificationTags
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the
            Classification tags that will be overwritten.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateHasClassificationTa\
          gsHasclassificationtags"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If hasClassificationTags is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{objectId}/properties/{propertyId}/hasClassficationTags":
    put:
      tags:
        - PersonOntology
      summary: Updates the data classification tags on a property
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyHasClassficationTags

"
      operationId: PersonOntology_UpdatePropertyHasClassficationTags
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id of which classification tags collection
            will be overwritten.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyHasClassfic\
          ationTagsHasclassificationtags"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
       \r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If propertyId is null or whitespace.\r

            \            3. If hasClassificationTags is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If object is not found. 
\r

            \            2. If property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/persons/{objectId}/hasstorageretentionpolicies":
    put:
      tags:
        - PersonOntology
      summary: Updates the storage retention policies on a gateway
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateHasStorageRetentionPolicies

"
      operationId: PersonOntology_UpdateHasStorageRetentionPolicies
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the object of which the storage
            retention policy will be overwritten.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded gateway id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiStorageRetentionPolicyArray"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If hasStorageRetentionPolicies is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "1. The objectId is not valid a base64Encoded string\r

            \            2. The ontology object was not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/systems/{systemGuid}/points/history/summary":
    post:
      tags:
        - PointHistory
      summary: Queries times series data from a system using the given aggregration
        method
      description: "Given systemGuid, point Ids and start/end datetime, get history
        summary: avg, min, max value by sample interval.\r

        
Authorization:SystemPermissionBySystemType-ReadPointH\
        istory

\r

        
Action:PostHistorySummaryQuery

"
      operationId: PointHistory_PostHistorySummaryQuery
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PointHistorySummaryQueryParams"
          text/json:
            schema:
              $ref: "#/components/schemas/PointHistorySummaryQueryParams"
          application/xml:
            schema:
              $ref: "#/components/schemas/PointHistorySummaryQueryParams"
          text/xml:
            schema:
              $ref: "#/components/schemas/PointHistorySummaryQueryParams"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PointHistorySummaryQueryParams"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySampleSummary"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySampleSummary"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySampleSummary"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySampleSummary"
        "400":
          description: Bad Request-Invalid parameters, or Invalid query parameters
      deprecated: false
  "/api/systems/{systemGuid}/points/history/interval":
    post:
      tags:
        - PointHistory
      summary: Queries system time series data
      description: "Get history samples with given systemGuid and point Ids and start/end
        time\r

        
Authorization:SystemPermissionBySystemType-ReadPointH\
        istory

\r

        
Action:PostHistoryQuery

"
      operationId: PointHistory_PostHistoryQuery
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PointHistoryQueryParams"
          text/json:
            schema:
              $ref: "#/components/schemas/PointHistoryQueryParams"
          application/xml:
            schema:
              $ref: "#/components/schemas/PointHistoryQueryParams"
          text/xml:
            schema:
              $ref: "#/components/schemas/PointHistoryQueryParams"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PointHistoryQueryParams"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
        "400":
          description: Bad Request-Invalid parameters, or Invalid query parameters
      deprecated: false
  "/api/systems/{systemGuid}/points/history/range":
    get:
      tags:
        - PointHistory
      summary: Get the range of time series data stored for a system
      description: "Given systemGuid, get status of history samples pushed to
        CloudPlatform: last timestamp, first timestamp.\r

        
Authorization:SystemPermissionBySystemType-ReadPointH\
        istory

\r

        
Action:GetHistoryStatus

"
      operationId: PointHistory_GetHistoryStatus
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PointHistoryRangeResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/PointHistoryRangeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/PointHistoryRangeResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/PointHistoryRangeResponse"
        "400":
          description: Bad Request-Invalid parameters
        "404":
          description: Not Found-System Guid not found
      deprecated: false
  "/api/systems/{systemGuid}/points/history/last":
    post:
      tags:
        - PointHistory
      summary: Returns the most recent time series values for a given system and set of
        point ids
      description: "Given systemGuid, get last known value of history samples pushed to
        CloudPlatform\r

        
Authorization:SystemPermissionBySystemType-ReadPointH\
        istory

\r

        
Action:GetLastHistoryValue

"
      operationId: PointHistory_GetLastHistoryValue
      parameters:
        - name: systemGuid
          in: path
          description: Unique id of the system
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
          text/json:
            schema:
              type: array
              items:
                type: string
          application/xml:
            schema:
              type: array
              items:
                type: string
          text/xml:
            schema:
              type: array
              items:
                type: string
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                type: string
        description: Point ids from the system on which the last history value is queried
          for
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
        "204":
          description: No Content - the request was valid, but there were no values to
            return
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PointHistorySample"
        "400":
          description: Bad Request-Invalid parameters
        "500":
          description: For other errors
      deprecated: false
  "/api/systems/{systemGuid}/points/history/range/last":
    put:
      tags:
        - PointHistory
      summary: Sets the Last history time stamp for a given system
      description: "Given systemGuid and a datetimeoffset, this API sets the given
        datetimeoffset as the last history time stamp sent by the system.This
        API is intended to be used by DevOps\r

        
Authorization:SystemPermissionBySystemType-ManagePoin\
        tHistory

\r

        
Action:SetLastHistoryTimeStamp

"
      operationId: PointHistory_SetLastHistoryTimeStamp
      parameters:
        - name: systemGuid
          in: path
          description: Unique id of the system
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PointHistorySetLastTimeStampParams"
          text/json:
            schema:
              $ref: "#/components/schemas/PointHistorySetLastTimeStampParams"
          application/xml:
            schema:
              $ref: "#/components/schemas/PointHistorySetLastTimeStampParams"
          text/xml:
            schema:
              $ref: "#/components/schemas/PointHistorySetLastTimeStampParams"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PointHistorySetLastTimeStampParams"
        description: DateTime Offset to be set as the last history timestamp of the system
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Object"
            text/json:
              schema:
                $ref: "#/components/schemas/Object"
            application/xml:
              schema:
                $ref: "#/components/schemas/Object"
            text/xml:
              schema:
                $ref: "#/components/schemas/Object"
        "400":
          description: Bad Request-Invalid parameters
        "500":
          description: Internal Server Error - Error while processing the request
      deprecated: false
  "/api/systems/{systemGuid}/points/list/recent":
    get:
      tags:
        - PointHistory
      summary: Gets the points ids that have been recently updated for a system
      description: "Retrieves a list of recently updated points. Points that have recently
        been sent from a system in a PointHistoryUpdate message will have the
        list of \r

        \            points cached in the platform. This API retrieves
        the list of points in the cache. If a system has not sent a point update
        message recently, then the point list cache\r

        \            may no longer contain the information for this
        system.\r

        
Authorization:SystemPermissionBySystemType-ReadPointH\
        istory

\r

        
Action:GetRecentlyUpdatedPointIds

"
      operationId: PointHistory_GetRecentlyUpdatedPointIds
      parameters:
        - name: systemGuid
          in: path
          description: Unique id of the system
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK - results are available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiGetRecentPointsListResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiGetRecentPointsListResponse"
        "204":
          description: No Content - the request was valid, but there were no recently
            updated point ids to return
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiGetRecentPointsListResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiGetRecentPointsListResponse"
        "500":
          description: For other errors
      deprecated: false
  "/api/systems/{systemGuid}/points/history/operations/remove":
    post:
      tags:
        - PointHistory
      summary: Obsolete - This method is marked as Obsolete. Please use
        CreateRemovePointsRequest method in PoinHistoryStoreUpdateController
        instead.
      description: "Obsolete - This method is marked as Obsolete. Please use
        CreateRemovePointsRequest method in PoinHistoryStoreUpdateController
        instead.\r

        
Authorization:SystemPermissionBySystemType-ManagePoin\
        tHistory

\r

        
Action:RemovePoints

"
      operationId: PointHistory_RemovePoints
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiPointHistoryRemovePointsRequest"
      responses:
        "201":
          description: Created - Remove operation request is created, resource URI to query
            operation status is created and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationCreateRespon\
                  se"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationCreateRespon\
                  se"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationCreateRespon\
                  se"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationCreateRespon\
                  se"
        "400":
          description: BadRequest - PointId parameters are null (or) start time/end time is
            invalid (or) start time is greater than endtime
        "401":
          description: Unauthorized
        "500":
          description: InternalServerError
      deprecated: true
  "/api/systems/{systemGuid}/points/history/operations/replacevalues":
    post:
      tags:
        - PointHistory
      summary: Obsolete - This method is marked as Obsolete. Please use
        CreateReplacePointValueRequest method in
        PoinHistoryStoreUpdateController instead.
      description: "Obsolete - This method is marked as Obsolete. Please use
        CreateReplacePointValueRequest method in
        PoinHistoryStoreUpdateController instead.  .\r

        
Authorization:SystemPermissionBySystemType-ManagePoin\
        tHistory

\r

        
Action:ReplacePointValues

"
      operationId: PointHistory_ReplacePointValues
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiPointHistoryReplacePointValuesReque\
          st"
      responses:
        "201":
          description: Created - Replace request is created, resource URI to query
            operation status is created and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationCreateRespon\
                  se"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationCreateRespon\
                  se"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationCreateRespon\
                  se"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationCreateRespon\
                  se"
        "400":
          description: BadRequest - Replace request parameters are null (or) start time/end
            time is invalid (or) start time is greater than endtime (or)
            PointHistoryReplacePointValuesValue is null or empty
        "401":
          description: Unauthorized
        "500":
          description: InternalServerError
      deprecated: true
  "/api/systems/{systemGuid}/points/history/operation/{operationId}":
    get:
      tags:
        - PointHistory
      summary: Obsolete - This method is marked as Obsolete. Please use Eventstore
        endpoint to query the status of request based on TransactionId instead.
      description: "Obsolete - This method is marked as Obsolete. Please use Eventstore
        endpoint to query the status of request based on TransactionId
        instead.\r

        
Authorization:SystemPermissionBySystemType-ManagePoin\
        tHistory

\r

        
Action:GetPointHistoryOperationStatus

"
      operationId: PointHistory_GetPointHistoryOperationStatus
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Ok - Current status of operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryOperationResponse"
        "401":
          description: Unauthorized
        "404":
          description: NotFound - No such operation exists with given OperationId (or) No
            such operation exists with given OperationId for the given
            SystemGuid.
        "500":
          description: InternalServerError
      deprecated: true
  "/api/systems/{systemGuid}/points/history/remove":
    post:
      tags:
        - PointHistoryStoreUpdate
      summary: Creates and initiates an operation to remove given points in point
        history store for a given system
      description: "Creates and initiates an operation to remove given points in point
        history store for a given system.\r

        \            Use returned resource URL to check progress on
        remove operation.\r

        
Authorization:SystemPermissionBySystemType-ManagePoin\
        tHistory

\r

        
Action:CreateRemovePointsRequest

"
      operationId: PointHistoryStoreUpdate_CreateRemovePointsRequest
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiPointHistoryRemovePointsRequest"
      responses:
        "201":
          description: Created - Remove operation request is created, resource URI to query
            operation status is created and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryRequestCreateResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryRequestCreateResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryRequestCreateResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryRequestCreateResponse"
        "400":
          description: BadRequest - PointId parameters are null (or) start time/end time is
            invalid (or) start time is greater than endtime
        "401":
          description: Unauthorized
        "500":
          description: InternalServerError
      deprecated: false
  "/api/systems/{systemGuid}/points/history/replace":
    post:
      tags:
        - PointHistoryStoreUpdate
      summary: Creates and initiates an operation to replace given point values in
        point history store
      description: "Creates and initiates an operation to replace given point values in
        point history store .\r

        \            Use returned resource URL to check progress on
        replace operation.\r

        
Authorization:SystemPermissionBySystemType-ManagePoin\
        tHistory

\r

        
Action:CreateReplacePointValueRequest

"
      operationId: PointHistoryStoreUpdate_CreateReplacePointValueRequest
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiPointHistoryReplacePointValuesReque\
          st"
      responses:
        "201":
          description: Created - Replace request is created, resource URI to query
            operation status is created and returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryRequestCreateResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryRequestCreateResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryRequestCreateResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointHistoryRequestCreateResponse"
        "400":
          description: BadRequest - Replace request parameters are null (or) start time/end
            time is invalid (or) start time is greater than endtime (or)
            PointHistoryReplacePointValuesValue is null or empty
        "401":
          description: Unauthorized
        "500":
          description: InternalServerError
      deprecated: false
  "/api/models/{modelId}/productuicontexts":
    post:
      tags:
        - ProductUiContext
      summary: Gets product context for a list of products and point ids
      description: "Returns product ui context for given products, for the given point
        ids.\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:GetAllProducts

"
      operationId: ProductUiContext_GetAllProducts
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductUiContextRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/ProductUiContextRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/ProductUiContextRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/ProductUiContextRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/ProductUiContextRequest"
        description: List of productsIds and tags
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductContextDetail"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductContextDetail"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductContextDetail"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductContextDetail"
        "400":
          description: If the modelId is null or empty. If productId or tag is invalid Uri
        "404":
          description: If no property found for the given product
        "500":
          description: For other errors
      deprecated: false
  "/api/systems/{systemGuid}/services":
    get:
      tags:
        - ServiceActivation
      summary: Gets the status of all services running on a system
      description: "Get status of all services for given system.\r

        
Authorization:SystemPermissionBySystemType-ManageServ\
        ices

\r

        
Action:GetAllServiceStatus

"
      operationId: ServiceActivation_GetAllServiceStatus
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ServiceStatus"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ServiceStatus"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ServiceStatus"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ServiceStatus"
        "400":
          description: Bad Request-Invalid parameter
        "404":
          description: Not Found-Device not found for systemguid
        "500":
          description: Internal Server Error-No status for service in the data store
      deprecated: false
  "/api/systems/{systemGuid}/services/{serviceId}/activate":
    post:
      tags:
        - ServiceActivation
      summary: Activates a service on a system
      description: "activate a services on given system.\r

        
Authorization:SystemPermissionBySystemType-ManageServ\
        ices

\r

        
Action:Activate

"
      operationId: ServiceActivation_Activate
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: serviceId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiServiceActivationResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiServiceActivationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiServiceActivationResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiServiceActivationResponse"
        "400":
          description: Bad Request-Invalid parameter, or Invalid serviceId
        "404":
          description: Not Found-Device not found for systemguid
        "500":
          description: Internal Server Error-No response received from device for service
            activation
      deprecated: false
  "/api/systems/{systemGuid}/services/{serviceId}/deactivate":
    post:
      tags:
        - ServiceActivation
      summary: Deactivates a service on a system
      description: "Deactivate a service on given system.\r

        
Authorization:SystemPermissionBySystemType-ManageServ\
        ices

\r

        
Action:Deactivate

"
      operationId: ServiceActivation_Deactivate
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: serviceId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiServiceDeActivationResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiServiceDeActivationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiServiceDeActivationResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiServiceDeActivationResponse"
        "400":
          description: Bad Request-Invalid parameter, or Invalid serviceId
        "404":
          description: Not Found-Device not found for systemguid
        "500":
          description: Internal Server Error-No response received from device for service
            deactivation
      deprecated: false
  "/api/models/{modelId}/spatialelements":
    get:
      tags:
        - SpatialElement
      summary: Retrieves all spatial elements in a given model
      description: "Retrieves all spatial elements in a given model\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:GetAllSpatialElements

"
      operationId: SpatialElement_GetAllSpatialElements
      parameters:
        - name: modelId
          in: path
          description: The model to retrieve all buildings from
          required: true
          schema:
            type: string
        - name: basicinfo
          in: query
          description: Retrieve basic details like id and types
          required: false
          schema:
            type: boolean
        - name: includepropertybasics
          in: query
          description: Retrieve Property basic details. Set this and other property items
            to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertybindings
          in: query
          description: Retrieve Property Bindings. Set this and other property items to
            false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertyroles
          in: query
          description: Retrieve Property Roles. Set this and other property items to false
            to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includerelationships
          in: query
          description: Retrieve Relationships to other Objects. Set this and other property
            items to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: alldetails
          in: query
          description: Return all details for the object, a shortcut for setting all
            previous items to true
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
        "400":
          description: If modelId is null or empty
        "404":
          description: model does not exist
        "500":
          description: Any other errors
      deprecated: false
    post:
      tags:
        - SpatialElement
      summary: Add a new spatial element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:AddSpatialElement

"
      operationId: SpatialElement_AddSpatialElement
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElement"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElement"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElement"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElement"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElement"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
        "400":
          description: "BAD_REQUEST when <br />\r

            \            1. modelId is null or empty <br />\r

            \            2. spatialElement is null <br />\r

            \            3. spatialElementId is invalid (with
            message \"Invalid element Id\")"
        "404":
          description: If the given model is not found
        "409":
          description: "CONFLICT when <br />\r

            \            1. item of same type already exists with
            message \"SAME_TYPE\", \r

            \            2. item of different type already exists
            with message \"DIFFERENT_TYPE\"."
        "500":
          description: Other errors
      deprecated: false
  "/api/models/{modelId}/spatialelements/{parentSpatialElementId}/containslocations":
    post:
      tags:
        - SpatialElement
      summary: Adds a new spatial to a parent spatial element
      description: "Given a modelId, parentSpatialElementId and spatialElement, \r

        \            this will add the spatialElement and link with
        parent spatial element.\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:AddChildSpatialElement

"
      operationId: SpatialElement_AddChildSpatialElement
      parameters:
        - name: modelId
          in: path
          description: Id of the model in which the parent spatial element resides
          required: true
          schema:
            type: string
        - name: parentSpatialElementId
          in: path
          description: Base64 encoded Id of the parent spatial element
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElement"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElement"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElement"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElement"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiCoreSpatialElement"
        description: SpatialElement which needs to be added and linked to parent spatial
          element
        required: true
      responses:
        "201":
          description: Created, on success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
        "400":
          description: "Bad Request when <br />\r

            \            1. modelId is null or empty <br />\r

            \            2. parentSpatialElementId is null <br
            />\r

            \            3. parentSpatialElementId is invalid\r

            \            4. spatialElementId is null <br />\r

            \            5. spatialElementId is invalid"
        "404":
          description: If the given model is not found
        "409":
          description: "Conflict when <br />\r

            \            1. SpatialElement of same type already
            exists with message \"SAME_TYPE\", \r

            \            2. SpatialElement of different type already
            exists with message \"DIFFERENT_TYPE\"."
        "500":
          description: Other errors
      deprecated: false
  "/api/models/{modelId}/buildings":
    get:
      tags:
        - SpatialElement
      summary: Retrieves all buildings in a given model
      description: "Retrieves all buildings in a given model\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:GetAllBuildings

"
      operationId: SpatialElement_GetAllBuildings
      parameters:
        - name: modelId
          in: path
          description: The model to retrieve all buildings from
          required: true
          schema:
            type: string
        - name: basicinfo
          in: query
          description: Retrieve basic details like id and types
          required: false
          schema:
            type: boolean
        - name: includepropertybasics
          in: query
          description: Retrieve Property basic details. Set this and other property items
            to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertybindings
          in: query
          description: Retrieve Property Bindings. Set this and other property items to
            false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertyroles
          in: query
          description: Retrieve Property Roles. Set this and other property items to false
            to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includerelationships
          in: query
          description: Retrieve Relationships to other Objects. Set this and other property
            items to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: alldetails
          in: query
          description: Return all details for the object, a shortcut for setting all
            previous items to true
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
        "400":
          description: If modelId is null or empty
        "404":
          description: If the given model is not found
        "500":
          description: Any other errors
      deprecated: false
  "/api/models/{modelId}/spatialelements/{spatialElementId}/search/elements":
    get:
      tags:
        - SpatialElement
      summary: Retrieves all elements that have a location of the given spatial element
      description: "Returns an array of elements with the id, label, comment and types and
        relationships filled in.  \r

        \            Use the Product service to retrieve further
        information such as properties if required.\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:FindElements2

"
      operationId: SpatialElement_FindElements2
      parameters:
        - name: modelId
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: spatialElementId
          in: path
          description: spatialelementid encoded as base64 encoded string
          required: true
          schema:
            type: string
        - name: recursive
          in: query
          description: Searches all spatial elements contained by the given spatialelement
            as well
          required: false
          schema:
            type: boolean
        - name: basicinfo
          in: query
          description: Retrieve basic details like id and types
          required: false
          schema:
            type: boolean
        - name: includepropertybasics
          in: query
          description: Retrieve Property basic details. Set this and other property items
            to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertybindings
          in: query
          description: Retrieve Property Bindings. Set this and other property items to
            false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertyroles
          in: query
          description: Retrieve Property Roles. Set this and other property items to false
            to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includerelationships
          in: query
          description: Retrieve Relationships to other Objects. Set this and other property
            items to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: alldetails
          in: query
          description: Return all details for the object, a shortcut for setting all
            previous items to true
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreElement"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreElement"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreElement"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreElement"
        "400":
          description: If modelId is null or empty, or if spatialelementid is an invalid uri
        "404":
          description: If spatial element does not exist
        "500":
          description: Any other errors
      deprecated: false
  "/api/models/{modelId}/spatialelements/{parentSpatialElementId}/search/spatialelements":
    get:
      tags:
        - SpatialElement
      summary: Returns all child spatial elements of a spatial element
      description: "PREVIEW - NOT IMPLEMENTED - Given a modelId and parentSpatialElementId,
        this will retrieve all child spatialelements.\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:GetChildSpatialElements

"
      operationId: SpatialElement_GetChildSpatialElements
      parameters:
        - name: modelId
          in: path
          description: Id of the model in which the SpatialElement resides
          required: true
          schema:
            type: string
        - name: parentSpatialElementId
          in: path
          description: Base64 encoded Id of the ParentSpatialElement
          required: true
          schema:
            type: string
        - name: basicinfo
          in: query
          description: Retrieve basic details like id and types
          required: false
          schema:
            type: boolean
        - name: includepropertybasics
          in: query
          description: Retrieve Property basic details. Set this and other property items
            to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertybindings
          in: query
          description: Retrieve Property Bindings. Set this and other property items to
            false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertyroles
          in: query
          description: Retrieve Property Roles. Set this and other property items to false
            to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includerelationships
          in: query
          description: Retrieve Relationships to other Objects. Set this and other property
            items to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: alldetails
          in: query
          description: Return all details for the object, a shortcut for setting all
            previous items to true
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Retrieved, if successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiCoreSpatialElement"
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If parentSpatialElement Id is null or
            invalid."
        "404":
          description: Not found, if ParentSpatialElement does not exist
        "500":
          description: For any other errors
      deprecated: false
  "/api/models/{modelId}/spatialelements/{encodedSpatialElementId}":
    get:
      tags:
        - SpatialElement
      summary: Retrieves a spatial element
      description: "Given a modelId and SpatialElement id, api will retrieve the
        SpatialElement details.\r

        
Authorization:ModelPermissionByModelType-ReadModel

\
        \r

        
Action:GetSpatialElement

"
      operationId: SpatialElement_GetSpatialElement
      parameters:
        - name: modelId
          in: path
          description: Id of the model which contains the spatial element to be retrieved
          required: true
          schema:
            type: string
        - name: encodedSpatialElementId
          in: path
          description: Base64 encoded id of the spatial element
          required: true
          schema:
            type: string
        - name: basicinfo
          in: query
          description: Retrieve basic details like id and types
          required: false
          schema:
            type: boolean
        - name: includepropertybasics
          in: query
          description: Retrieve Property basic details. Set this and other property items
            to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertybindings
          in: query
          description: Retrieve Property Bindings. Set this and other property items to
            false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includepropertyroles
          in: query
          description: Retrieve Property Roles. Set this and other property items to false
            to ignore properties.
          required: false
          schema:
            type: boolean
        - name: includerelationships
          in: query
          description: Retrieve Relationships to other Objects. Set this and other property
            items to false to ignore properties.
          required: false
          schema:
            type: boolean
        - name: alldetails
          in: query
          description: Return all details for the object, a shortcut for setting all
            previous items to true
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: Ok, if found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiCoreSpatialElement"
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If spatial element Id is null or
            invalid."
        "404":
          description: Spatial element does not exist in the specific model, or model was
            not found
        "500":
          description: For any other errors
      deprecated: false
    delete:
      tags:
        - SpatialElement
      summary: Removes a spatial element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:RemoveSpatialElement

"
      operationId: SpatialElement_RemoveSpatialElement
      parameters:
        - name: modelId
          in: path
          description: Id of the model which contains the spatial element to be removed
          required: true
          schema:
            type: string
        - name: encodedSpatialElementId
          in: path
          description: Base64 encoded id of the spatial element
          required: true
          schema:
            type: string
      responses:
        "204":
          description: NoContent, if successful
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If spatial element Id is null or
            invalid."
        "401":
          description: The caller has not been granted permission to modify the model
        "403":
          description: The request must be HTTPs
        "404":
          description: The spatial element was not found in the specific model, or model
            was not found
        "500":
          description: An unexpected error has occurred
      deprecated: false
  "/api/models/{modelId}/spatialelements/{spatialElementId}":
    patch:
      tags:
        - SpatialElement
      summary: Updates a Spatial Element (currently limited to Label)
      description: "This method updates a spatialElement\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateSpatialElement

"
      operationId: SpatialElement_UpdateSpatialElement
      parameters:
        - name: modelId
          in: path
          description: Id of the model which contains the spatialElement to be updated.
          required: true
          schema:
            type: string
        - name: spatialElementId
          in: path
          description: Base64 encoded id of the spatialElement.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiResourceUpdateDetails"
          text/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiResourceUpdateDetails"
          application/xml:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiResourceUpdateDetails"
          text/xml:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiResourceUpdateDetails"
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiResourceUpdateDetails"
        description: Updates to be applied on the spatialElement.
        required: true
      responses:
        "204":
          description: No content, if operation is successful.
        "400":
          description: "BadRequest <br />\r

            \            1. If modelId is null or whitespace. <br
            />\r

            \            2. If spatialElement Id is null or invalid.
            <br />\r

            \            3. If updateDetails are ill-formed."
        "404":
          description: SpatialElement does not exist
        "422":
          description: Unprocessable Entity, if specified property is absent in the
            spatialElement.
        "500":
          description: For any other errors
      deprecated: false
  "/api/models/{modelId}/spatialelements/{spatialElementId}/containLocations":
    put:
      tags:
        - SpatialElementOntology
      summary: Updates the containsLocations relationship of a spatial element in the
        model
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateContainsLocationsRelationship

"
      operationId: SpatialElementOntology_UpdateContainsLocationsRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the spatial element to be updated.
          required: true
          schema:
            type: string
        - name: spatialElementId
          in: path
          description: Base64 encoded spatial element id.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
          text/json:
            schema:
              type: array
              items:
                type: string
          application/xml:
            schema:
              type: array
              items:
                type: string
          text/xml:
            schema:
              type: array
              items:
                type: string
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                type: string
        description: Collection of spatial element ids that will replace the existing
          containsLocations collection of the spatial element.
        required: true
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If spatialElementId is null or
            whitespace. 
\r

            \            3. If coreSpatialElementIds is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If spatial element does not exist. 
\r

            \            2. If any of the related spatial elements
            does not exist."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{elementId}/label":
    put:
      tags:
        - SpatialElementOntology
      summary: Updates the label of a property of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateLabel

"
      operationId: SpatialElementOntology_UpdateLabel
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateLabelNewlabelvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{elementId}/comment":
    put:
      tags:
        - SpatialElementOntology
      summary: Updates the comment of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateComment

"
      operationId: SpatialElementOntology_UpdateComment
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateCommentNewcommentva\
          lue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{elementId}/properties/{propertyId}/label":
    put:
      tags:
        - SpatialElementOntology
      summary: Updates the property label of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyLabel

"
      operationId: SpatialElementOntology_UpdatePropertyLabel
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which label will be updated.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyLabelNewlab\
          elvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{elementId}/properties/{propertyId}/comment":
    put:
      tags:
        - SpatialElementOntology
      summary: Updates the property comment of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyComment

"
      operationId: SpatialElementOntology_UpdatePropertyComment
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which comment will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyLabelNewlab\
          elvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{elementId}/properties/{propertyId}/isdescribedbyunit":
    put:
      tags:
        - SpatialElementOntology
      summary: Updates the property IsDescribedByUnit attribute of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyIsDescribedByUnit

"
      operationId: SpatialElementOntology_UpdatePropertyIsDescribedByUnit
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which its IsDescribedByUnit attribute
            will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyIsDescribed\
          ByUnitNewisdescribedbyunitvalue"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{elementId}/literals":
    put:
      tags:
        - SpatialElementOntology
      summary: Overwrites the custom literals collection of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateCustomLiterals

"
      operationId: SpatialElementOntology_UpdateCustomLiterals
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the custom
            literals that will be overwritten.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCustomLiteralItemArray"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If customLiteralItems is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{elementId}/properties/{propertyId}/literals":
    put:
      tags:
        - SpatialElementOntology
      summary: Overwrites the custom literals collection of an element property
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyCustomLiterals

"
      operationId: SpatialElementOntology_UpdatePropertyCustomLiterals
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which custom literals collection will be
            overwritten.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCustomLiteralItemArray2"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{elementId}/properties/{propertyId}/role":
    put:
      tags:
        - SpatialElementOntology
      summary: Updates the property role of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyRole

"
      operationId: SpatialElementOntology_UpdatePropertyRole
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id which the role will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCorePropertyRole"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{elementId}/properties":
    post:
      tags:
        - SpatialElementOntology
      summary: Adds a property to an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:AddProperty

"
      operationId: SpatialElementOntology_AddProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be added.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCoreProperty"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: NotFound, if element is not found.
        "409":
          description: Conflict, if the property already exists in the ontology object.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{elementId}/properties/{propertyId}":
    put:
      tags:
        - SpatialElementOntology
      summary: Overwrites the full property of an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateProperty

"
      operationId: SpatialElementOntology_UpdateProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id that will be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiCoreProperty2"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace. 
\r

            \            4. If propertyId is different from the
            property object id provided in the request body."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
    delete:
      tags:
        - SpatialElementOntology
      summary: Removes a property from an element
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:RemoveProperty

"
      operationId: SpatialElementOntology_RemoveProperty
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id that will be removed from the ontology
            object.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace. 
\r

            \            3. If propertyId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found. 
\r

            \            2. If element property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{elementId}/isrelatedto":
    put:
      tags:
        - SpatialElementOntology
      summary: Updates the IsRelatedTo relationships of an ontology object in the model
        store
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateIsRelatedToRelationship

"
      operationId: SpatialElementOntology_UpdateIsRelatedToRelationship
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with IsRelatedTo
            objects to be updated.
          required: true
          schema:
            type: string
        - name: elementId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateIsRelatedToRelation\
          shipCoreobjectids"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If modelId is null or whitespace. 
\r

            \            2. If elementId is null or whitespace."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If element is not found.  
\r

            \            2. If at least one target object for the
            IsRelatedTo relationship is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{objectId}/hasClassficationTags":
    put:
      tags:
        - SpatialElementOntology
      summary: Updates the data classification tags on an object
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateHasClassificationTags

"
      operationId: SpatialElementOntology_UpdateHasClassificationTags
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the
            Classification tags that will be overwritten.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded ontology object id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdateHasClassificationTa\
          gsHasclassificationtags"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If hasClassificationTags is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: The ontology object was not found.
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{objectId}/properties/{propertyId}/hasClassficationTags":
    put:
      tags:
        - SpatialElementOntology
      summary: Updates the data classification tags on a property
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdatePropertyHasClassficationTags

"
      operationId: SpatialElementOntology_UpdatePropertyHasClassficationTags
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the ontology object with the property
            to be updated.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded ontology object id.
          required: true
          schema:
            type: string
        - name: propertyId
          in: path
          description: Base64 encoded property id of which classification tags collection
            will be overwritten.
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/ElementOntology_UpdatePropertyHasClassfic\
          ationTagsHasclassificationtags"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
       \r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If propertyId is null or whitespace.\r

            \            3. If hasClassificationTags is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "NotFound 
\r

            \            1. If object is not found. 
\r

            \            2. If property is not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/models/{modelId}/spatialelements/{objectId}/hasstorageretentionpolicies":
    put:
      tags:
        - SpatialElementOntology
      summary: Updates the storage retention policies on a gateway
      description: "\r

        
Authorization:ModelPermissionByModelType-ModifyModel<\
        /p>\r

        

Action:UpdateHasStorageRetentionPolicies

"
      operationId: SpatialElementOntology_UpdateHasStorageRetentionPolicies
      parameters:
        - name: modelId
          in: path
          description: Id of the model that contains the object of which the storage
            retention policy will be overwritten.
          required: true
          schema:
            type: string
        - name: objectId
          in: path
          description: Base64 encoded gateway id
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiStorageRetentionPolicyArray"
      responses:
        "204":
          description: No content, if operation succeeded.
        "400":
          description: "BadRequest 
\r

            \            1. If objectId is null or whitespace. 
\r

            \            2. If hasStorageRetentionPolicies is null."
        "401":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "403":
          description: The caller does not have permissions to perform the ModifyModel
            activity on the model or its type.
        "404":
          description: "1. The objectId is not valid a base64Encoded string\r

            \            2. The ontology object was not found."
        "500":
          description: An unexpected error has occurred.
        "501":
          description: The requested operation is not supported and cannot be handled.
      deprecated: false
  "/api/systems/{systemGuid}/systemCommands":
    post:
      tags:
        - SystemCommand
      summary: Obsolete - API to send generic commands to a system
      description: "Obsolete - API to send generic commands to a System when one of the
        other messages isn't appropriate. Messages sent using this api will be
        sent to the \r

        \            system and it will wait for the response from the
        system. If the command is long running, the system should return quickly
        (within the specified timeout period) \r

        \            and then send results using an Event message that
        can be retrieved via an Annotation stream. If a long running command
        pattern is used, the CommandId parameter \r

        \            in the request can be used to correalate the
        originating command with the result.\r

        
Authorization:SystemCommandSend-SendSystemCommand

\
        \r

        
Action:Send

"
      operationId: SystemCommand_Send
      parameters:
        - name: systemGuid
          in: path
          description: System GUID of the targeted system where the command will be
            delivered
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiSystemCommandRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiSystemCommandResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiSystemCommandResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiSystemCommandResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiSystemCommandResponse"
        "400":
          description: "Bad Request when <br />\r

            \            1. commandId is invalid <br />\r

            \            2. CommandParameters are null <br
            />\r

            \            3. systemGuid is null <br />\r

            \            4. systemGuid is invalid <br />"
        "401":
          description: Authentication Failure
        "403":
          description: Authorization Failure
        "404":
          description: System GUID not found
        "500":
          description: Internal Server Error
      deprecated: true
  "/api/systems/{systemGuid}/v2/systemCommands":
    post:
      tags:
        - SystemCommand
      summary: Sends generic commands to a system
      description: "API to send generic commands to a System when one of the other messages
        isn't appropriate. Messages sent using this api will be sent to the \r

        \            system and it will wait for the response from the
        system. If the command is long running, the system should return quickly
        (within the specified timeout period) \r

        \            and then send results using an Event message that
        can be retrieved via an Annotation stream. If a long running command
        pattern is used, the CommandId parameter \r

        \            in the request can be used to correalate the
        originating command with the result.\r

        
Authorization:SystemCommandSend-SendSystemCommand

\
        \r

        
Action:SendV2

"
      operationId: SystemCommand_SendV2
      parameters:
        - name: systemGuid
          in: path
          description: System GUID of the targeted system where the command will be
            delivered
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/WebApiSystemCommandRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiSystemCommandResponseV2"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiSystemCommandResponseV2"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiSystemCommandResponseV2"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiSystemCommandResponseV2"
        "400":
          description: "Bad Request when <br />\r

            \            1. commandId is invalid <br />\r

            \            2. CommandParameters are null <br
            />\r

            \            3. systemGuid is null <br />\r

            \            4. systemGuid is invalid <br />"
        "401":
          description: Authentication Failure
        "403":
          description: Authorization Failure
        "404":
          description: System GUID not found
        "500":
          description: Internal Server Error
      deprecated: false
  "/api/systems/{systemGuid}/fileupload":
    post:
      tags:
        - SystemFileUpload
      summary: Uploads a file to Sentience temporary store and sends a command to the
        given system to download the file.
      description: "An authorized user who has access to upload a file for a system, can
        use this API to upload the file for\r

        \            the specified system. On successful upload of the
        given file, a command with name 'DownloadFile' will be sent to the
        system. The command will contain SaS Url to download the file.\r

        \            Uploaded file will get automatically purged after 7
        days. \r

        \            The request body should be of multipart content
        type with the\r

        \            \"WebApiSystemFileUploadRequest\" being the first
        part and the file stream as the second part.\r

        
Authorization:SystemPermissionBySystemType-UploadFile\
        

\r

        
Action:Upload

"
      operationId: SystemFileUpload_Upload
      parameters:
        - name: systemGuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                webApiFileStream:
                  type: string
                  format: binary
              required:
                - webApiFileStream
      responses:
        "201":
          description: "Created: Uploaded the file and sent command to the system"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiSystemFileUploadResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiSystemFileUploadResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiSystemFileUploadResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiSystemFileUploadResponse"
        "400":
          description: "BadRequest: Invalid request. Unable to parse file upload request
            and/or file stream."
        "401":
          description: "Unauthorized: Authorization failure when trying to upload. Please
            check permissions."
        "403":
          description: "Forbidden: Not Allowed to upload File to the given system."
        "415":
          description: "UnsupportedMediaType: Request is not multipart. Request should be
            multipart content with File\r

            \            upload request information and the file."
        "500":
          description: "InternalServerError: Unexpected failure during internal operation."
      deprecated: false
  "/api/systems/{systemGuid}/points/{pointId}":
    get:
      tags:
        - SystemPoints
      summary: Reads a single point value from a system
      description: "Read a single point value. If the device doesn't respond to the read
        request within the configured time, then Internal Server Error with
        appropriate message will be returned.\r

        \            If this API is called using Sentience provided
        WebApiClient, please ensure that, default retry policy of webapi client
        is turned off as the API itself waits for maximum possible time before
        returning. If device doesn't respond, the webapiclient throws an
        exception with reason in ReasonPhrase of the message\r

        
Authorization:SystemPermissionBySystemType-ReadPointV\
        alues

\r

        
Action:ReadPoint

"
      operationId: SystemPoints_ReadPoint
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: pointId
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiPointReadResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiPointReadResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointReadResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointReadResponse"
      deprecated: false
    put:
      tags:
        - SystemPoints
      summary: Writes multple point values to a system
      description: "Write value to a single point. If the device doesn't respond to the
        write request within the configured time, then Internal Server Error
        with appropriate message will be returned.\r

        \            If this API is called using Sentience provided
        WebApiClient, please ensure that, default retry policy of webapi client
        is turned off as the API itself waits for maximum possible time before
        returning. If device doesn't respond, the webapiclient throws an
        exception with reason in ReasonPhrase of the message\r

        
Authorization:SystemPermissionBySystemType-WritePoint\
        Values

\r

        
Action:WritePoint

"
      operationId: SystemPoints_WritePoint
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
        - name: pointId
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebApiPointWriteRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/WebApiPointWriteRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/WebApiPointWriteRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/WebApiPointWriteRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/WebApiPointWriteRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebApiPointWriteResponse"
            text/json:
              schema:
                $ref: "#/components/schemas/WebApiPointWriteResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointWriteResponse"
            text/xml:
              schema:
                $ref: "#/components/schemas/WebApiPointWriteResponse"
      deprecated: false
  "/api/systems/{systemGuid}/points/getvalues":
    post:
      tags:
        - SystemPoints
      summary: Reads multiple point values from a system
      description: "read value of multiple points If the device doesn't respond to the read
        request within the configured time, then Internal Server Error with
        appropriate message will be returned.\r

        \            If this API is called using Sentience provided
        WebApiClient, please ensure that, default retry policy of webapi client
        is turned off as the API itself waits for maximum possible time before
        returning. If device doesn't respond, the webapiclient throws an
        exception with reason in ReasonPhrase of the message\r

        
Authorization:SystemPermissionBySystemType-ReadPointV\
        alues

\r

        
Action:ReadPointValues

"
      operationId: SystemPoints_ReadPointValues
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/Element_GetCloudPlatformGatewayBatchStatu\
          sV2Productids"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiMultiPointReadResponse"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiMultiPointReadResponse"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiMultiPointReadResponse"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiMultiPointReadResponse"
      deprecated: false
  "/api/systems/{systemGuid}/points/setvalues":
    post:
      tags:
        - SystemPoints
      summary: Writes a single point value to a system
      description: "write values to multiple points. If the device doesn't respond to the
        write request within the configured time, then Internal Server Error
        with appropriate message will be returned.\r

        \            If this API is called using Sentience provided
        WebApiClient, please ensure that, default retry policy of webapi client
        is turned off as the API itself waits for maximum possible time before
        returning. If device doesn't respond, the webapiclient throws an
        exception with reason in ReasonPhrase of the message\r

        
Authorization:SystemPermissionBySystemType-WritePoint\
        Values

\r

        
Action:WritePointValues

"
      operationId: SystemPoints_WritePointValues
      parameters:
        - name: systemGuid
          in: path
          description: ""
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiMultiPointWriteRequest"
          text/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiMultiPointWriteRequest"
          application/xml:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiMultiPointWriteRequest"
          text/xml:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiMultiPointWriteRequest"
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/WebApiMultiPointWriteRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiMultiPointWriteResponse"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiMultiPointWriteResponse"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiMultiPointWriteResponse"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WebApiMultiPointWriteResponse"
      deprecated: false
  /api/timeseries/values/intervals:
    post:
      tags:
        - TimeseriesPointHistory
      summary: PREVIEW - Retrieves all the interval information for a specified data
        point and time range
      description: PREVIEW - Retrieves all the interval information for a specified data
        point and time range
      operationId: TimeseriesPointHistory_TimeseriesPostHistoryQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataPointTSDBIntervalRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/DataPointTSDBIntervalRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/DataPointTSDBIntervalRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/DataPointTSDBIntervalRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/DataPointTSDBIntervalRequest"
        description: The query parameters including point ids, Start/End Time
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
        "400":
          description: Bad Request-Invalid parameters
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "501":
          description: NotImplemented-Fast TSDB feature is not available
      deprecated: false
  /api/timeseries/values/summary:
    post:
      tags:
        - TimeseriesPointHistory
      summary: PREVIEW - Retrieves all the summary information for a specified data
        point and time range.
      description: "PREVIEW - Retrieves all the summary information for a specified data
        point and time range. Supported aggregator types: MIN, MAX, FIRST, LAST,
        COUNT, AVG, STDDEV\r

        \             
Aggregation functions:

 avg -
        calculates the average of all values across the downsampling bucket. For
        example, if a downsample bucket consists of the series 2, 6, 1, 7, then
        the avg aggregator returns 4. 
 count - returns the number of
        data points stored in the series or range. For example, if a downsample
        bucket consists of the series 2, 6, 1, 7, then the count aggregator
        returns 4. 
 first - returns the first data point in the
        downsampling interval. For example, if a downsample bucket consists of
        the series 2, 6, 1, 7, then the first aggregator returns 2. 

        last - returns the last data point in the downsampling interval. For
        example, if a downsample bucket consists of the series 2, 6, 1, 7, then
        the last aggregator returns 7. 
 max - returns the largest data
        point from within a time span. For example, if a downsample bucket
        consists of the series 2, 6, 1, 7, then the max aggregator returns 7.
        
 min - returns the smallest data point from all the time series
        or within a time span. For example, if a downsample bucket consists of
        the series 2, 6, 1, 7, then the min aggregator returns 1. 

        stddev - calculates the sample standard deviation of all values across
        the downsampling bucket. For example, if a downsample bucket consists of
        the series 2, 6, 1, 7, then the stddev aggregator returns
        2.9439202887759. Standard deviation requires at least two points in a
        downsampling bucket. If a downsample bucket consists of only one point,
        the stddev aggregator returns 0. 
"
      operationId: TimeseriesPointHistory_TimeseriesSummaryQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataPointTSDBSummaryRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/DataPointTSDBSummaryRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/DataPointTSDBSummaryRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/DataPointTSDBSummaryRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/DataPointTSDBSummaryRequest"
        description: The query parameters including SystemGuid,point ids, Start/End Time
          with summary aggregation function and downsampling time bucket
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
        "400":
          description: Bad Request-Invalid parameters
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "501":
          description: NotImplemented-Fast TSDB feature is not available
      deprecated: false
  /api/timeseries/values/last:
    post:
      tags:
        - TimeseriesPointHistory
      summary: PREVIEW - Retrieves the last known value for given point(s)
      description: PREVIEW - Retrieves the last known value for given point(s). The request
        accepts a list of queries. Each query takes pointId and systemGuid as
        input.
      operationId: TimeseriesPointHistory_TimeseriesLastValueQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataPointTSDBLastRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/DataPointTSDBLastRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/DataPointTSDBLastRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/DataPointTSDBLastRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/DataPointTSDBLastRequest"
        description: Collection of queries containing a pair of SystemGuid and pointId.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSLastResponse"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSLastResponse"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSLastResponse"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSLastResponse"
        "400":
          description: Bad Request-Invalid parameters
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "501":
          description: NotImplemented-Fast TSDB feature is not available
      deprecated: false
  /api/timeseries/values/summaryV2:
    post:
      tags:
        - TimeseriesPointHistory
      summary: PREVIEW - Retrieves summary information for a specified data point
        including the time range with derived quality aggregation.
      description: "PREVIEW - Retrieves summary information for a specified data point
        including time range with derived quality aggregation.\r

        \             The parameters of derived quality attributes are
        Good, Uncertain and Bad.\r

        \             The purpose of this API (SummaryV2) is to
        aggregate all Good and Uncertain values together and ignore the Bad
        values.\r

        \             Quality aggregation calculates the minimum quality
        specified in a query. Minimum Quality parameter can be set to Good (only
        good values), Uncertain (good or uncertain values) or Bad/All(use all
        values).\r

        \             The default Minimum Quality parameter is
        Uncertain, which is an aggregation of Good and Uncertain
        samples.Supported selector aggregates (first, last, min, max).Supported
        Calculated aggregates (average, sum, std dev, count))\r

        \             
 avg - calculates the average of all the
        data point values in the entire down sampling bucket with quality value
        as Uncertain (the default Minimum Quality parameter is considered).
        Quality aggregation returns as Uncertain if there are samples with
        quality as Uncertain or Bad in the down sampling window. For example, if
        a down sample bucket consists of the series {2 good}, {6 uncertain}, {1
        bad}, {7 good}, the avg aggregator returns {5 Uncertain}. 

        count - returns the number of data point values stored in a series or a
        range with quality as Uncertain (the default Minimum Quality parameter
        is considered). Quality aggregation returns as Uncertain if there are
        samples with quality as Uncertain or Bad in the down sampling window.
        For example, if a down sample bucket consists of the series {2 good}, {6
        good}, {1 bad}, {7 bad}, the count aggregator returns {2 uncertain}.
        
 first - returns the first data point value from the down
        sampling interval. Quality aggregation is not done in this case. For
        example, if a down sample bucket consists of the series {2 bad}, {6
        good}, {1 uncertain}, {7 good}, the first aggregator returns {2 bad}.
        
 last - returns the last data point value from the down
        sampling interval. Quality aggregation is not done in this case. For
        example, if a down sample bucket consists of the series {2 bad}, {6
        good}, {1 uncertain}, {7 good}, the last aggregator returns {7 good}.
        
 max - returns the largest data point value from a time span
        range. If there are bad values (in the sampled data), the next good
        value is considered for aggregation. Time and quality aggregation in
        this case is Uncertain. For example, if a down sample bucket consists of
        the series {2 bad}, {6 good}, {1 uncertain}, {7 good}, the max
        aggregator returns {7 Uncertain}. 
 min - returns the smallest
        data point value from  a time series or  atime span range. If there are
        any bad values (in the sampled data), the next good value is considered
        for aggregation. Time and quality aggregation in this case is Uncertain.
        For example, if a down sample bucket consists of the series {2 bad}, {6
        good}, {1 bad}, {7 good}, the min aggregator returns {6 uncertain}.
        
 stddev - calculates standard deviation of all the data point
        values in the down sampling bucket with quality as Uncertain (the
        default Minimum Quality parameter is considered).Quality aggregation
        returns Uncertain if there are samples with Quality parameter as
        Uncertain or Bad in a down sampling window. For example, if a down
        sample bucket consists of the series {2 bad}, {6 good}, {1 bad}, {7
        good}, the stddev aggregator returns {0.7071067811865 uncertain}.
        Standard deviation requires at least two points in a down sampling
        bucket. If a down sampling bucket consists of only one point, the stddev
        aggregator returns 0. 
"
      operationId: TimeseriesPointHistory_TimeseriesSummaryV2Query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataPointTSDBSummaryRequest"
          text/json:
            schema:
              $ref: "#/components/schemas/DataPointTSDBSummaryRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/DataPointTSDBSummaryRequest"
          text/xml:
            schema:
              $ref: "#/components/schemas/DataPointTSDBSummaryRequest"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/DataPointTSDBSummaryRequest"
        description: The query parameters include SystemGuid, Point Ids, Start/End Time
          with Summary Aggregation function, and down sampling time bucket.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
            text/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
            text/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DPSResponse"
        "400":
          description: Bad Request-Invalid parameters
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
        "501":
          description: NotImplemented-Fast TSDB feature is not available
      deprecated: false
servers:
  - url: http://localhost
components:
  requestBodies:
    ElementOntology_UpdateIsRelatedToRelationshipCoreobjectids:
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
        text/json:
          schema:
            type: array
            items:
              type: string
        application/xml:
          schema:
            type: array
            items:
              type: string
        text/xml:
          schema:
            type: array
            items:
              type: string
        application/x-www-form-urlencoded:
          schema:
            type: array
            items:
              type: string
      description: Collection of object ids that will replace the existing IsRelatedTo
        collection
      required: true
    OrganizationOntology_UpdateIsTechnicianForRelationshipCoreobjectids:
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
        text/json:
          schema:
            type: array
            items:
              type: string
        application/xml:
          schema:
            type: array
            items:
              type: string
        text/xml:
          schema:
            type: array
            items:
              type: string
        application/x-www-form-urlencoded:
          schema:
            type: array
            items:
              type: string
      description: Collection of object ids that will replace the existing IsTechnicianFor
        collection of the actor.
      required: true
    ElementOntology_UpdateHasClassificationTagsHasclassificationtags:
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
        text/json:
          schema:
            type: array
            items:
              type: string
        application/xml:
          schema:
            type: array
            items:
              type: string
        text/xml:
          schema:
            type: array
            items:
              type: string
        application/x-www-form-urlencoded:
          schema:
            type: array
            items:
              type: string
      description: Collection of the Classification tags that will overwrite the current one
      required: true
    ElementOntology_UpdatePropertyLabelNewlabelvalue:
      content:
        application/json:
          schema:
            type: string
        text/json:
          schema:
            type: string
        application/xml:
          schema:
            type: string
        text/xml:
          schema:
            type: string
        application/x-www-form-urlencoded:
          schema:
            type: string
      description: Label value to be updated in the property of the ontology object.
      required: true
    OrganizationOntology_UpdateIsOwnerOfRelationshipCoreobjectids:
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
        text/json:
          schema:
            type: array
            items:
              type: string
        application/xml:
          schema:
            type: array
            items:
              type: string
        text/xml:
          schema:
            type: array
            items:
              type: string
        application/x-www-form-urlencoded:
          schema:
            type: array
            items:
              type: string
      description: Collection of object ids that will replace the existing IsOwnerOf
        collection of the actor.
      required: true
    ElementOntology_UpdateLabelNewlabelvalue:
      content:
        application/json:
          schema:
            type: string
        text/json:
          schema:
            type: string
        application/xml:
          schema:
            type: string
        text/xml:
          schema:
            type: string
        application/x-www-form-urlencoded:
          schema:
            type: string
      description: Label value to be updated in the ontology object.
      required: true
    Element_GetCloudPlatformGatewayBatchStatusV2Productids:
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
        text/json:
          schema:
            type: array
            items:
              type: string
        application/xml:
          schema:
            type: array
            items:
              type: string
        text/xml:
          schema:
            type: array
            items:
              type: string
        application/x-www-form-urlencoded:
          schema:
            type: array
            items:
              type: string
      required: true
    ElementOntology_UpdateCommentNewcommentvalue:
      content:
        application/json:
          schema:
            type: string
        text/json:
          schema:
            type: string
        application/xml:
          schema:
            type: string
        text/xml:
          schema:
            type: string
        application/x-www-form-urlencoded:
          schema:
            type: string
      description: Comment value to be updated in the ontology object.
      required: true
    ElementOntology_UpdatePropertyIsDescribedByUnitNewisdescribedbyunitvalue:
      content:
        application/json:
          schema:
            type: string
        text/json:
          schema:
            type: string
        application/xml:
          schema:
            type: string
        text/xml:
          schema:
            type: string
        application/x-www-form-urlencoded:
          schema:
            type: string
      description: IsDescribedByUnit value to be updated in the property of the ontology
        object.
      required: true
    WebApiCustomLiteralItemArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiCustomLiteralItem"
        text/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiCustomLiteralItem"
        application/xml:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiCustomLiteralItem"
        text/xml:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiCustomLiteralItem"
        application/x-www-form-urlencoded:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiCustomLiteralItem"
      description: Collection of the custom literals that will overwrite the current one
      required: true
    WebApiCustomLiteralItemArray2:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiCustomLiteralItem"
        text/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiCustomLiteralItem"
        application/xml:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiCustomLiteralItem"
        text/xml:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiCustomLiteralItem"
        application/x-www-form-urlencoded:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiCustomLiteralItem"
      description: Collection of the property custom literals that will overwrite the
        current one.
      required: true
    WebApiCorePropertyRole:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WebApiCorePropertyRole"
        text/json:
          schema:
            $ref: "#/components/schemas/WebApiCorePropertyRole"
        application/xml:
          schema:
            $ref: "#/components/schemas/WebApiCorePropertyRole"
        text/xml:
          schema:
            $ref: "#/components/schemas/WebApiCorePropertyRole"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/WebApiCorePropertyRole"
      description: Property role to be updated in the ontology object.
      required: true
    WebApiCoreProperty:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WebApiCoreProperty"
        text/json:
          schema:
            $ref: "#/components/schemas/WebApiCoreProperty"
        application/xml:
          schema:
            $ref: "#/components/schemas/WebApiCoreProperty"
        text/xml:
          schema:
            $ref: "#/components/schemas/WebApiCoreProperty"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/WebApiCoreProperty"
      description: New property object that will be added to the ontology object.
      required: true
    WebApiCoreProperty2:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WebApiCoreProperty"
        text/json:
          schema:
            $ref: "#/components/schemas/WebApiCoreProperty"
        application/xml:
          schema:
            $ref: "#/components/schemas/WebApiCoreProperty"
        text/xml:
          schema:
            $ref: "#/components/schemas/WebApiCoreProperty"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/WebApiCoreProperty"
      description: Full property to be updated in the ontology object.
      required: true
    ElementOntology_UpdatePropertyHasClassficationTagsHasclassificationtags:
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
        text/json:
          schema:
            type: array
            items:
              type: string
        application/xml:
          schema:
            type: array
            items:
              type: string
        text/xml:
          schema:
            type: array
            items:
              type: string
        application/x-www-form-urlencoded:
          schema:
            type: array
            items:
              type: string
      description: Collection of the property classification tags that will overwrite the
        current one.
      required: true
    WebApiStorageRetentionPolicyArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiStorageRetentionPolicy"
        text/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiStorageRetentionPolicy"
        application/xml:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiStorageRetentionPolicy"
        text/xml:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiStorageRetentionPolicy"
        application/x-www-form-urlencoded:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/WebApiStorageRetentionPolicy"
      description: Collection of Storage Retention Policy that will overwrite the current
        one
      required: true
    OrganizationOntology_UpdateIsHvacTechnicianForRelationshipCoreobjectids:
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
        text/json:
          schema:
            type: array
            items:
              type: string
        application/xml:
          schema:
            type: array
            items:
              type: string
        text/xml:
          schema:
            type: array
            items:
              type: string
        application/x-www-form-urlencoded:
          schema:
            type: array
            items:
              type: string
      description: Collection of object ids that will replace the existing
        IsHvacTechnicianFor collection of the actor.
      required: true
    OrganizationOntology_UpdateIsInstallerRelationshipCoreobjectids:
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
        text/json:
          schema:
            type: array
            items:
              type: string
        application/xml:
          schema:
            type: array
            items:
              type: string
        text/xml:
          schema:
            type: array
            items:
              type: string
        application/x-www-form-urlencoded:
          schema:
            type: array
            items:
              type: string
      description: Collection of object ids that will replace the existing IsInstaller
        collection of the actor.
      required: true
    WebApiPointHistoryRemovePointsRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WebApiPointHistoryRemovePointsRequest"
        text/json:
          schema:
            $ref: "#/components/schemas/WebApiPointHistoryRemovePointsRequest"
        application/xml:
          schema:
            $ref: "#/components/schemas/WebApiPointHistoryRemovePointsRequest"
        text/xml:
          schema:
            $ref: "#/components/schemas/WebApiPointHistoryRemovePointsRequest"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/WebApiPointHistoryRemovePointsRequest"
      required: true
    WebApiPointHistoryReplacePointValuesRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WebApiPointHistoryReplacePointValuesRequest"
        text/json:
          schema:
            $ref: "#/components/schemas/WebApiPointHistoryReplacePointValuesRequest"
        application/xml:
          schema:
            $ref: "#/components/schemas/WebApiPointHistoryReplacePointValuesRequest"
        text/xml:
          schema:
            $ref: "#/components/schemas/WebApiPointHistoryReplacePointValuesRequest"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/WebApiPointHistoryReplacePointValuesRequest"
      required: true
    WebApiSystemCommandRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WebApiSystemCommandRequest"
        text/json:
          schema:
            $ref: "#/components/schemas/WebApiSystemCommandRequest"
        application/xml:
          schema:
            $ref: "#/components/schemas/WebApiSystemCommandRequest"
        text/xml:
          schema:
            $ref: "#/components/schemas/WebApiSystemCommandRequest"
        application/x-www-form-urlencoded:
          schema:
            $ref: "#/components/schemas/WebApiSystemCommandRequest"
      description: Command which needs to be sent to the targeted system
      required: true
  schemas:
    WebApiAlarmAckResponse:
      required:
        - IsSuccessful
        - Message
      type: object
      properties:
        IsSuccessful:
          type: boolean
        Message:
          type: string
    WebApiAlarmConfigApplicableConfigSets:
      required:
        - ProductId
        - FaultRuleId
        - PropertySets
      type: object
      properties:
        ProductId:
          description: Product ID for which the alarm has to be configured
          type: string
        FaultRuleId:
          description: Fault Rule ID
          type: string
        PropertySets:
          description: PropertySets of the alarm configuration
          type: array
          items:
            $ref: "#/components/schemas/WebApiAlarmConfigSet"
    WebApiAlarmConfigSet:
      required:
        - Id
        - Parameters
      type: object
      properties:
        Id:
          description: PropertySet ID
          type: string
        Parameters:
          description: Alarm configuration Parameters
          type: array
          items:
            $ref: "#/components/schemas/WebApiAlarmConfigParameter"
    WebApiAlarmConfigParameter:
      required:
        - Name
        - DefaultValue
        - MinValue
        - MaxValue
      type: object
      properties:
        Name:
          description: Configuration Name
          type: string
        DefaultValue:
          format: double
          description: Configuration Default Value
          type: number
        MinValue:
          format: double
          description: Configuration Min Value
          type: number
        MaxValue:
          format: double
          description: Configuration Max Value
          type: number
    WebApiCreateAlarmConfig:
      required:
        - FaultRuleId
        - PropertySetId
        - ParameterValues
      type: object
      properties:
        FaultRuleId:
          description: Fault Rule ID
          type: string
        PropertySetId:
          description: Property Set ID
          type: string
        EnableConfig:
          description: Enable or disable alarm configuration.  Set true to enable alarm
            processing else false. By default config will be enabled
          type: boolean
        ParameterValues:
          description: Alarm configuration Parameter Values
          type: array
          items:
            $ref: "#/components/schemas/WebApiAlarmConfigParameterValue"
    WebApiAlarmConfigParameterValue:
      required:
        - Name
        - Value
      type: object
      properties:
        Name:
          description: Configuration Name
          type: string
        Value:
          format: double
          description: Configuration Value
          type: number
    WebApiAlarmConfigDetail:
      required:
        - AlarmConfigId
        - ProductId
        - IsEnabled
        - FaultRuleId
        - PropertySetId
        - ParameterValues
      type: object
      properties:
        AlarmConfigId:
          description: Alarm configuration ID must be GUID
          type: string
        ProductId:
          description: ProductId for which alarm configuration is created
          type: string
        IsEnabled:
          description: Indicates that alarm configuration is enabled.
          type: boolean
        FaultRuleId:
          description: Fault Rule ID used in the configuration
          type: string
        PropertySetId:
          description: Property set ID for the fault rule
          type: string
        ParameterValues:
          description: Alarm configuration values
          type: array
          items:
            $ref: "#/components/schemas/WebApiAlarmConfigParameterValue"
    WebApiAlarmConfigDeleteStatus:
      required:
        - AlarmConfigurationId
        - IsDeleted
      type: object
      properties:
        AlarmConfigurationId:
          description: Alarm configuration ID deleted
          type: string
        IsDeleted:
          description: Status of the alarm configuration delete
          type: boolean
    WebApiAlarmConfigEnable:
      required:
        - EnableAlarmProcessing
      type: object
      properties:
        EnableAlarmProcessing:
          description: Enable or disable alarm configuration.  Set true to enable alarm
            processing else false
          type: boolean
    WebApiAlarmConfigEnableResponse:
      required:
        - AlarmConfigurationEnabled
      type: object
      properties:
        AlarmConfigurationEnabled:
          description: Enable or disable alarm configuration.  Set true to enable alarm
            processing else false
          type: boolean
    WebApiAlarmConfigEnableRequest:
      required:
        - AlarmConfigId
        - Enabled
      type: object
      properties:
        AlarmConfigId:
          description: Alarm configuration ID to be enabled or disabled.
          type: string
        Enabled:
          description: Alarm Configuration enabled status. Set value as true to enable
            alarm processing else false.
          type: boolean
    WebApiAlarmBatchEnableConfigResponse:
      type: object
      properties:
        IsBatchEnableConfigSuccess:
          description: TRUE when all the alarm configuration IDs in batch are configured
            successfully and FALSE if at least one fails
          type: boolean
        AlarmEnableConfigResults:
          description: Sets of the results for all the alarm configs.
          type: array
          items:
            $ref: "#/components/schemas/SingleAlarmEnableConfigResult"
    SingleAlarmEnableConfigResult:
      type: object
      properties:
        IsConfigSuccess:
          description: TRUE if alarm enable/disable config for current alarm configuration
            ID is successful, else false
          type: boolean
        AlarmConfigId:
          description: Current alarm configuration ID
          type: string
        ErrorMessage:
          description: Error message
          type: string
    WebApiAlarmConfigParametersResponse:
      type: object
      properties:
        ParameterValues:
          description: Alarm configuration parameter values.
          type: array
          items:
            $ref: "#/components/schemas/WebApiAlarmConfigParameterValue"
    WebApiUpdateAlarmConfig:
      required:
        - ParameterValues
      type: object
      properties:
        ParameterValues:
          description: Alarm configuration Parameter Values
          type: array
          items:
            $ref: "#/components/schemas/WebApiAlarmConfigParameterValue"
    WebApiAnnotationStreamExt:
      type: object
      properties:
        Owner:
          description: Application AppId/User ObjectId who created the stream
          type: string
        Id:
          description: Id of AnnotationStream
          type: string
        Name:
          description: Name of AnnotationStream
          type: string
        Description:
          description: Description of AnnotationStream
          type: string
        Status:
          description: "Status of AnnotationStream, One of options:\r

            \            \"Initialized\": annotation stream is
            initialized, but not start creation\r

            \            \"InProgress\": annotation stream creation
            in progress\r

            \            \"Created\": annotation stream is created,
            ready for use. \r

            \            \"Failed\": annotation stream is failed to
            create.\r

            \            \"Disabled\": annotation stream is
            disabled, not able to receive annotations"
          type: string
        AnnotationFilters:
          description: AnnotationFilters assinged to AnnotationStream
          type: array
          items:
            $ref: "#/components/schemas/WebApiAnnotationFilter"
        ContentType:
          description: "Specify the type of the content of the annotation stream, Expected
            valures are:\r

            \            \"application/json\": The content is sent
            uncompressed, this is the default value.\r

            \            \"application/json+gzip\": The content is
            sent compressed."
          type: string
        ShouldFilteroutClassifiedData:
          description: "The flag to indicate if classified data to be removed from the
            message while sending to the stream. DataChange.Update event, this
            flag will be considered for each point value that is being sent and
            for other types of messages it will considered at the event level.\r

            \            null: will take as default value-
            False;  False: default value, No filtering will be
            done, all the events and contents will be sent as is;
            True: Event or values will be searched for the required
            classification and removed; "
          type: boolean
        ClassificationNamespacesToFilter:
          description: List of classification namespaces to be filtered out before sending
            the message. This value will be considered only if
            ShouldFilteroutClassifiedData is set to true. Values could be PII,
            PHI etc
          type: array
          items:
            type: string
    WebApiAnnotationFilter:
      type: object
      properties:
        Id:
          type: string
        AnnotationType:
          type: string
        SourceType:
          type: string
        SourceInstances:
          type: array
          items:
            type: string
        Name:
          type: string
        Description:
          type: string
        AnnotationFilterElement:
          $ref: "#/components/schemas/WebApiAnnotationFilterElement"
    WebApiAnnotationFilterElement:
      type: object
      properties:
        SimpleFilter:
          $ref: "#/components/schemas/WebApiSimpleFilter"
        CombinationFilter:
          $ref: "#/components/schemas/WebApiCombinationFilter"
    WebApiSimpleFilter:
      type: object
      properties:
        Property:
          description: The property on which the filter is to be applied on
          type: string
        Operator:
          description: The operator which is to be used in the filter
          type: string
        Values:
          description: The values to which the filter is to be applied on. If any of the
            value is NULL, filter will not be matched.
          type: array
          items:
            $ref: "#/components/schemas/Object"
    WebApiCombinationFilter:
      type: object
      properties:
        AnnotationFilterElements:
          description: The filter element which holds the complex filters
          type: array
          items:
            $ref: "#/components/schemas/WebApiAnnotationFilterElement"
        Operator:
          description: The operator to be applied on the complex filters
          type: string
    Object:
      type: object
      properties:
        {}
    WebApiCleanResult:
      type: object
      properties:
        CleanedCount:
          format: int32
          type: integer
    WebApiAnnotationEventPublishRequest:
      description: The request object which holds the list of events to be published via
        annotation
      required:
        - AnnotationEvents
      type: object
      properties:
        AnnotationEvents:
          description: List of annotation events to be published
          type: array
          items:
            $ref: "#/components/schemas/AnnotationEvent"
        EnableDataChangeUpdateEventsPersistance:
          description: "The flag to indicate if DataChange.Update event has to be
            persisted.\r

            \            False: default value, Event will only
            be published; True: Event will be persisted and also
            published; "
          type: boolean
    AnnotationEvent:
      description: Event details to be published via annotation
      required:
        - CreatedTime
        - EventId
        - CreatorId
        - CreatorType
        - GeneratorId
        - GeneratorType
        - TargetId
        - EventType
      type: object
      properties:
        CreatedTime:
          format: date-time
          description: Time at which the event was created
          type: string
        EventId:
          description: Unique id of the event
          type: string
        CreatorId:
          description: "The systemGuid of the system which is publishing the event\r

            \            Format:[xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx\
            xx]\r

            \            Note: This id should match the systemGuid
            passed in the route"
          type: string
        CreatorType:
          description: The type of the entity to which the event is related to (Supported
            values are SystemType and System)
          type: string
        GeneratorId:
          description: This identifies the caller of this API who is raising the event on
            behalf of the system
          type: string
        GeneratorType:
          description: Type of the component from where the event is generated from
          type: string
        TargetId:
          description: Reference or link to the entity this event relates to
          type: string
        TargetType:
          description: Type of the entity that this event relates to
          type: string
        TargetContext:
          description: Optional context information for the target
          type: string
        Body:
          $ref: "#/components/schemas/Body"
        BodyProperties:
          description: Any additional properties of event
          type: array
          items:
            $ref: "#/components/schemas/BodyProperty"
        EventType:
          description: Type of the event
          type: string
    Body:
      description: Body of the event
      type: object
      properties:
        Type:
          description: DataType of the body (Ex:- TextualBody)
          type: string
        Value:
          description: Content of the body
          type: string
        Format:
          description: Format of the body (Supported Types are text/html, application/json)
          type: string
    BodyProperty:
      description: Additional properties of the event
      type: object
      properties:
        Key:
          description: Property key
          type: string
        Value:
          description: Property value
          type: string
    WebApiAnnotationEventPublishResponse:
      description: Response returned from the API after publishing the event
      type: object
      properties:
        EventId:
          description: Ids of the events which are published
          type: array
          items:
            type: string
        Status:
          format: int32
          description: Status of the event publish operation
          enum:
            - 0
            - 1
            - 2
          type: integer
        StatusMessage:
          description: Any specific message to be returned to the caller
          type: string
    WebApiAnnotationStreamCreateRequest:
      required:
        - Name
        - Description
      type: object
      properties:
        Name:
          description: Name of the stream to be created
          type: string
        Description:
          description: Description of the stream to be created
          type: string
        SasConnectionString:
          description: SaS connection string with send permissions
          type: string
        WebApiAnnotationPublishMode:
          format: int32
          description: Channel through which annotations has to be published. Possible
            values (1=Topic,2=EventHub)
          enum:
            - 0
            - 1
          type: integer
        SetPartitionKey:
          description: "The flag to indicate Messages sent to event hub with PartitionKey
            set or not. \r

            \            null: will take as default value-
            True;  True: default value, with PartitionKey set,
            partitionkey could be SystemGuid or ModelId; False:
            withtout partitionKey set; "
          type: boolean
        ContentType:
          description: "The content type indicates how the information will be sent,
            whether must compressed or not. If the content type is not
            specified, the default value will be used as: application/json.  \r

            \            \"application/json\": The content is
            sent uncompressed, this is the default
            value;  \"application/json+gzip\": The content is sent
            compressed;  "
          type: string
        ShouldFilteroutClassifiedData:
          description: "The flag to indicate if classified data to be removed from the
            message while sending to the stream. DataChange.Update event, this
            flag will be considered for each point value that is being sent and
            for other types of messages it will considered at the event level.\r

            \            null: will take as default value-
            False;  False: default value, No filtering will be
            done, all the events and contents will be sent as is;
            True: Event or values will be searched for the required
            classification and removed; "
          type: boolean
        ClassificationNamespacesToFilter:
          description: List of classification namespaces to be filtered out before sending
            the message. This value will be considered only if
            ShouldFilteroutClassifiedData is set to true. Values could be PII,
            PHI etc
          type: array
          items:
            type: string
    WebApiAnnotationStreamCreationRequest:
      required:
        - Name
        - Description
        - ConnectionDetails
      type: object
      properties:
        Name:
          description: Name of Annotation Stream
          type: string
        Description:
          description: Description of the stream to be created
          type: string
        ConnectionDetails:
          $ref: "#/components/schemas/WebApiAnnotationStreamConnectionDetails"
        ShouldFilteroutClassifiedData:
          description: "The flag to indicate if classified data to be removed from the
            message while sending to the stream. DataChange.Update event, this
            flag will be considered for each point value that is being sent and
            for other types of messages it will considered at the event level.\r

            \            null: will take as default value-
            False;  False: default value, No filtering will be
            done, all the events and contents will be sent as is;
            True: Event or values will be searched for the required
            classification and removed; "
          type: boolean
        ClassificationNamespacesToFilter:
          description: List of classification namespaces to be filtered out before sending
            the message. This value will be considered only if
            ShouldFilteroutClassifiedData is set to true. Values could be PII,
            PHI etc
          type: array
          items:
            type: string
    WebApiAnnotationStreamConnectionDetails:
      required:
        - ServerType
        - Host
        - CredentialType
        - CredentialDetails
        - ConnectionDetails
      type: object
      properties:
        ServerType:
          description: "Sepcify type of messaging entity to receive annotations\r

            \            Options:\r

            \                    AzureEventHub:send annotations to
            Azure Event Hub \r

            \                    AzureServiceBusTopic:send
            annotations to Azure Service Bus Topic,\r

            \                    Kafka(Not supported yet)"
          type: string
        Host:
          description: Specify the remote Host name of a ServerType. This is a URI. eg.
            sb://myservicebus.servicebus.windows.net/ for AzureEventHub
            ServerType
          type: string
        CredentialType:
          description: "Specify type of credentail to access host. \r

            \            Available Options:\r

            \               SharedAccessKey: Shared Access Key with
            send permission, \r

            \               SasToken: Sas Token with send
            permission(Not supported yet), \r

            \               Certificate: Certificate with send
            permission(Not supported yet)"
          type: string
        CredentialDetails:
          description: "Specify the credential details(based on CredentialType) to
            authenticate a client trying to access a remote Host\r

            \            Available Settings: settings are different
            on CredentialType specified:\r

            \            At moment as only support Basic
            credentialType,\r

            \            So the settings are Username and Password\r

            \            Username:Id of credential used for sending
            message to ServerType, \r

            \                     eg, for AzureEventHub, Username is
            the name of Policy with send permission.\r

            \            Password:Key of credential used for sending
            message to ServerType, \r

            \                     eg, for AzureEventHub, Password is
            the key of Policy with send permission."
          type: object
          additionalProperties:
            type: string
        ConnectionDetails:
          description: "Specify additional details to connect to Host for message sending\r

            \            Options:\r

            \               Path: the path to the host, based on
            ServerType:\r

            \                     For AzureServiceBusTopic, Path is
            Topic name\r

            \                     For AzureEventHub, Path is
            EventHub name,   \r

            \                     For Kafka, Path is Topic name"
          type: object
          additionalProperties:
            type: string
        StreamSettings:
          description: "StreamSettings contains additional configurations to be applied to
            the stream\r

            \            Available settings: Compressed,
            SetPartitionKey\r

            \            Compressed: True-will send annotation out
            compressed, \r

            \                        False-will sent out
            uncompressed, \r

            \                        if custom application does not
            specify the value, cloud platform will set value to False.\r

            \            SetPartitionKey: The flag to indicate
            messages sent to ServerType(Eg. AzureEventHub) with PartitionKey set
            or not. \r

            \                        True-default value, with
            PartitionKey set, partitionkey could be a SystemGuid or ModelId;, \r

            \                        False-without partitionKey
            set;\r

            \                        if custom application does not
            specify the value, cloud platform will set value to True."
          type: object
          additionalProperties:
            type: string
    WebApiAnnotationStreamCreationResponse:
      type: object
      properties:
        Id:
          description: Id of Annotation Stream
          type: string
        Name:
          description: Name of Annotation Stream
          type: string
        Description:
          description: Description of Annotation Stream
          type: string
    WebApiAnnotationStreamClassificationNamespaceUpdateRequest:
      type: object
      properties:
        ShouldFilteroutClassifiedData:
          description: "The flag to indicate if classified data is to be removed from the
            message while sending to the stream. DataChange.Update event, this
            flag will be considered for each point value that is being sent and
            for other types of messages it will considered at the event level.\r

            \            False: default value, No filtering
            will be done, all the events and contents will be sent as is;
            True: Event or values will be searched for the required
            classification and removed; "
          type: boolean
        ClassificationNamespacesToFilter:
          description: List of classification namespaces to be filtered out before sending
            the message. This value will be considered only if
            ShouldFilteroutClassifiedData is set to true. This will OVERRIDE the
            already existing namespaces. Values could be PII, PHI etc
          type: array
          items:
            type: string
    WebApiAnnotationStreamSasConnectionStringUpdateRequest:
      type: object
      properties:
        SasConnectionString:
          description: SaS connection string with send permissions
          type: string
    WebApiAnnotationStreamSetPartitionKeyUpdateRequest:
      type: object
      properties:
        SetPartitionKey:
          description: "The flag to indicate Messages sent to event hub with PartitionKey
            set or not(case-insensitive).  \r

            \            True: with PartitionKey set,
            partitionkey could be SystemGuid or ModelId;  False:
            without partitionKey set; message will be sent to partitions of an
            event hub;  "
          type: boolean
    WebApiAnnotationFilterCreateRequest:
      required:
        - AnnotationType
        - SourceType
        - AnnotationFilterElement
      type: object
      properties:
        AnnotationType:
          description: The type of the annotation:Event or Alarm
          type: string
        SourceType:
          description: "The type of source: System, Model, SystemType, Tenant"
          type: string
        SourceInstances:
          description: "The instances on to which the annotations are to be created\r

            \            SourceType:System ,
            SourceInstances:Required , Values: SystemGuid(s),\r

            \            SourceType:Model, SourceInstances:Required
            , Values: ModelId(s),\r

            \            SourceType:SystemType,
            SourceInstances:Required , Values: SystemType(s),\r

            \            SourceType:Tenant, SourceInstances:Not
            Required"
          type: array
          items:
            type: string
        Name:
          description: Name of the annotation filter to be created
          type: string
        Description:
          description: Description of the annotation filter to be created
          type: string
        AnnotationFilterElement:
          $ref: "#/components/schemas/WebApiAnnotationFilterElement"
    WebApiAnnotationStream:
      type: object
      properties:
        Id:
          description: Id of AnnotationStream
          type: string
        Name:
          description: Name of AnnotationStream
          type: string
        Description:
          description: Description of AnnotationStream
          type: string
        Status:
          description: "Status of AnnotationStream, One of options:\r

            \            \"Initialized\": annotation stream is
            initialized, but not start creation\r

            \            \"InProgress\": annotation stream creation
            in progress\r

            \            \"Created\": annotation stream is created,
            ready for use. \r

            \            \"Failed\": annotation stream is failed to
            create.\r

            \            \"Disabled\": annotation stream is
            disabled, not able to receive annotations"
          type: string
        AnnotationFilters:
          description: AnnotationFilters assinged to AnnotationStream
          type: array
          items:
            $ref: "#/components/schemas/WebApiAnnotationFilter"
        ContentType:
          description: "Specify the type of the content of the annotation stream, Expected
            valures are:\r

            \            \"application/json\": The content is sent
            uncompressed, this is the default value.\r

            \            \"application/json+gzip\": The content is
            sent compressed."
          type: string
        ShouldFilteroutClassifiedData:
          description: "The flag to indicate if classified data to be removed from the
            message while sending to the stream. DataChange.Update event, this
            flag will be considered for each point value that is being sent and
            for other types of messages it will considered at the event level.\r

            \            null: will take as default value-
            False;  False: default value, No filtering will be
            done, all the events and contents will be sent as is;
            True: Event or values will be searched for the required
            classification and removed; "
          type: boolean
        ClassificationNamespacesToFilter:
          description: List of classification namespaces to be filtered out before sending
            the message. This value will be considered only if
            ShouldFilteroutClassifiedData is set to true. Values could be PII,
            PHI etc
          type: array
          items:
            type: string
    WebApiSourceInstancesAddRequest:
      required:
        - SourceType
        - SourceInstances
      type: object
      properties:
        SourceType:
          description: "The type of Source: System/Model/SystemType"
          type: string
        SourceInstances:
          description: "The instances of Source to be added:
            SystemGuids/ModelIds/SystemTypes based on SourceType"
          type: array
          items:
            type: string
    WebApiAnnotationStreamSubscription:
      type: object
      properties:
        Token:
          description: SasToken of the service bus subscription, which the consumer could
            listen to recieve the events
          type: string
        Uri:
          description: Uri of the service bus
          type: string
        TopicName:
          description: The service bus topic name, in which the subscription is created
          type: string
        SubscriptionName:
          description: The topic-subscription name, which the consumer could start
            listening to, to recieve the events
          type: string
        ContentType:
          description: The content type of the data that will be send
          type: string
          readOnly: true
    WebApiAssetRegistryGraphQLRequest:
      required:
        - Query
      type: object
      properties:
        OperationName:
          description: Operation name inside the query to be executed
          type: string
        NamedQuery:
          description: Name of supported query.
          type: string
        Query:
          description: A GraphQL to be executed
          type: string
        Variables:
          description: A JSON-enconded object containing the variables for the query
          type: string
    WebApiAssetRegistryGraphQLResponse:
      type: object
      properties:
        errors:
          description: "Gets the GraphQL query execution errors.\r

            \            http://facebook.github.io/graphql/October2\
            016/#sec-Errors"
          type: array
          items:
            $ref: "#/components/schemas/WebApiAssetRegistryGraphQLError"
        data:
          $ref: "#/components/schemas/Object"
    WebApiAssetRegistryGraphQLError:
      type: object
      properties:
        locations:
          type: array
          items:
            $ref: "#/components/schemas/WebApiAssetRegistryGraphQLErrorLocation"
        message:
          type: string
    WebApiAssetRegistryGraphQLErrorLocation:
      type: object
      properties:
        line:
          format: int32
          description: Gets the line where the error was found within the query
          type: integer
        column:
          format: int32
          description: Gets the column where the error was found within the query
          type: integer
    WebApiAssetRegistryGraphQLPostRequest:
      required:
        - Query
      type: object
      properties:
        OperationName:
          description: Operation name inside the query to be executed
          type: string
        NamedQuery:
          description: Name of supported query.
          type: string
        Query:
          description: A GraphQL to be executed
          type: string
        Variables:
          description: A JSON-enconded object containing the variables for the query
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Object"
    PointHistorySummaryQueryParams:
      required:
        - SampleInterval
        - StartTime
        - EndTime
        - PointIds
      type: object
      properties:
        SampleInterval:
          format: int32
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
          type: integer
        SystemGuid:
          type: string
        StartTime:
          format: date-time
          type: string
        EndTime:
          format: date-time
          type: string
        PointIds:
          type: array
          items:
            type: string
        IsStartDateTimeInclusive:
          type: boolean
        IsEndDateTimeInclusive:
          type: boolean
    PointHistorySampleSummary:
      required:
        - ItemId
        - StartDate
        - EndDate
        - Min
        - Max
        - Avg
      type: object
      properties:
        ItemId:
          type: string
        StartDate:
          format: date-time
          type: string
        EndDate:
          format: date-time
          type: string
        Min:
          format: double
          type: number
        Max:
          format: double
          type: number
        Avg:
          format: double
          type: number
    PointHistoryQueryParams:
      required:
        - StartTime
        - EndTime
        - PointIds
      type: object
      properties:
        SystemGuid:
          type: string
        StartTime:
          format: date-time
          type: string
        EndTime:
          format: date-time
          type: string
        PointIds:
          type: array
          items:
            type: string
        IsStartDateTimeInclusive:
          type: boolean
        IsEndDateTimeInclusive:
          type: boolean
    PointHistorySample:
      type: object
      properties:
        SystemGuid:
          type: string
        SampleTime:
          format: date-time
          type: string
        ItemId:
          type: string
        ItemDoubleValue:
          format: double
          type: number
        ItemStringValue:
          type: string
        ItemQuality:
          type: string
    DataPointTSDBIntervalRequest:
      required:
        - startTime
        - endTime
        - queries
      type: object
      properties:
        startTime:
          format: date-time
          description: Starting time for the data access query.
          type: string
        endTime:
          format: date-time
          description: Ending time for the data access query.
          type: string
        queries:
          type: array
          items:
            $ref: "#/components/schemas/DataPointTSDBIntervalQuery"
        includeBounds:
          description: "For a true value of includeBounds: The start time and end time are
            both inclusive and all values in the interval are returned, if there
            are values present at start time and end time.If there is no value
            present in InfluxDB for the start time in the query, the last
            recorded value before the start time is queried and added to the
            beginning of the result set. If there is no value present in
            InfluxDB for the end time in the query, the last recorded value
            after the end time is queried and added to the end of the result
            set. If there are no values at start time and end time, both steps
            are executed parallelly.\r

            \            For a false value of inclueBounds: Start
            time is inclusive and end time in exclusive.All values in the
            interval are returned, regardless whether a value is present at
            start time or not."
          type: boolean
    DataPointTSDBIntervalQuery:
      required:
        - pointId
      type: object
      properties:
        pointId:
          description: Used to uniquely identify a point on a controller under a
            System/Gateway. This is case-sensitive
          type: string
        systemGuid:
          description: Indicate SystemGuid given by Cloud Platform to System (Gateway) as
            part of Gateway registration.
          type: string
        pointAttributes:
          $ref: "#/components/schemas/Object"
    DPSResponse:
      type: object
      properties:
        pointId:
          type: string
        pointValues:
          $ref: "#/components/schemas/Object"
        pointAttributes:
          $ref: "#/components/schemas/Object"
    WebApiBulkUploadRequest:
      type: object
      properties:
        ErrorHandling:
          description: Gets or sets the error handling for the update process
          type: string
    WebApiBulkUploadCreateResponse:
      type: object
      properties:
        RequestId:
          type: string
        UploadExpiration:
          format: date-time
          type: string
        UploadUrl:
          type: string
        UploadUrlType:
          type: string
    WebApiBulkUploadRequestStatusResponse:
      type: object
      properties:
        Status:
          type: string
        Progress:
          format: int32
          type: integer
        BatchFileDownload:
          type: string
        UploadCompletedTime:
          type: string
        ProcessingCompletedTime:
          type: string
        ExpirationTime:
          format: date-time
          type: string
        Errors:
          type: array
          items:
            $ref: "#/components/schemas/WebApiBulkUploadError"
        ErrorHandling:
          type: string
    WebApiBulkUploadError:
      type: object
      properties:
        Index:
          format: int32
          type: integer
        Line:
          format: int32
          type: integer
        Column:
          format: int32
          type: integer
        Action:
          type: string
        Type:
          type: string
        Id:
          type: string
        ErrorMessages:
          type: array
          items:
            type: string
        Errors:
          type: array
          items:
            $ref: "#/components/schemas/WebApiModelBulkUploadErrorItem"
    WebApiModelBulkUploadErrorItem:
      type: object
      properties:
        ErrorMessage:
          type: string
        ErrorCode:
          type: string
    WebApiConnectionRestartResponse:
      type: object
      properties:
        Response:
          type: string
    WebApiLastHeartbeatResponse:
      required:
        - SystemTime
      type: object
      properties:
        SystemTime:
          format: date-time
          type: string
    WebApiLastSystemInfoResponse:
      type: object
      properties:
        SystemTime:
          format: date-time
          type: string
        CloudConnectorVersion:
          type: string
        SystemType:
          type: string
        SystemVersion:
          type: string
    WebApiSystemStatusResponse:
      required:
        - IsOnline
        - SystemGuid
      type: object
      properties:
        IsOnline:
          type: boolean
        SystemGuid:
          type: string
    WebApiCoreElement:
      required:
        - Id
      type: object
      properties:
        ContainsElements:
          type: array
          items:
            type: string
        HasLocation:
          type: string
        SuppliesElements:
          type: array
          items:
            type: string
        SuppliesSpatialElements:
          type: array
          items:
            type: string
        CommunicatesElectricallyWithElement:
          type: array
          items:
            type: string
        IsRelatedTo:
          type: array
          items:
            type: string
        ContainsProperties:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCoreProperty"
        HasClassificationTags:
          type: array
          items:
            type: string
        HasStorageRetentionPolicies:
          type: array
          items:
            $ref: "#/components/schemas/WebApiStorageRetentionPolicy"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiCoreProperty:
      required:
        - Id
      type: object
      properties:
        HasWebApiObjectLiteralPropertyBinding:
          $ref: "#/components/schemas/WebApiObjectLiteralPropertyBinding"
        HasWebApiCloudPlatformPropertyBinding:
          $ref: "#/components/schemas/WebApiCloudPlatformPropertyBinding"
        HasWebApiWebApiPointNameParameterNamePropertyBinding:
          $ref: "#/components/schemas/WebApiPointNameParameterNamePropertyBinding"
        HasWebApiGenericPropertyBinding:
          $ref: "#/components/schemas/WebApiGenericPropertyBinding"
        HasConceptSet:
          $ref: "#/components/schemas/WebApiCoreConceptSet"
        IsDescribedByRole:
          $ref: "#/components/schemas/WebApiCorePropertyRole"
        IsDescribedByUnit:
          type: string
        HasClassificationTags:
          type: array
          items:
            type: string
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiStorageRetentionPolicy:
      type: object
      properties:
        HasStorageRetentionPolicyType:
          $ref: "#/components/schemas/WebApiStorageRetentionPolicyType"
        HasStorageRetentionPolicyDurationInDays:
          format: int32
          type: integer
    WebApiCustomLiteralItem:
      type: object
      properties:
        RelationshipUri:
          type: string
        Value:
          type: string
    WebApiObjectLiteralPropertyBinding:
      required:
        - Id
      type: object
      properties:
        ObjectLiteralRelationship:
          type: string
        HasConceptMappingSet:
          $ref: "#/components/schemas/WebApiCoreConceptMappingSet"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiCloudPlatformPropertyBinding:
      required:
        - Id
      type: object
      properties:
        PointId:
          type: string
        SystemGuid:
          type: string
        HasConceptMappingSet:
          $ref: "#/components/schemas/WebApiCoreConceptMappingSet"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiPointNameParameterNamePropertyBinding:
      required:
        - Id
      type: object
      properties:
        PointName:
          type: string
        ParameterName:
          type: string
        HasConceptMappingSet:
          $ref: "#/components/schemas/WebApiCoreConceptMappingSet"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiGenericPropertyBinding:
      required:
        - Id
      type: object
      properties:
        HasConceptMappingSet:
          $ref: "#/components/schemas/WebApiCoreConceptMappingSet"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiCoreConceptSet:
      required:
        - Id
      type: object
      properties:
        HasConcepts:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCoreConcept"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiCorePropertyRole:
      required:
        - Id
      type: object
      properties:
        HasPropertyRoleAspects:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCoreAspect"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiStorageRetentionPolicyType:
      type: object
      properties:
        Type:
          type: string
    WebApiCoreConceptMappingSet:
      required:
        - Id
      type: object
      properties:
        HasConceptMappings:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCoreConceptMapping"
        ImplementsConceptSet:
          $ref: "#/components/schemas/WebApiCoreConceptSet"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiCoreConcept:
      required:
        - Id
      type: object
      properties:
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiCoreAspect:
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
    WebApiCoreConceptMapping:
      required:
        - Id
      type: object
      properties:
        HasConceptMappingWholeValueOrdinal:
          format: int32
          type: integer
        ImplementsConcept:
          $ref: "#/components/schemas/WebApiCoreConcept"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiCloudPlatformGateway:
      required:
        - Id
      type: object
      properties:
        HasGatewaySystemGuid:
          type: string
        ContainsElements:
          type: array
          items:
            type: string
        HasLocation:
          type: string
        SuppliesElements:
          type: array
          items:
            type: string
        SuppliesSpatialElements:
          type: array
          items:
            type: string
        CommunicatesElectricallyWithElement:
          type: array
          items:
            type: string
        IsRelatedTo:
          type: array
          items:
            type: string
        ContainsProperties:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCoreProperty"
        HasClassificationTags:
          type: array
          items:
            type: string
        HasStorageRetentionPolicies:
          type: array
          items:
            $ref: "#/components/schemas/WebApiStorageRetentionPolicy"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiModelObjectRetrieveDetailLevel:
      description: This DTO is used to control how much detail is retrieved for model
        objects. If contradictory values are set, the most verbose option will
        be used.
      type: object
      properties:
        BasicInfo:
          description: Retrieve basic details like id and types
          type: boolean
        IncludePropertyBasics:
          description: Retrieve Property basic details. Set this and other property items
            to false to ignore properties.
          type: boolean
        IncludePropertyBindings:
          description: Retrieve Property Bindings. Set this and other property items to
            false to ignore properties.
          type: boolean
        IncludePropertyRoles:
          description: Retrieve Property Roles. Set this and other property items to false
            to ignore properties.
          type: boolean
        IncludeRelationships:
          description: Retrieve Relationships to other Objects. Set this and other property
            items to false to ignore properties.
          type: boolean
        AllDetails:
          description: Return all details for the object, a shortcut for setting all
            previous items to true
          type: boolean
    WebApiGatewayProductStatusResponse:
      required:
        - IsOnline
        - ProductId
      type: object
      properties:
        IsOnline:
          type: boolean
        ProductId:
          type: string
    WebApiEventStoreRemoveEventsRequest:
      required:
        - StartTime
        - EndTime
        - EventTypes
      type: object
      properties:
        StartTime:
          format: date-time
          type: string
        EndTime:
          format: date-time
          type: string
        EventTypes:
          type: array
          items:
            type: string
    WebApiEventStoreRemoveEventsResponse:
      type: object
      properties:
        TransactionId:
          type: string
    WebApiEventStoreModifyEventsRequest:
      required:
        - StartTime
        - EndTime
        - EventType
      type: object
      properties:
        StartTime:
          format: date-time
          type: string
        EndTime:
          format: date-time
          type: string
        EventType:
          type: string
        Body:
          $ref: "#/components/schemas/Body"
        BodyProperties:
          type: array
          items:
            $ref: "#/components/schemas/BodyProperty"
    WebApiEventStoreModifyEventsResponse:
      type: object
      properties:
        TransactionId:
          type: string
    WebApiModelProperties:
      type: object
      properties:
        PropertyIds:
          type: array
          items:
            type: string
    LastPropertyHistoryValue:
      type: object
      properties:
        PropertyId:
          type: string
        ItemValue:
          $ref: "#/components/schemas/Object"
        ItemQuality:
          type: string
        Timestamp:
          format: date-time
          type: string
    WebApiCoreElementQuery:
      description: Represents a query on elements
      required:
        - MatchElement
      type: object
      properties:
        MatchElement:
          $ref: "#/components/schemas/WebApiCoreElementMatch"
        DetailLevel:
          $ref: "#/components/schemas/WebApiModelObjectRetrieveDetailLevel"
    WebApiCoreElementMatch:
      description: Represents a match for an Element in a model.
      type: object
      properties:
        HasLocation:
          $ref: "#/components/schemas/WebApiCoreSpatialElementRelationship"
        CommunicatesElectricallyWithElement:
          $ref: "#/components/schemas/WebApiCoreElementRelationship"
        ContainsElements:
          $ref: "#/components/schemas/WebApiCoreElementRelationship"
        IsContainedByElement:
          $ref: "#/components/schemas/WebApiCoreElementRelationship"
        Properties:
          $ref: "#/components/schemas/WebApiCoreObjectPropertiesMatch"
        Ids:
          $ref: "#/components/schemas/WebApiOntologyResourceIdsMatch"
        Types:
          $ref: "#/components/schemas/WebApiOntologyResourceTypesMatch"
        Labels:
          $ref: "#/components/schemas/WebApiOntologyResourceLabelsMatch"
        CustomLiterals:
          $ref: "#/components/schemas/WebApiOntologyResourceCustomLiteralsMatch"
        Alias:
          description: The alias is a name given to the object in the query context. It
            will identify the object in the query context.
          type: string
    WebApiCoreSpatialElementRelationship:
      description: Represents how to match the Spatial Elements that are the targets of a
        relationship.
      required:
        - Any
      type: object
      properties:
        Any:
          $ref: "#/components/schemas/WebApiCoreSpatialElementMatch"
        Recursive:
          description: Indicates if the specified spatial elements is the target of the
            relationship, or the relationship can be traversed recursively until
            a match occurs.
          type: boolean
    WebApiCoreElementRelationship:
      description: Represents how to match the Elements that are the targets of a
        relationship.
      required:
        - Any
      type: object
      properties:
        Any:
          $ref: "#/components/schemas/WebApiCoreElementMatch"
        Recursive:
          description: Indicates if the specified element is the target of the
            relationship, or the relationship can be traversed recursively until
            a match occurs.
          type: boolean
    WebApiCoreObjectPropertiesMatch:
      description: Represents the conditions on all the properties of an object.
      required:
        - Any
      type: object
      properties:
        Any:
          description: Matches when the object has at least one property matching one of
            the conditions
          type: array
          items:
            $ref: "#/components/schemas/WebApiPropertyMatch"
    WebApiOntologyResourceIdsMatch:
      description: Represents a match for Ontology Resource ids
      required:
        - Any
      type: object
      properties:
        Any:
          description: Matches when the id of the resource belongs to the supplied set
          type: array
          items:
            type: string
    WebApiOntologyResourceTypesMatch:
      description: Represents a match for Ontology Resource types
      type: object
      properties:
        Any:
          description: Matches when any of the Ontology Resource types satisfies the
            condition
          type: array
          items:
            type: string
        All:
          description: Matches when all of the Ontology Resource types satisfy the condition
          type: array
          items:
            type: string
    WebApiOntologyResourceLabelsMatch:
      description: Represents the conditions on Ontology Resource labels
      required:
        - Any
      type: object
      properties:
        Any:
          description: Matches when any of the Ontology Resource labels satisfies the
            condition
          type: array
          items:
            type: string
    WebApiOntologyResourceCustomLiteralsMatch:
      description: Represents how to match the Custom Literals belonging to an Ontology
        Resource in a model.
      type: object
      properties:
        All:
          description: Matches when all of the Custom Literals belong to an Ontology
            Resource
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralMatch"
        Any:
          description: Matches when any of the Custom Literals belong to an Ontology
            Resource
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralMatch"
    WebApiCoreSpatialElementMatch:
      description: Represents a match for an Spatial Element in a model.
      type: object
      properties:
        ContainsLocations:
          $ref: "#/components/schemas/WebApiCoreSpatialElementRelationship"
        IsContainedByLocation:
          $ref: "#/components/schemas/WebApiCoreSpatialElementRelationship"
        IsLocationForElement:
          $ref: "#/components/schemas/WebApiCoreElementRelationship"
        Properties:
          $ref: "#/components/schemas/WebApiCoreObjectPropertiesMatch"
        Ids:
          $ref: "#/components/schemas/WebApiOntologyResourceIdsMatch"
        Types:
          $ref: "#/components/schemas/WebApiOntologyResourceTypesMatch"
        Labels:
          $ref: "#/components/schemas/WebApiOntologyResourceLabelsMatch"
        CustomLiterals:
          $ref: "#/components/schemas/WebApiOntologyResourceCustomLiteralsMatch"
        Alias:
          description: The alias is a name given to the object in the query context. It
            will identify the object in the query context.
          type: string
    WebApiPropertyMatch:
      description: Represents the conditions on a Property belonging to a Core Object in a
        model.
      type: object
      properties:
        Aspects:
          $ref: "#/components/schemas/WebApiPropertyAspectsMatch"
    WebApiCustomLiteralMatch:
      description: Represents the conditions on Custom Literals belonging to an Ontology
        Resource in a model.
      required:
        - Url
        - Value
      type: object
      properties:
        Url:
          description: The Url to be matched
          type: string
        Value:
          description: The value to be matched
          type: string
    WebApiPropertyAspectsMatch:
      description: Represents a match for Aspects belonging to a Core Property in a Core
        Object in a model.
      type: object
      properties:
        All:
          description: Matches when all of the aspects belong to a Core Property
          type: array
          items:
            $ref: "#/components/schemas/WebApiPropertyAspectMatch"
        Any:
          description: Matches when any of the aspects belongs to a Core Property
          type: array
          items:
            $ref: "#/components/schemas/WebApiPropertyAspectMatch"
    WebApiPropertyAspectMatch:
      description: Represents the conditions on an Aspect belonging to a Core Property in a
        Core Object in a model.
      required:
        - Name
      type: object
      properties:
        Name:
          description: The name to be matched
          type: string
        Value:
          description: The value to be matched
          type: string
    WebApiCoreSpatialElementQuery:
      description: Represents a query on spatial elements
      required:
        - MatchSpatialElement
      type: object
      properties:
        MatchSpatialElement:
          $ref: "#/components/schemas/WebApiCoreSpatialElementMatch"
        DetailLevel:
          $ref: "#/components/schemas/WebApiModelObjectRetrieveDetailLevel"
    WebApiCoreSpatialElement:
      required:
        - Id
      type: object
      properties:
        ContainsLocations:
          type: array
          items:
            type: string
        IsRelatedTo:
          type: array
          items:
            type: string
        ContainsProperties:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCoreProperty"
        HasClassificationTags:
          type: array
          items:
            type: string
        HasStorageRetentionPolicies:
          type: array
          items:
            $ref: "#/components/schemas/WebApiStorageRetentionPolicy"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiCorePersonQuery:
      description: Represents a query on persons
      required:
        - MatchPerson
      type: object
      properties:
        MatchPerson:
          $ref: "#/components/schemas/WebApiCorePersonMatch"
        DetailLevel:
          $ref: "#/components/schemas/WebApiModelObjectRetrieveDetailLevel"
    WebApiCorePersonMatch:
      description: Represents a match for an Person in a model.
      type: object
      properties:
        IsEngagedIn:
          $ref: "#/components/schemas/WebApiCoreOrganizationRelationship"
        Properties:
          $ref: "#/components/schemas/WebApiCoreObjectPropertiesMatch"
        Ids:
          $ref: "#/components/schemas/WebApiOntologyResourceIdsMatch"
        Types:
          $ref: "#/components/schemas/WebApiOntologyResourceTypesMatch"
        Labels:
          $ref: "#/components/schemas/WebApiOntologyResourceLabelsMatch"
        CustomLiterals:
          $ref: "#/components/schemas/WebApiOntologyResourceCustomLiteralsMatch"
        Alias:
          description: The alias is a name given to the object in the query context. It
            will identify the object in the query context.
          type: string
    WebApiCoreOrganizationRelationship:
      description: Represents how to match Organizations that are the targets of a
        relationship.
      required:
        - Any
      type: object
      properties:
        Any:
          $ref: "#/components/schemas/WebApiCoreOrganizationMatch"
        Recursive:
          description: Indicates if the specified organizations is the target of the
            relationship, or the relationship can be traversed recursively until
            a match occurs.
          type: boolean
    WebApiCoreOrganizationMatch:
      description: Represents a match for an Organization in a model.
      type: object
      properties:
        IsEngagedBy:
          $ref: "#/components/schemas/WebApiCorePersonRelationship"
        Properties:
          $ref: "#/components/schemas/WebApiCoreObjectPropertiesMatch"
        Ids:
          $ref: "#/components/schemas/WebApiOntologyResourceIdsMatch"
        Types:
          $ref: "#/components/schemas/WebApiOntologyResourceTypesMatch"
        Labels:
          $ref: "#/components/schemas/WebApiOntologyResourceLabelsMatch"
        CustomLiterals:
          $ref: "#/components/schemas/WebApiOntologyResourceCustomLiteralsMatch"
        Alias:
          description: The alias is a name given to the object in the query context. It
            will identify the object in the query context.
          type: string
    WebApiCorePersonRelationship:
      description: Represents how to match the Persons that are the targets of a
        relationship.
      required:
        - Any
      type: object
      properties:
        Any:
          $ref: "#/components/schemas/WebApiCorePersonMatch"
        Recursive:
          description: Indicates if the specified persons is the target of the
            relationship, or the relationship can be traversed recursively until
            a match occurs.
          type: boolean
    WebApiCorePerson:
      required:
        - Id
      type: object
      properties:
        IsEngagedIn:
          type: array
          items:
            type: string
        IsOwnerOfOrganization:
          type: array
          items:
            type: string
        IsInstaller:
          type: array
          items:
            type: string
        IsOwnerOf:
          type: array
          items:
            type: string
        IsTechnicianFor:
          type: array
          items:
            type: string
        IsHvacTechnicianFor:
          type: array
          items:
            type: string
        IsRelatedTo:
          type: array
          items:
            type: string
        ContainsProperties:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCoreProperty"
        HasClassificationTags:
          type: array
          items:
            type: string
        HasStorageRetentionPolicies:
          type: array
          items:
            $ref: "#/components/schemas/WebApiStorageRetentionPolicy"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiCoreOrganizationQuery:
      description: Represents a query on organizations
      required:
        - MatchOrganization
      type: object
      properties:
        MatchOrganization:
          $ref: "#/components/schemas/WebApiCoreOrganizationMatch"
        DetailLevel:
          $ref: "#/components/schemas/WebApiModelObjectRetrieveDetailLevel"
    WebApiCoreOrganization:
      required:
        - Id
      type: object
      properties:
        IsInstaller:
          type: array
          items:
            type: string
        IsOwnerOf:
          type: array
          items:
            type: string
        IsTechnicianFor:
          type: array
          items:
            type: string
        IsHvacTechnicianFor:
          type: array
          items:
            type: string
        IsRelatedTo:
          type: array
          items:
            type: string
        ContainsProperties:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCoreProperty"
        HasClassificationTags:
          type: array
          items:
            type: string
        HasStorageRetentionPolicies:
          type: array
          items:
            $ref: "#/components/schemas/WebApiStorageRetentionPolicy"
        Comment:
          type: string
        Id:
          type: string
        Label:
          type: string
        Types:
          type: array
          items:
            type: string
        CustomLiteralItems:
          type: array
          items:
            $ref: "#/components/schemas/WebApiCustomLiteralItem"
    WebApiCoreObjectQuery:
      description: Represents the starting point to start quering.
      required:
        - Aliases
      type: object
      properties:
        Aliases:
          description: List of aliases to be included in the result.
          type: array
          items:
            type: string
        DetailLevel:
          $ref: "#/components/schemas/WebApiModelObjectRetrieveDetailLevel"
        WebApiCoreElementMatch:
          $ref: "#/components/schemas/WebApiCoreElementMatch"
        WebApiCoreSpatialElementMatch:
          $ref: "#/components/schemas/WebApiCoreSpatialElementMatch"
        WebApiCorePersonMatch:
          $ref: "#/components/schemas/WebApiCorePersonMatch"
        WebApiCoreOrganizationMatch:
          $ref: "#/components/schemas/WebApiCoreOrganizationMatch"
    WebApiModelQueryResult:
      description: Represents the resulting objects returned for a single query result.
      type: object
      properties:
        CoreElements:
          description: Elements in a result for a query by their aliases.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/WebApiCoreElement"
        CoreSpatialElements:
          description: Spatial elements in a result for a query by their aliases.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/WebApiCoreSpatialElement"
        CoreOrganizations:
          description: Organizations in a result for a query by their aliases.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/WebApiCoreOrganization"
        CorePersons:
          description: Persons in a result for a query by their aliases.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/WebApiCorePerson"
    WebApiModelDetail:
      type: object
      properties:
        ModelId:
          type: string
        ModelTypeId:
          type: string
        ModelInstanceUri:
          type: string
    WebApiAddModelRequest:
      type: object
      properties:
        ModelId:
          type: string
        ModelTypeId:
          pattern: ^[a-zA-Z0-9:-]{1,49}$
          type: string
    WebApiAddModelRequestV3:
      type: object
      properties:
        AddPermissionsToCaller:
          description: Grants permission to the model.
          type: boolean
        ModelId:
          type: string
        ModelTypeId:
          pattern: ^[a-zA-Z0-9:-]{1,49}$
          type: string
    WebApiResourceUpdateDetails:
      required:
        - op
        - path
        - value
      type: object
      properties:
        op:
          pattern: \b(add|remove|replace|move|copy)\b$
          type: string
        path:
          pattern: ^/[a-zA-Z]+(/([0-9]+|[a-zA-Z]+))*$
          type: string
        value:
          $ref: "#/components/schemas/Object"
    PointHistoryRangeResponse:
      required:
        - HistoryExists
        - LastTimestamp
        - FirstTimestamp
      type: object
      properties:
        HistoryExists:
          type: boolean
        LastTimestamp:
          format: date-time
          type: string
        FirstTimestamp:
          format: date-time
          type: string
    PointHistorySetLastTimeStampParams:
      required:
        - LastHistoryDateTimeOffset
      type: object
      properties:
        LastHistoryDateTimeOffset:
          format: date-time
          type: string
    WebApiGetRecentPointsListResponse:
      description: An object that contains the list of recent points sent as point history
        from a system
      type: object
      properties:
        SystemGuid:
          type: string
          readOnly: true
        PointIds:
          type: array
          items:
            type: string
          readOnly: true
    WebApiPointHistoryRemovePointsRequest:
      required:
        - StartTime
        - EndTime
        - PointIds
      type: object
      properties:
        StartTime:
          format: date-time
          type: string
        EndTime:
          format: date-time
          type: string
        PointIds:
          type: array
          items:
            type: string
    WebApiPointHistoryOperationCreateResponse:
      type: object
      properties:
        OperationId:
          type: string
    WebApiPointHistoryReplacePointValuesRequest:
      required:
        - StartTime
        - EndTime
        - PointHistoryReplacePointValuesValue
      type: object
      properties:
        StartTime:
          format: date-time
          type: string
        EndTime:
          format: date-time
          type: string
        PointHistoryReplacePointValuesValue:
          type: array
          items:
            $ref: "#/components/schemas/PointHistoryReplacePointValuesValue"
    PointHistoryReplacePointValuesValue:
      type: object
      properties:
        PointId:
          type: string
        Value:
          $ref: "#/components/schemas/Object"
    WebApiPointHistoryOperationResponse:
      type: object
      properties:
        SystemGuid:
          type: string
        PointHistoryOperationStatus:
          type: string
        CompletedOn:
          format: date-time
          type: string
        LastSuccessfulProcessedTime:
          format: date-time
          type: string
        FailedTimeRanges:
          type: array
          items:
            $ref: "#/components/schemas/WebApiFailedDateTimeOffset"
    WebApiFailedDateTimeOffset:
      type: object
      properties:
        Start:
          format: date-time
          type: string
        End:
          format: date-time
          type: string
    WebApiPointHistoryRequestCreateResponse:
      type: object
      properties:
        OperationId:
          type: string
    ProductUiContextRequest:
      type: object
      properties:
        ProductIds:
          type: array
          items:
            type: string
        Tags:
          type: array
          items:
            type: string
    ProductContextDetail:
      required:
        - PropertyContexts
        - ProductId
      type: object
      properties:
        PropertyContexts:
          type: array
          items:
            $ref: "#/components/schemas/PropertyContextDetail"
        ProductId:
          type: string
    PropertyContextDetail:
      required:
        - BindingName
        - PropertyId
        - Units
        - Presentation
        - PropertyDescription
        - PropertyFriendlyName
        - Tags
      type: object
      properties:
        BindingName:
          type: string
        PropertyId:
          type: string
        Units:
          type: string
        Presentation:
          $ref: "#/components/schemas/PropertyValuePresentation"
        PropertyDescription:
          type: string
        PropertyFriendlyName:
          type: string
        Tags:
          type: array
          items:
            type: string
    PropertyValuePresentation:
      required:
        - ApplyDecimalPlacesFormatting
        - DecimalPlaces
      type: object
      properties:
        ApplyDecimalPlacesFormatting:
          type: boolean
        DecimalPlaces:
          format: int32
          type: integer
    ServiceStatus:
      required:
        - SystemId
        - ServiceId
        - IsActive
      type: object
      properties:
        SystemId:
          type: string
        ServiceId:
          type: string
        IsActive:
          type: boolean
    WebApiServiceActivationResponse:
      required:
        - IsActivationSuccessful
        - ResponseMessage
      type: object
      properties:
        IsActivationSuccessful:
          type: boolean
        ResponseMessage:
          type: string
    WebApiServiceDeActivationResponse:
      required:
        - IsDeactivationSuccessful
        - ResponseMessage
      type: object
      properties:
        IsDeactivationSuccessful:
          type: boolean
        ResponseMessage:
          type: string
    WebApiSystemCommandRequest:
      description: This class has information related to command which will be send by
        consumer of the CommandFramework.
      required:
        - Command
      type: object
      properties:
        CommandId:
          description: Id of the command which needs to be sent to system. If not send then
            this API will generate one.
          type: string
        Command:
          description: The Command verb e.g ConfigureGateway. Target system would use this
            command verb to act upon the command.
          type: string
        Timeout:
          format: int32
          description: "Timeout in seconds for which the command framework will wait for
            response. \r

            \            If no reponse is received from system
            within provided value then timeout response would be provided.\r

            \            If no value is provided then default value
            will be 30 seconds.\r

            \            Time out value should not be less than 15
            and more than 60 seconds."
          maximum: 60
          minimum: 15
          type: integer
        CommandParameters:
          description: Parameters of the command.
          type: object
          additionalProperties:
            type: string
        ShouldWaitForDeviceResponse:
          description: "Flag to indicate if the API request should block waiting for a
            response from the device after sending the command or return
            immediately.\r

            \            This flag value will also be sent to the
            device as a command parameter with key \"IsResponseExpected\", so
            that device can choose not to send response if not required.\r

            \            null: will take as default value-
            True.  True: default value, Sentience will wait for the
            device response for time specified in the TimeOut field or default
            value if Timeout value is not set. False: API will
            return immediately after sending the command to the device. "
          type: boolean
    WebApiSystemCommandResponse:
      description: This class hold the response from the command API.
      type: object
      properties:
        CommandId:
          description: Id which uniquely indentfies the command.
          type: string
        TimeOut:
          format: int32
          description: TimeOut value set, default value is 30.
          type: integer
        InfrastructureResponse:
          $ref: "#/components/schemas/SystemCommandInfrastructureResponse"
        SystemResponse:
          $ref: "#/components/schemas/SystemCommandSystemResponse"
    SystemCommandInfrastructureResponse:
      description: This calls will hold response related to Infrastructure.
      type: object
      properties:
        Status:
          format: int32
          description: Contains response related to Infrastructure as enum type.
          enum:
            - 0
            - 1
            - 2
            - 3
          type: integer
        StatusMessage:
          description: Contains response as status message
          type: string
    SystemCommandSystemResponse:
      description: This class hold system level response.
      type: object
      properties:
        Status:
          format: int32
          description: Has status of the current command
          enum:
            - 0
            - 1
            - 2
          type: integer
        ErrorMessage:
          description: Error message in case there is any error.
          type: string
        ErrorCode:
          format: int32
          description: Error code, in case there is any error while sending the command.
          type: integer
        ResponseParameters:
          $ref: "#/components/schemas/IDictionary_String_String_"
    WebApiSystemCommandResponseV2:
      description: This class hold the response from the command API.
      type: object
      properties:
        CommandId:
          description: Id which uniquely indentfies the command.
          type: string
        TimeOut:
          format: int32
          description: TimeOut value set, default value is 30.
          type: integer
        InfrastructureResponse:
          $ref: "#/components/schemas/SystemCommandInfrastructureResponse"
        SystemResponse:
          $ref: "#/components/schemas/SystemCommandSystemResponseV2"
    SystemCommandSystemResponseV2:
      description: This class hold system level response.
      type: object
      properties:
        Status:
          format: int32
          description: Has status of the current command
          enum:
            - 0
            - 1
            - 2
          type: integer
        ErrorMessage:
          description: Error message in case there is any error.
          type: string
        ErrorCode:
          format: int32
          description: Error code, in case there is any error while processing the command.
          type: integer
        ResponseParameters:
          description: Any extra response parameters to be passed to the consumer. This is
            an IDictionary object with Key and Value type as string.
          type: object
          additionalProperties:
            type: string
    WebApiSystemFileUploadResponse:
      type: object
      properties:
        TransactionId:
          type: string
    WebApiSystemFileUploadRequest:
      required:
        - MimeType
      type: object
      properties:
        MimeType:
          description: Mime type of the file. This will be sent to the device as a command
            parameter.
          type: string
        FileProperties:
          description: Optional field to set any properties of the file which needs to be
            sent to the device in the command. All the key value pair addded
            here will be sent as command parameter to the device.
          type: object
          additionalProperties:
            type: string
    WebApiPointWriteRequest:
      required:
        - Value
      type: object
      properties:
        Value:
          $ref: "#/components/schemas/Object"
    WebApiPointWriteResponse:
      type: object
      properties:
        WriteTime:
          format: date-time
          type: string
        Status:
          type: string
    WebApiPointReadResponse:
      type: object
      properties:
        Value:
          $ref: "#/components/schemas/Object"
        Status:
          type: string
    WebApiMultiPointReadResponse:
      type: object
      properties:
        PointId:
          type: string
        Value:
          $ref: "#/components/schemas/Object"
        Status:
          type: string
    WebApiMultiPointWriteRequest:
      type: object
      properties:
        PointId:
          type: string
        Value:
          $ref: "#/components/schemas/Object"
    WebApiMultiPointWriteResponse:
      type: object
      properties:
        WriteTime:
          format: date-time
          type: string
        PointId:
          type: string
        Status:
          type: string
    DataPointTSDBSummaryRequest:
      required:
        - startTime
        - endTime
        - queries
      type: object
      properties:
        startTime:
          format: date-time
          description: Starting time for the data access query.
          type: string
        endTime:
          format: date-time
          description: Ending time for the data access query.
          type: string
        queries:
          type: array
          items:
            $ref: "#/components/schemas/DataPointTSDBSummaryQuery"
    DataPointTSDBSummaryQuery:
      required:
        - pointId
        - systemGuid
      type: object
      properties:
        pointId:
          description: Used to uniquely identify a point on a controller under a
            System/Gateway. This is case-sensitive
          type: string
        systemGuid:
          description: Indicate SystemGuid given by Cloud Platform to System (Gateway) as
            part of Gateway registration.
          type: string
        pointAttributes:
          $ref: "#/components/schemas/Object"
        aggregator:
          description: This is an optional field, added for backward compatibility. Adding
            value to this field will make no change to the samples returned.
            Please leave this field empty.
          type: string
        downsample:
          description: "A downsampling function is used to reduce the amount of data
            returned. It samples the data in the given interval of time and
            calculates aggregate.For e.g. If the start time is 6 AM and end time
            is 7 AM and the user wants avg for every 15 min, then downsample
            would be : 15m-avg. Here the downsampling bucket is 15m and the
            aggregator is avg.Downsample should be in the format (positive
            integer)(unit of time)-(aggregation function).Unit of time could be
            s(seconds), m(minute), h(hour).Eg:10m-avg which indicates return
            data by calculating 10 minutes average.Empty downsample value will
            return the raw data."
          type: string
    DataPointTSDBLastRequest:
      required:
        - queries
      type: object
      properties:
        queries:
          type: array
          items:
            $ref: "#/components/schemas/DataPointTSDBLastQuery"
    DataPointTSDBLastQuery:
      required:
        - pointId
      type: object
      properties:
        pointId:
          description: Used to uniquely identify a point on a controller under a
            System/Gateway. This is case-sensitive.
          type: string
        systemGuid:
          description: Indicate SystemGuid given by Cloud Platform to System (Gateway) as
            part of Gateway registration
          type: string
    DPSLastResponse:
      type: object
      properties:
        pointId:
          type: string
        pointValues:
          $ref: "#/components/schemas/Object"
        pointAttributes:
          $ref: "#/components/schemas/Object"
        sampleTime:
          format: int64
          type: integer
    IDictionary_String_String_:
      type: object
      properties:
        {}