{
    "openapi": "3.0.0",
    "info": {
        "version": "v1",
        "title": "BullDog Public Global WebAPIs"
    },
    "paths": {
        "/api/auth/applications/self/activities/{activityId}/systemtypes": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Application retrieves associated system types as per the application's permission rights.",
                "description": "An authorized application or user can use this API to retrieve the list of allowed systemtypes for which the calling application has the given systemtype activity permission.\r\n\nAuthorization:GlobalActivity-ListMyPermissions\n\r\n\nAction:RetrieveSystemTypesAssociatedToApplicationOnSystemTypeActivity\n",
                "operationId": "ApplicationAuth_RetrieveSystemTypesAssociatedToApplicationOnSystemTypeActivity",
                "parameters": [
                    {
                        "name": "activityId",
                        "in": "path",
                        "description": "System type activity for which the application requires permission.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved systemtypes.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiRetrieveSystemTypesResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiRetrieveSystemTypesResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiRetrieveSystemTypesResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiRetrieveSystemTypesResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No Content: Application does not have the given system type activity permission.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiRetrieveSystemTypesResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiRetrieveSystemTypesResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiRetrieveSystemTypesResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiRetrieveSystemTypesResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not Found: System type activity is not found."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/models/{modelId}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets model permissions for a user.",
                "description": "An authorized application or user uses this API to retrieve model permissions for a user.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetUserModelPermissions\n",
                "operationId": "ApplicationAuth_GetUserModelPermissions",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which model permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "Model ID for which the model permissions of the user are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully fetched permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds model permission to a user.",
                "description": "An authorized application or user can use this API to grant model permissions for a user on a specified model.\r\n\nAuthorization:ModelTypeOrGlobalActivity-ConfigureModelPermission\n\r\n\nAction:AddModelPermissionsToUser\n",
                "operationId": "ApplicationAuth_AddModelPermissionsToUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which the model permission is granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "Model ID for which the user is given model permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest3"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully granted permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes the user'access to a list of model permissions.",
                "description": "An authorized application or user can use this API to remove the user's access to a list of model permissions.\r\n\nAuthorization:ModelTypeOrGlobalActivity-ConfigureModelPermission\n\r\n\nAction:RemoveModelPermissionsFromUser\n",
                "operationId": "ApplicationAuth_RemoveModelPermissionsFromUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which model permission is removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "Model ID for which the user's model permissions is removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest3"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully removed permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/models/{modelId}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets model permissions for an application.",
                "description": "An authorized application uses this API to fetch model permissions for an application.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetApplicationModelPermissions\n",
                "operationId": "ApplicationAuth_GetApplicationModelPermissions",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which model permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "Model ID for which the model permissions of the application are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully fetched permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds model permission to an application.",
                "description": "An authorized application uses this API to grant model permissions for an application on a specified model.\r\n\nAuthorization:ModelTypeOrGlobalActivity-ConfigureModelPermission\n\r\n\nAction:AddModelPermissionsToApplication\n",
                "operationId": "ApplicationAuth_AddModelPermissionsToApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which model permissions are granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "Model ID for which the application is given model permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest3"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully granted permissions"
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes model permission from an application.",
                "description": "An authorized application uses this API to remove the application's access to a list of model permissions.\r\n\nAuthorization:ModelTypeOrGlobalActivity-ConfigureModelPermission\n\r\n\nAction:RemoveModelPermissionsFromApplication\n",
                "operationId": "ApplicationAuth_RemoveModelPermissionsFromApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which model permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "Model ID for which the application's model permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest3"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully removed permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/model/activities": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Retrieves all activities applicable to a model.",
                "description": "An authorized application or user uses this API to retrieve all model activities.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetModelActivities\n",
                "operationId": "ApplicationAuth_GetModelActivities",
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved model activities.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/modeltype/activities": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Retrieves all activities applicable to a model type.",
                "description": "An authorized application or user uses this API to retrieve all model type activities.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetModelTypeActivities\n",
                "operationId": "ApplicationAuth_GetModelTypeActivities",
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved model type activities.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/systems/{systemGuid}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "OBSOLETE: Gets system permissions for an application.This will be deprecated by Oct 31, 2016, use GetSystemPermissionsOfApplication instead",
                "description": " Given applicationGuid and systemGuid, this API returns the system activities  \r\n\nThis will be deprecated by Oct 31, 2016, use GetSystemPermissionsOfApplication instead  \r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetApplicationSystemPermissions\n",
                "operationId": "ApplicationAuth_GetApplicationSystemPermissions",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application Guid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds system permissions to an application.",
                "description": "An authorized application or user uses this API to grant system permissions for an application on a specified system.\r\n\nAuthorization:SystemTypeActivityBySystem-ConfigureSystemPermissionForSystemType\n\r\n\nAction:AddSystemPermissionsToApplication\n",
                "operationId": "ApplicationAuth_AddSystemPermissionsToApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which system permissions are granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid for which the application is given system permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest5"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully granted permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes system permissions from an application.",
                "description": "An authorized application or user uses this API to remove the application's access to a list of system permissions.\r\n\nAuthorization:SystemTypeActivityBySystem-ConfigureSystemPermissionForSystemType\n\r\n\nAction:RemoveSystemPermissionsFromApplication\n",
                "operationId": "ApplicationAuth_RemoveSystemPermissionsFromApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID from which system permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid for which the application's system permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest5"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully removed permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/systemtypes/{systemType}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets system type permissions for an application.",
                "description": "An authorized application or user uses this API to retrieve system type permissions for an application.\r\n\nAuthorization:GlobalActivity-ConfigureSystemTypePermission\n\r\n\nAction:GetApplicationSystemTypePermissions\n",
                "operationId": "ApplicationAuth_GetApplicationSystemTypePermissions",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which system type permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "SystemType for which the system type permissions of the application are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully fetched permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequset:Invalid Application ID."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds system type permissions to an application.",
                "description": "An authorized application or user uses this API to grant system type permissions for an application on a specified systemType.\r\n\nAuthorization:GlobalOrSystemTypeActivity-ConfigureSystemTypePermission\n\r\n\nAction:AddSystemTypePermissionsToApplication\n",
                "operationId": "ApplicationAuth_AddSystemTypePermissionsToApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which the system type permission is granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "SystemType for which the application is given system type permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest2"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully granted permissions."
                    },
                    "201": {
                        "description": "Created: Successfully granted permissions."
                    },
                    "400": {
                        "description": "BadRequest: Invalid Application ID/requests."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/globalpermissions/{globalTenantName}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets the global permissions for an application.",
                "description": "An authorized application or user uses this API to retrieve global permissions for an application.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetApplicationGlobalPermissions\n",
                "operationId": "ApplicationAuth_GetApplicationGlobalPermissions",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which global permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "globalTenantName",
                        "in": "path",
                        "description": "Name of the global tenant for which the application's global permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalActivityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds global permissions to an application.",
                "description": "An authorized application or user uses this API to grant global permissions for an application.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:AddGlobalPermissionsToApplication\n",
                "operationId": "ApplicationAuth_AddGlobalPermissionsToApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which global permissions are granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "globalTenantName",
                        "in": "path",
                        "description": "Name of the global tenant for which the application is given global permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully granted permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes global permissions from an application.",
                "description": "An authorized application or user uses this API to remove the application's access to a list of global permissions.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:RemoveGlobalPermissionsFromApplication\n",
                "operationId": "ApplicationAuth_RemoveGlobalPermissionsFromApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which global permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "globalTenantName",
                        "in": "path",
                        "description": "Name of the global tenant for which the application's global permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully removed permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/globalpermissions/{globalTenantName}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets global permissions for a user.",
                "description": "An authorized application or user uses this API to retrieve global permissions for a user.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetUserGlobalPermissions\n",
                "operationId": "ApplicationAuth_GetUserGlobalPermissions",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which global permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "globalTenantName",
                        "in": "path",
                        "description": "Name of the global tenant for which the global permissions of the user are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/GlobalActivityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds global permissions to a user.",
                "description": "An authorized application or user uses this API to grant global permissions for a user.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:AddGlobalPermissionsToUser\n",
                "operationId": "ApplicationAuth_AddGlobalPermissionsToUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which global permissions are granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "globalTenantName",
                        "in": "path",
                        "description": "Name of the global tenant for which the user is given global permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        }
                    },
                    "description": "List of global permissions.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully granted permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes global permissions from a user.",
                "description": "An authorized application or user uses this API to remove the user's access to a list of global permissions.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:RemoveGlobalPermissionsFromUser\n",
                "operationId": "ApplicationAuth_RemoveGlobalPermissionsFromUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID from which global permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "globalTenantName",
                        "in": "path",
                        "description": "Name of the global tenant for which the user's global permissions are  removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully removed permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/services/system": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets all activities applicable to a system.",
                "description": "An authorized application or user uses this API to retrieve all system activities.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetSystemServiceActivities\n",
                "operationId": "ApplicationAuth_GetSystemServiceActivities",
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/services/systemtype": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets all activities applicable to system types.",
                "description": "An authorized application or user uses this API to retrieve all system type activities.\r\n\nAuthorization:GlobalActivity-ConfigureSystemTypePermission\n\r\n\nAction:GetSystemTypeServiceActivities\n",
                "operationId": "ApplicationAuth_GetSystemTypeServiceActivities",
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/services/global": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets all activities applicable to global services.",
                "description": "An authorized application or user uses this API to retrieve all global activities.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetGlobalServiceActivities\n",
                "operationId": "ApplicationAuth_GetGlobalServiceActivities",
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/services/tenant": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets all activities applicable to tenant services.",
                "description": "An authorized application or user uses this API to retrieve all tenant activities.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetTenantServiceActivities\n",
                "operationId": "ApplicationAuth_GetTenantServiceActivities",
                "responses": {
                    "200": {
                        "description": "OK :Successfully retrieved permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/systems/{systemGuid}/permissions": {
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Creates standard permissions for a system.",
                "description": "An authorized application or user uses this API to create standard permissions for a system.\r\n\nAuthorization:GlobalActivity-CreateSystemPermissions</p>\r\n\n\nAction:CreatePermissionsForSystem\n",
                "operationId": "ApplicationAuth_CreatePermissionsForSystem",
                "parameters": [
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid for which standard permissions is created.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest6"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully created permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Deletes standard permission for a system.",
                "description": "An authorized application or user uses this API to delete standard permissions for a system.\r\n\nAuthorization:GlobalActivity-RemoveSystemPermissions</p>\r\n\n\nAction:RemovePermissionsForSystem\n",
                "operationId": "ApplicationAuth_RemovePermissionsForSystem",
                "parameters": [
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid for which standard permissions is deleted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        }
                    },
                    "description": "List of activities to remove from the Active Directory group.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully deleted permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/models/{modelId}/permissions/create": {
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Creates standard permission for a model.",
                "description": "An authorized application or user uses this API to create standard permissions for a model.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:CreatePermissionsForModel\n",
                "operationId": "ApplicationAuth_CreatePermissionsForModel",
                "parameters": [
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "ModelId for which standard permissions are added.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest6"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully created permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/systems/{systemGuid}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "OBSOLETE: Gets system permissions for the user.This will be deprecated by Oct 31, 2016, use GetSystemPermissionsOfUser instead",
                "description": " Given userId and systemGuid, this api returns the system activities  \r\n\nThis will be deprecated by Oct 31, 2016, use GetSystemPermissionsOfUser instead  \r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetUserSystemPermissions\n",
                "operationId": "ApplicationAuth_GetUserSystemPermissions",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds system permission to a user.",
                "description": "An authorized application or user uses this API to grant system permissions for a user on a specified system.\r\n\nAuthorization:SystemTypeActivityBySystem-ConfigureSystemPermissionForSystemType\n\r\n\nAction:AddSystemPermissionsToUser\n",
                "operationId": "ApplicationAuth_AddSystemPermissionsToUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which system permissions are granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid for which the user is given system permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest5"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully granted permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes system permissions from a user.",
                "description": "An authorized application or user uses this API to remove the user's access to a list of system permissions.\r\n\nAuthorization:SystemTypeActivityBySystem-ConfigureSystemPermissionForSystemType\n\r\n\nAction:RemoveSystemPermissionsFromUser\n",
                "operationId": "ApplicationAuth_RemoveSystemPermissionsFromUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID from which system permissions is removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid for which the user's system permissions is removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest5"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully removed permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/v2/applications/{applicationGuid}/systems/{systemGuid}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets system permissions for an application.",
                "description": "An authorized application or user uses this API to fetch system permissions for an application.\r\n\nAuthorization:GlobalActivity-CheckSystemPermission\n\r\n\nAction:GetSystemPermissionsOfApplication\n",
                "operationId": "ApplicationAuth_GetSystemPermissionsOfApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which system permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid for which the system permissions of the application are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully fetched permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/systemtypes/{systemType}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets systemtype permissions for a user.",
                "description": "An authorized application uses this API to fetch system type permissions for a user.\r\n\nAuthorization:GlobalActivity-ConfigureSystemTypePermission\n\r\n\nAction:GetUserSystemTypePermissions\n",
                "operationId": "ApplicationAuth_GetUserSystemTypePermissions",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which system type permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "SystemType for which the system type permissions of the user are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully fetched permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest:Invalid User ID."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds system type permissions to a user.",
                "description": "An authorized application or user uses this API to grant system type permissions for a user.\r\n\nAuthorization:GlobalOrSystemTypeActivity-ConfigureSystemTypePermission\n\r\n\nAction:AddSystemTypePermissionsToUser\n",
                "operationId": "ApplicationAuth_AddSystemTypePermissionsToUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "UserID for which system type permissions are granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "SystemType for which the user is given permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        }
                    },
                    "description": "List of system type permissions.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully granted permissions."
                    },
                    "201": {
                        "description": "Created: Successfully granted permissions."
                    },
                    "400": {
                        "description": "BadRequest:Invalid User ID/Activities."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes system type permissions from a user.",
                "description": "An authorized application or user uses this API to remove the user's access to a list of system type permissions.\r\n\nAuthorization:GlobalOrSystemTypeActivity-ConfigureSystemTypePermission\n\r\n\nAction:RemoveSystemTypePermissionsFromUser\n",
                "operationId": "ApplicationAuth_RemoveSystemTypePermissionsFromUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID from which system type permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "SystemType for which the user's system type permissions is removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest2"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully removed permissions."
                    },
                    "400": {
                        "description": "BadRequest:Invalid UserId/Activities."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/v2/users/{userId}/systems/{systemGuid}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets system permissions for a user.",
                "description": "An authorized user or application uses this API to retrieve system permissions for a user.\r\n\nAuthorization:GlobalActivity-CheckSystemPermission\n\r\n\nAction:GetSystemPermissionsOfUser\n",
                "operationId": "ApplicationAuth_GetSystemPermissionsOfUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which system permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid for which the system permissions of the user are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully fetched permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/systems/{systemGuid}/groups": {
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "OBSOLETE: CreateGroupsForSystem will be deprecated by Jan 18, 2017, use CreatePermissionsForSystem instead",
                "description": " CreateGroupsForSystem will be deprecated by Jan 18, 2017, use CreatePermissionsForSystem instead \r\n\nAuthorization:GlobalActivity-CreateSystemPermissions</p>\r\n\n\nAction:CreateGroupsForSystem\n",
                "operationId": "ApplicationAuth_CreateGroupsForSystem",
                "parameters": [
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiPermissionsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    }
                },
                "deprecated": true
            }
        },
        "/api/auth/applications/{applicationGuid}/tenantpermissions/{tenantName}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets tenant permissions for an application.",
                "description": "An authorized application or user uses this API to fetch tenant permissions for an application.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetApplicationTenantPermissions\n",
                "operationId": "ApplicationAuth_GetApplicationTenantPermissions",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which tenant permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant for which the tenant  permissions of the application are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully fetched permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds tenant permissions to an application.",
                "description": "An authorized application or user uses this API to grant tenant permissions for an application.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:AddTenantPermissionsToApplication\n",
                "operationId": "ApplicationAuth_AddTenantPermissionsToApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which tenant permissions are added.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "TenantName for which the application is given tenant permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest4"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully granted permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes tenant permissions from an application.",
                "description": "An authorized application or user uses this API to remove the application's access to a list of tenant permissions.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:RemoveTenantPermissionsFromApplication\n",
                "operationId": "ApplicationAuth_RemoveTenantPermissionsFromApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID from which tenant permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant for which the application's tenant permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest7"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully removed permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/tenantpermissions/{tenantName}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets tenant permissions for a user.",
                "description": "An authorized application or user uses this API to retrieve tenant permissions for a user.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:GetUserTenantPermissions\n",
                "operationId": "ApplicationAuth_GetUserTenantPermissions",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which tenant permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant for which the tenant permissions of the user are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/SystemModelLevelActivityResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds tenant permissions to a user.",
                "description": "An authorized application or user uses this API to grant tenant permissions for a user.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:AddTenantPermissionsToUser\n",
                "operationId": "ApplicationAuth_AddTenantPermissionsToUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which tenant permissions are granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant for which the user is given tenant permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest4"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully granted permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes tenant permissions from a user.",
                "description": "An authorized application or user uses this API to remove the user's access to a list of tenant permissions.\r\n\nAuthorization:GlobalActivity-ConfigureSystemPermission\n\r\n\nAction:RemoveTenantPermissionsFromUser\n",
                "operationId": "ApplicationAuth_RemoveTenantPermissionsFromUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID from which tenant permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant for which the user's tenant permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest7"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully removed permissions."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicataionGuid}/systemtypes/{systemType}": {
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes system type permissions from an application.",
                "description": "An authorized application or user uses this API to remove the application's access to a list of system type permissions.\r\n\nAuthorization:GlobalOrSystemTypeActivity-ConfigureSystemTypePermission\n\r\n\nAction:RemoveSystemTypePermissionsFromApplication\n",
                "operationId": "ApplicationAuth_RemoveSystemTypePermissionsFromApplication",
                "parameters": [
                    {
                        "name": "applicataionGuid",
                        "in": "path",
                        "description": "Application ID from which system type permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "System type for which the application's system type permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiPermissionsRequest2"
                },
                "responses": {
                    "200": {
                        "description": "OK: Successfully removed permissions."
                    },
                    "400": {
                        "description": "BadRequest:Invalid Application ID/activities."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users": {
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds a user to the Sentience Platform.",
                "description": "Given the details of a user, a new user is created in the Sentience Platform.\r\n                    A caller provides an \"IdentityTarget\" header to decide and create a user in Azure Active Directory (Aad) or ForgeRock.\r\n                    If Header \"IdentityTarget\" is specified with the value of \"ForgeRock\", the API creates a user in ForgeRock\r\n                    If Header \"IdentityTarget\" is not specified or the value is \"Aad\", the API creates a user in the Azure Active Directory.\r\n\nAuthorization:GlobalActivity-CreateUser\n\r\n\nAction:CreateUser\n",
                "operationId": "ApplicationAuth_CreateUser",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiNewUserRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiNewUserRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiNewUserRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiNewUserRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiNewUserRequest"
                            }
                        }
                    },
                    "description": "Details of the new user.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiNewUserResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiNewUserResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiNewUserResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiNewUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Parameters."
                    },
                    "409": {
                        "description": "Conflict,if user exists."
                    },
                    "500": {
                        "description": "Internal Server Error :Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/v2": {
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds a user with login name to the Sentience Platform.",
                "description": "Given the details of a user, a new user is created in the Sentience Platform.\r\n                    A caller provides an \"IdentityTarget\" header to decide and create a user in Azure Active Directory (Aad) or ForgeRock.\r\n                    If Header \"IdentityTarget\" is specified with the value of \"ForgeRock\", the API creates a user in ForgeRock\r\n                    If Header \"IdentityTarget\" is not specified or the value is \"Aad\", the API creates a user in the Azure Active Directory.\r\n\nAuthorization:GlobalActivity-CreateUser\n\r\n\nAction:CreateUserWithLoginName\n",
                "operationId": "ApplicationAuth_CreateUserWithLoginName",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiNewUserWithLoginNameRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiNewUserWithLoginNameRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiNewUserWithLoginNameRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiNewUserWithLoginNameRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiNewUserWithLoginNameRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiNewUserResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiNewUserResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiNewUserResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiNewUserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Parameters."
                    },
                    "409": {
                        "description": "Conflict, if user exists."
                    },
                    "500": {
                        "description": "Internal Server Error: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/modeltypes/{modelTypeId}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets model type permissions for an application.",
                "description": "An authorized application or user uses this API to retrieve model type permissions for an application.\r\n\nAuthorization:GlobalActivity-ConfigureModelTypePermission\n\r\n\nAction:GetApplicationModelTypePermissions\n",
                "operationId": "ApplicationAuth_GetApplicationModelTypePermissions",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which model type permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelTypeId",
                        "in": "path",
                        "description": "ModelType for which the model type permissions of the application are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeActivitiesResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeActivitiesResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeActivitiesResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeActivitiesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: Invalid parameters."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds model type permissions to an application.",
                "description": "An authorized application or user uses this API to grant model type permissions for an application.\r\n\nAuthorization:GlobalActivity-ConfigureModelTypePermission\n\r\n\nAction:AddModelTypePermissionsToApplication\n",
                "operationId": "ApplicationAuth_AddModelTypePermissionsToApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID for which model type permissions are granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelTypeId",
                        "in": "path",
                        "description": "ModelType for which the application is given permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiModelTypePermissionsRequest2"
                },
                "responses": {
                    "200": {
                        "description": "OK: Added permissions successfully."
                    },
                    "400": {
                        "description": "BadRequest: Invalid Parameters."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes model type permissions from an application.",
                "description": "An authorized application or user uses this API to remove the application's access to a list of model type permissions.\r\n\nAuthorization:GlobalActivity-ConfigureModelTypePermission\n\r\n\nAction:RemoveModelTypePermissionsFromApplication\n",
                "operationId": "ApplicationAuth_RemoveModelTypePermissionsFromApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "Application ID from which model type permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelTypeId",
                        "in": "path",
                        "description": "Model type for which the application's model type permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiModelTypePermissionsRequest"
                },
                "responses": {
                    "204": {
                        "description": "NoContent: Removed application permissions successfully."
                    },
                    "400": {
                        "description": "BadRequest: Invalid Parameters."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/modeltypes/{modelTypeId}": {
            "get": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Gets model type permissions for a user.",
                "description": "An authorized application or user uses this API to retrieve model type permissions for a user.\r\n\nAuthorization:GlobalActivity-ConfigureModelTypePermission\n\r\n\nAction:GetUserModelTypePermissions\n",
                "operationId": "ApplicationAuth_GetUserModelTypePermissions",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which model type permissions are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelTypeId",
                        "in": "path",
                        "description": "ModelType for which the model type permissions of the user are retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeActivitiesResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeActivitiesResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeActivitiesResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeActivitiesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: Invalid parameters."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Adds model type permissions to a user.",
                "description": "An authorized application or user uses this API to grant model type permissions for a user.\r\n\nAuthorization:GlobalActivity-ConfigureModelTypePermission\n\r\n\nAction:AddModelTypePermissionsToUser\n",
                "operationId": "ApplicationAuth_AddModelTypePermissionsToUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID for which model type permissions are granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelTypeId",
                        "in": "path",
                        "description": "ModelType for which the user is given  permissions.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiModelTypePermissionsRequest2"
                },
                "responses": {
                    "200": {
                        "description": "OK: Added user permissions successfully."
                    },
                    "400": {
                        "description": "BadRequest: Invalid Parameters."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ApplicationAuth"
                ],
                "summary": "Removes model type permissions from a user.",
                "description": "An authorized application or user can use this API to remove the user's access to a list of model type permissions.\r\n\nAuthorization:GlobalActivity-ConfigureModelTypePermission\n\r\n\nAction:RemoveModelTypePermissionsFromUser\n",
                "operationId": "ApplicationAuth_RemoveModelTypePermissionsFromUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "User ID from which model type permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelTypeId",
                        "in": "path",
                        "description": "Model type for which the user's model type permissions are removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiModelTypePermissionsRequest"
                },
                "responses": {
                    "204": {
                        "description": "NoContent: Removed user permissions successfully."
                    },
                    "400": {
                        "description": "BadRequest: Invalid Parameters."
                    },
                    "401": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "404": {
                        "description": "Not found: Route parameters are not valid."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/models/{modelId}/assets/{base64EncodedAssetId}/activities/{activity}/allowed": {
            "get": {
                "tags": [
                    "AssetAuth"
                ],
                "summary": "PREVIEW - Check if an user has permission on the given model asset.",
                "description": "This API checks if an user has permission on the given model asset for an activity.\r\n\nAuthorization:ModelPermissionByModelType-CheckAssetPermissions\n\r\n\nAction:IsUserAuthorizedForAsset\n",
                "operationId": "AssetAuth_IsUserAuthorizedForAsset",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedAssetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: UserId is not a ForgeRock Identity. Asset or Activity is not valid."
                    },
                    "401": {
                        "description": "Unauthorized: Lack of required permissions or Model is not valid"
                    },
                    "403": {
                        "description": "Forbidden: Caller is not authorized to invoke the API."
                    },
                    "500": {
                        "description": "InternalServerError: Unknown error while checking permission."
                    },
                    "501": {
                        "description": "Not Implemented: Api is Not Implemented"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/models/{modelId}/assets/{base64EncodedAssetId}/activities/{activity}/allowed": {
            "get": {
                "tags": [
                    "AssetAuth"
                ],
                "summary": "PREVIEW - Check if an application has permission on the given model asset.",
                "description": "This API checks if an application has permission on the given model asset for an activity.\r\n\nAuthorization:ModelPermissionByModelType-CheckAssetPermissions\n\r\n\nAction:IsApplicationAuthorizedForAsset\n",
                "operationId": "AssetAuth_IsApplicationAuthorizedForAsset",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedAssetId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: applicationGuid is not a ForgeRock Identity. Asset or Activity is not valid."
                    },
                    "401": {
                        "description": "Unauthorized: Lack of required permissions or Model is not valid"
                    },
                    "403": {
                        "description": "Forbidden: Caller is not authorized to invoke the API."
                    },
                    "500": {
                        "description": "InternalServerError: Unknown error while checking permission."
                    },
                    "501": {
                        "description": "Not Implemented: Api is Not Implemented"
                    }
                },
                "deprecated": false
            }
        },
        "/api/authentication/certificate/systemtypes/{systemType}": {
            "get": {
                "tags": [
                    "CertificateAuthentication"
                ],
                "summary": "Generates JWT token based on client certificate in request",
                "operationId": "CertificateAuthentication_VerifyClientCertificate",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized\r\n                1) Certificate is invalid or expired\r\n                2) Certificate is not bound to any system\r\n                3) Certificate is not valid for given system type"
                    },
                    "403": {
                        "description": "Forbidden\r\n                1) Certificate was not supplied in the request"
                    },
                    "404": {
                        "description": "Not Found\r\n                1) System type is invalid\r\n                2) Service is disabled"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/pki/certificates": {
            "get": {
                "tags": [
                    "CertificateManagement"
                ],
                "summary": "Retrieves all root and intermediate certificates registered in the platform",
                "description": " PREVIEW \r\n\nAuthorization:GlobalActivity-ManageCertificates\n\r\n\nAction:GetAll\n",
                "operationId": "CertificateManagement_GetAll",
                "responses": {
                    "200": {
                        "description": "OK: All registered certificates are returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCertificate"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCertificate"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCertificate"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCertificate"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "CertificateManagement"
                ],
                "summary": "Uploads intermediate or root certificate to the platform.",
                "description": " PREVIEW \r\n\n\r\n            Is used to upload a single certificate to the platform using 'multipart/form-data' content type. \r\n            Upload of multiple certificates at the same time is not allowed. \r\n\nCertificates must be in *.CRT or *.CER format. The certificate may be encoded as Base64 PEM or binary DER. \r\n\nAuthorization:GlobalActivity-ManageCertificates\n\r\n\nAction:UploadCertificate\n",
                "operationId": "CertificateManagement_UploadCertificate",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "webApiCertificateUpload": {
                                        "description": "Certificate in *.CER or *.CRT format. The certificate may be encoded as Base64 PEM or binary DER.",
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "required": [
                                    "webApiCertificateUpload"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created: Certificate was successfuly registered in the platform.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCertificate"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCertificate"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCertificate"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCertificate"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: Certificate has incorrect format or is not valid."
                    },
                    "409": {
                        "description": "Conflict: Certificate is already registered in the platform."
                    },
                    "415": {
                        "description": "Unsupported Media Type: Content type is not supported. The only supported content type is 'multipart/form-data'."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/permissions/applications/{customApplicationId}/entitytypes/{entityType}/entityinstances/{entityInstance}/activities/{activity}": {
            "post": {
                "tags": [
                    "CustomAuth"
                ],
                "summary": "Creates a custom permission for an application",
                "description": "Create a custom group for a custom application\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:CreateCustomPermission\n",
                "operationId": "CustomAuth_CreateCustomPermission",
                "parameters": [
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "description": "CustomApplicationId used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "EntityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "description": "Custom activity used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityInstance",
                        "in": "path",
                        "description": "Instance of entityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, for any other reason"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "CustomAuth"
                ],
                "summary": "Deletes a custom permission for an application",
                "description": "Delete a custom group for a custom application\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:DeleteCustomPermission\n",
                "operationId": "CustomAuth_DeleteCustomPermission",
                "parameters": [
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "description": "CustomApplicationId used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "EntityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "description": "Custom activity used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityInstance",
                        "in": "path",
                        "description": "Instance of entityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, for any other reason"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/users/{userObjectId}/applications/{customApplicationId}/entitytypes/{entityType}/entityinstances/{entityInstance}/activities/{activity}": {
            "post": {
                "tags": [
                    "CustomAuth"
                ],
                "summary": "Adds custom permission to a user",
                "description": "Add user to a custom permission\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:AddCustomPermissionToUser\n",
                "operationId": "CustomAuth_AddCustomPermissionToUser",
                "parameters": [
                    {
                        "name": "userObjectId",
                        "in": "path",
                        "description": "ObjectId of a user to be assigned with custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "description": "CustomApplicationId used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "EntityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "description": "Custom activity used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityInstance",
                        "in": "path",
                        "description": "Instance of entityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request, GroupName invalid"
                    },
                    "500": {
                        "description": "Internal Server Error, for any other reason"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "CustomAuth"
                ],
                "summary": "Removes custom permission from a user",
                "description": "Remove user from a custom permission\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:RemoveCustomPermissionFromUser\n",
                "operationId": "CustomAuth_RemoveCustomPermissionFromUser",
                "parameters": [
                    {
                        "name": "userObjectId",
                        "in": "path",
                        "description": "ObjectId of a user to be unassigned with custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "description": "CustomApplicationId used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "EntityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "description": "Custom activity used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityInstance",
                        "in": "path",
                        "description": "Instance of entityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request, GroupName invalid"
                    },
                    "500": {
                        "description": "Internal Server Error, for any other reason"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/users/{userObjectId}/applications/{customApplicationId}/entitytypes/{entityType}/entityinstances/{entityInstance}": {
            "get": {
                "tags": [
                    "CustomAuth"
                ],
                "summary": "Gets custom permissions granted to a user given an entity type and entity instance",
                "description": "Get custom permissions assigned to user given EntityType and EntityInstance\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:GetUserCustomPermissions\n",
                "operationId": "CustomAuth_GetUserCustomPermissions",
                "parameters": [
                    {
                        "name": "userObjectId",
                        "in": "path",
                        "description": "ObjectId of a user to get assigned custom permissions",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "description": "CustomApplicationId used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "EntityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityInstance",
                        "in": "path",
                        "description": "EntityInstance used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "NotFound, user not found"
                    },
                    "500": {
                        "description": "Internal Server Error, for any other reason"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/users/{userObjectId}/applications/{customApplicationId}/entitytypes/{entityType}": {
            "get": {
                "tags": [
                    "CustomAuth"
                ],
                "summary": "Gets custom permissions granted to a user given an entity type",
                "description": "Get custom permission assigned an application given EntityType\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:GetUserCustomPermissionsByEntityType\n",
                "operationId": "CustomAuth_GetUserCustomPermissionsByEntityType",
                "parameters": [
                    {
                        "name": "userObjectId",
                        "in": "path",
                        "description": "ObjectId of a user to get assigned custom permissions",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "description": "CustomApplicationId used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "EntityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "NotFound, user not found"
                    },
                    "500": {
                        "description": "Internal Server Error, for any other reason"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/applications/{targetCustomApplicationId}/applications/{customApplicationId}/entitytypes/{entityType}/entityinstances/{entityInstance}/activities/{activity}": {
            "post": {
                "tags": [
                    "CustomAuth"
                ],
                "summary": "Adds custom permission to an application",
                "description": "Add custom permission to target application\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:AddCustomPermissionToTargetApplication\n",
                "operationId": "CustomAuth_AddCustomPermissionToTargetApplication",
                "parameters": [
                    {
                        "name": "targetCustomApplicationId",
                        "in": "path",
                        "description": "The custom application which will be added to custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "description": "CustomApplicationId used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "EntityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "description": "Custom activity used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityInstance",
                        "in": "path",
                        "description": "Instance of entityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request, GroupName invalid"
                    },
                    "500": {
                        "description": "Internal Server Error, for any other reason"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "CustomAuth"
                ],
                "summary": "Removes custom permission from an application",
                "description": "Remove custom permission from custom application\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:RemoveCustomPermissionFromTargetApplication",
                "operationId": "CustomAuth_RemoveCustomPermissionFromTargetApplication",
                "parameters": [
                    {
                        "name": "targetCustomApplicationId",
                        "in": "path",
                        "description": "The custom application which will be removed custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "description": "CustomApplicationId used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "EntityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "description": "Custom activity used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityInstance",
                        "in": "path",
                        "description": "Instance of entityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error, for any other reason"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/applications/{targetCustomApplicationId}/applications/{customApplicationId}/entitytypes/{entityType}/entityinstances/{entityInstance}": {
            "get": {
                "tags": [
                    "CustomAuth"
                ],
                "summary": "Gets custom permissions granted to an application given an entity type and entity instance",
                "description": "Get custom permissions assigned to an application given EntityType and EntityInstance\r\n\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:GetTargetApplicationCustomPermissions\n",
                "operationId": "CustomAuth_GetTargetApplicationCustomPermissions",
                "parameters": [
                    {
                        "name": "targetCustomApplicationId",
                        "in": "path",
                        "description": "The custom application which has assigned with custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "description": "CustomApplicationId used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "EntityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityInstance",
                        "in": "path",
                        "description": "EntityInstance used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "NotFound, Application not found"
                    },
                    "500": {
                        "description": "Internal Server Error, for any other reason"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/applications/{targetCustomApplicationId}/applications/{customApplicationId}/entitytypes/{entityType}": {
            "get": {
                "tags": [
                    "CustomAuth"
                ],
                "summary": "Gets custom permissions granted to an application given an entity type",
                "description": "Get custom permissions assigned an application given EntityType\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:GetTargetApplicationCustomPermissionsByEntityType\n",
                "operationId": "CustomAuth_GetTargetApplicationCustomPermissionsByEntityType",
                "parameters": [
                    {
                        "name": "targetCustomApplicationId",
                        "in": "path",
                        "description": "The custom application which has assigned with custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "description": "CustomApplicationId used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "description": "EntityType used to construct a custom permission",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "NotFound, Application Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error, for any other reason"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/permissions/applications/{customApplicationId}/entitytypes/{entityType}/entityinstances/{entityInstance}/activities/{activity}/check": {
            "post": {
                "tags": [
                    "CustomAuthCheck"
                ],
                "summary": "Check if an application has a custom permission",
                "description": "\r\n\nAuthorization:CustomManageActivity-CheckCustomPermission\n\r\n\nAction:IsAuthorizedToCustomPermission\n",
                "operationId": "CustomAuthCheck_IsAuthorizedToCustomPermission",
                "parameters": [
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityInstance",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/permissions/applications/{customApplicationId}/activities": {
            "get": {
                "tags": [
                    "CustomAuthManage"
                ],
                "summary": "Gets custom permissions defined by an application",
                "description": "\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:GetCustomManageActivities\n",
                "operationId": "CustomAuthManage_GetCustomManageActivities",
                "parameters": [
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/applications/{customApplicationId}/activities": {
            "get": {
                "tags": [
                    "CustomAuthManage"
                ],
                "summary": "Gets simple custom permissions for an application",
                "description": "\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:GetApplicationCustomManagePermissions\n",
                "operationId": "CustomAuthManage_GetApplicationCustomManagePermissions",
                "parameters": [
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/users/{userObjectId}/applications/{customApplicationId}/activities": {
            "get": {
                "tags": [
                    "CustomAuthManage"
                ],
                "summary": "Gets simple custom permissions assigned to a user",
                "description": "\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:GetUserCustomManagePermissions\n",
                "operationId": "CustomAuthManage_GetUserCustomManagePermissions",
                "parameters": [
                    {
                        "name": "userObjectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomPermissionsResponse"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/applications/{customApplicationId}/activities/{activity}": {
            "post": {
                "tags": [
                    "CustomAuthManage"
                ],
                "summary": "Adds a simple custom permission to an application",
                "description": "\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:AddCustomManagePermissionToApplication\n",
                "operationId": "CustomAuthManage_AddCustomManagePermissionToApplication",
                "parameters": [
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/CustomAuthManage_AddCustomManagePermissionToApplicationTargetcustomapplicationid"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "CustomAuthManage"
                ],
                "summary": "Deletes a simple custom permission defined by an application",
                "description": "\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:RemoveCustomManagePermissionFromApplication",
                "operationId": "CustomAuthManage_RemoveCustomManagePermissionFromApplication",
                "parameters": [
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/CustomAuthManage_AddCustomManagePermissionToApplicationTargetcustomapplicationid"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/custom/users/{userObjectId}/applications/{customApplicationId}/activities/{activity}": {
            "post": {
                "tags": [
                    "CustomAuthManage"
                ],
                "summary": "Adds simple custom permission to a user",
                "description": "\r\n\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:AddCustomManagePermissionToUser\n",
                "operationId": "CustomAuthManage_AddCustomManagePermissionToUser",
                "parameters": [
                    {
                        "name": "userObjectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "CustomAuthManage"
                ],
                "summary": "Removes simple custom permission from a user",
                "description": "\r\n\nAuthorization:CustomManageActivity-ConfigureCustomPermission\n\r\n\nAction:RemoveCustomManagePermissionFromUser\n",
                "operationId": "CustomAuthManage_RemoveCustomManagePermissionFromUser",
                "parameters": [
                    {
                        "name": "userObjectId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customApplicationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activity",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthWebApiResponse"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes": {
            "get": {
                "tags": [
                    "DeviceTypeAdmin"
                ],
                "summary": "Gets all device types",
                "description": "An authorized user who has access to manage device types can use this API to get all the device types\r\n\nAuthorization:GlobalActivity-ReadDeviceType\n\r\n\nAction:GetDeviceTypes\n",
                "operationId": "DeviceTypeAdmin_GetDeviceTypes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiDeviceType"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiDeviceType"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiDeviceType"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiDeviceType"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "DeviceTypeAdmin"
                ],
                "summary": "Adds a device type",
                "description": "An authorized user who has access to manage device types can use this API to add a device \r\n            device type with the specified device id, name and description\r\n\nAuthorization:GlobalActivity-ManageDeviceType\n\r\n\nAction:AddDeviceTypeAsync\n",
                "operationId": "DeviceTypeAdmin_AddDeviceTypeAsync",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeviceTypeAddRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeviceTypeAddRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeviceTypeAddRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeviceTypeAddRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeviceTypeAddRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}": {
            "get": {
                "tags": [
                    "DeviceTypeAdmin"
                ],
                "summary": "Gets device type details",
                "description": "An authorized user who has access to manage device types can use this API to get a specific identified device type\r\n\nAuthorization:GlobalActivity-ReadDeviceType\n\r\n\nAction:GetDeviceType\n",
                "operationId": "DeviceTypeAdmin_GetDeviceType",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceType"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceType"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceType"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceType"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "DeviceTypeAdmin"
                ],
                "summary": "Deletes a device type",
                "description": "An authorized user who has access to manage device types can use this API to delete a device \r\n            type by specifying its id\r\n\nAuthorization:GlobalActivity-ManageDeviceType\n\r\n\nAction:DeleteDeviceType\n",
                "operationId": "DeviceTypeAdmin_DeleteDeviceType",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/deviceTypes/{deviceType}": {
            "get": {
                "tags": [
                    "DeviceTypeApplicationAuth"
                ],
                "summary": "Gets device type permissions for an application",
                "description": "\r\n\nAuthorization:GlobalActivity-ConfigureDeviceTypePermission\n\r\n\nAction:GetApplicationDeviceTypePermissions\n",
                "operationId": "DeviceTypeApplicationAuth_GetApplicationDeviceTypePermissions",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceTypeActivitiesResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceTypeActivitiesResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceTypeActivitiesResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceTypeActivitiesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "DeviceTypeApplicationAuth"
                ],
                "summary": "Adds device type permissions to an application",
                "description": "\r\n\nAuthorization:GlobalActivity-ConfigureDeviceTypePermission\n\r\n\nAction:AddDeviceTypePermissionsToApplication\n",
                "operationId": "DeviceTypeApplicationAuth_AddDeviceTypePermissionsToApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiDeviceTypePermissionsRequest"
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/devicetypes/{deviceType}": {
            "get": {
                "tags": [
                    "DeviceTypeApplicationAuth"
                ],
                "summary": "Get device type permissions for a user",
                "description": "\r\n\nAuthorization:GlobalActivity-ConfigureDeviceTypePermission\n\r\n\nAction:GetUserDeviceTypePermissions\n",
                "operationId": "DeviceTypeApplicationAuth_GetUserDeviceTypePermissions",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceTypeActivitiesResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceTypeActivitiesResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceTypeActivitiesResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiDeviceTypeActivitiesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "DeviceTypeApplicationAuth"
                ],
                "summary": "Removes device type permission from a user",
                "description": "\r\n\nAuthorization:GlobalActivity-ConfigureDeviceTypePermission\n\r\n\nAction:RemoveDeviceTypePermissionsFromUser\n",
                "operationId": "DeviceTypeApplicationAuth_RemoveDeviceTypePermissionsFromUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiDeviceTypePermissionsRequest"
                },
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/deviceTypes/{deviceType}": {
            "post": {
                "tags": [
                    "DeviceTypeApplicationAuth"
                ],
                "summary": "Adds device type permissions to a user",
                "description": "\r\n\nAuthorization:GlobalActivity-ConfigureDeviceTypePermission\n\r\n\nAction:AddDeviceTypePermissionsToUser\n",
                "operationId": "DeviceTypeApplicationAuth_AddDeviceTypePermissionsToUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiDeviceTypePermissionsRequest"
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/devicetypes/{deviceType}": {
            "delete": {
                "tags": [
                    "DeviceTypeApplicationAuth"
                ],
                "summary": "Removes device type permissions from an application",
                "description": "\r\n\nAuthorization:GlobalActivity-ConfigureDeviceTypePermission\n\r\n\nAction:RemoveDeviceTypePermissionsFromApplication\n",
                "operationId": "DeviceTypeApplicationAuth_RemoveDeviceTypePermissionsFromApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiDeviceTypePermissionsRequest"
                },
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/services/devicetype": {
            "get": {
                "tags": [
                    "DeviceTypeApplicationAuth"
                ],
                "summary": "Gets all activities applicable to device types.",
                "description": "An authorized application or user uses this API to retrieve all device type activities.\r\n\nAuthorization:GlobalActivity-ConfigureDeviceTypePermission\n\r\n\nAction:GetDeviceTypeServiceActivities\n",
                "operationId": "DeviceTypeApplicationAuth_GetDeviceTypeServiceActivities",
                "responses": {
                    "200": {
                        "description": "OK: Successfully retrieved permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "NotContent: No activites found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized: Caller does not have the required permissions."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/configuration": {
            "get": {
                "tags": [
                    "DeviceTypeConfigurationAdmin"
                ],
                "summary": "Gets a collection of device type configurations according to a given device type",
                "description": "An authorized user who has access to manage device type configurations can use this API to get a list of all the available \r\n            device type configurations for the specified device type\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:GetDeviceTypeConfigurations\n",
                "operationId": "DeviceTypeConfigurationAdmin_GetDeviceTypeConfigurations",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiDeviceTypeConfiguration"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiDeviceTypeConfiguration"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiDeviceTypeConfiguration"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiDeviceTypeConfiguration"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/configuration/{key}": {
            "get": {
                "tags": [
                    "DeviceTypeConfigurationAdmin"
                ],
                "summary": "Gets a device type configuration according to a given device type and a key",
                "description": "An authorized user who has access to manage device type configuration can use this API to get a specific device type \r\n            configuration value by specifying its device type and key\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:GetSpecificDeviceTypeConfiguration\n",
                "operationId": "DeviceTypeConfigurationAdmin_GetSpecificDeviceTypeConfiguration",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "DeviceTypeConfigurationAdmin"
                ],
                "summary": "Adds a device type configuration according to a given device type, a key and its value",
                "description": "An authorized user who has access to manage device type configuration can use this API to add a device type configuration\r\n            for the specified device type, key and its value\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:AddOrUpdateDeviceTypeConfiguration\n",
                "operationId": "DeviceTypeConfigurationAdmin_AddOrUpdateDeviceTypeConfiguration",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/CustomAuthManage_AddCustomManagePermissionToApplicationTargetcustomapplicationid"
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "DeviceTypeConfigurationAdmin"
                ],
                "summary": "Deletes an existing device type configuration",
                "description": "An authorized user who has access to manage device type configuration can use this API to delete a system \r\n            type configuration by specifying its device type and the key of the configuration\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:DeleteDeviceTypeConfiguration\n",
                "operationId": "DeviceTypeConfigurationAdmin_DeleteDeviceTypeConfiguration",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/systemtypes/{systemType}/batchimport": {
            "post": {
                "tags": [
                    "FactoryRegistration"
                ],
                "summary": "Registers a new system with a user identity",
                "description": " This method adds a batch of new systems with the same systemType to the system registry. \r\n\nThis method requires a User Identity. \r\n\nAll systems start with a provisioning status of NotProvisioned which can be modified by using the SystemRegistrationAdmin APIs. \r\n\nSystems are defined by systemType and webApiFactorySystemDetails, the registration result will be returned. \r\n\nAuthorization:SystemTypeActivity-RegisterSystemType\r\n\n\nAction:RegisterBatch\n",
                "operationId": "FactoryRegistration_RegisterBatch",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiFactorySystemDetails"
                                }
                            }
                        },
                        "text/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiFactorySystemDetails"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiFactorySystemDetails"
                                }
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiFactorySystemDetails"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiFactorySystemDetails"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactorySystemRegistrationResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactorySystemRegistrationResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactorySystemRegistrationResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/FactorySystemRegistrationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: Input parameters are not valid. Can be caused by missing or invalid system authentication details."
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/systemtypes/{systemType}/batchimportsubsystems": {
            "post": {
                "tags": [
                    "FactoryRegistration"
                ],
                "summary": "Registers subsystems using a factory fixture or user identity",
                "description": " This method adds a batch of new subsystems with the same systemType to the system registry. \r\n\nAuthorization:SystemTypeActivityOrFixture-RegisterSystem\n\r\n\nAction:RegisterSubsystemBatch\n",
                "operationId": "FactoryRegistration_RegisterSubsystemBatch",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiSubsystemDetails"
                                }
                            }
                        },
                        "text/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiSubsystemDetails"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiSubsystemDetails"
                                }
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiSubsystemDetails"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiSubsystemDetails"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFactorySubsystemBatchRegistrationResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFactorySubsystemBatchRegistrationResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFactorySubsystemBatchRegistrationResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFactorySubsystemBatchRegistrationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters or duplicate items."
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems": {
            "post": {
                "tags": [
                    "FactoryRegistration"
                ],
                "summary": "Register new system from a factory fixture",
                "description": " This method allows adding of a new system to the system registry. \r\n\nThis method requires an Identity token for a fixture obtained through FixtureRpkChallenge apis: [api/authentication/fixture/rpkchallenge] and [api/authentication/fixture/rpkchallengeresponse]. \r\n\nThe system start with a provisioning status of NotProvisioned which can be modified by using the SystemRegistrationAdmin APIs. \r\n\nOnce the system is imported, and the result and ownership code for the system is returned in the response. ",
                "operationId": "FactoryRegistration_RegisterSystem",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemDetail"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemDetail"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemDetail"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemDetail"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemDetail"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistrationResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistrationResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistrationResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistrationResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "409": {
                        "description": "Conflict: Certificate is already being used."
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/systemtypes/{systemType}/systems/{base64EncodedSystemId}/publickey": {
            "post": {
                "tags": [
                    "FactoryRegistration"
                ],
                "summary": "Adds an additional public key to a system registration",
                "description": "Given the system type and system Id, and public key this method will append public key information for existing system.\r\n\nAuthorization:SystemTypeActivity-AddRedundantPublicKey\n\r\n\nAction:AppendSecondaryPublicKey\n",
                "operationId": "FactoryRegistration_AppendSecondaryPublicKey",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "Type of the System",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedSystemId",
                        "in": "path",
                        "description": "Registration system Id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemPublicKey"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemPublicKey"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemPublicKey"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemPublicKey"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemPublicKey"
                            }
                        }
                    },
                    "description": "public key information",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error: When any internal operations fail."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/systemtypes/{systemType}/v2/systems/{systemId}": {
            "delete": {
                "tags": [
                    "FactoryRegistration"
                ],
                "summary": "Deregisters a system so it can no longer authenticate",
                "description": "Given the system type and system Id, this method checks if the system is in NotProvisioned State and then Deregister it.\r\n\nAuthorization:SystemTypeActivity-DeRegisterSystem\n\r\n\nAction:DeRegisterSystemV2\n",
                "operationId": "FactoryRegistration_DeRegisterSystemV2",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "Type of the System",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemId",
                        "in": "path",
                        "description": "Base64 encoded system id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found: System provisioning status unknown."
                    },
                    "409": {
                        "description": "Conflict: Invalid Provisioning Status for De-Registration. System should be in Not-Provisioned Status."
                    },
                    "500": {
                        "description": "Internal Server Error: When any internal operations fail."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/systemtypes/{systemType}/systems/{base64EncodedSystemId}/certificate": {
            "post": {
                "tags": [
                    "FactoryRegistration"
                ],
                "summary": "Assigns a new X.509 certificate to a system using certificate authentication",
                "description": " \r\n\n\r\n            Given the system type and system Id, this method will assign a certificate to the system.\r\n            Can be use to assign renewed certificate.\r\n             \r\n\nAuthorization:SystemTypeActivity-RegisterSystem\n\r\n\nAction:AppendCertificate\n",
                "operationId": "FactoryRegistration_AppendCertificate",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "Type of the system",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedSystemId",
                        "in": "path",
                        "description": "Base64 encoded System ID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFactoryCertificateDetails"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFactoryCertificateDetails"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFactoryCertificateDetails"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFactoryCertificateDetails"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFactoryCertificateDetails"
                            }
                        }
                    },
                    "description": "Certificate details containing e.g. thumbprint, distinguished name and its issuer.",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "NoContent: Certificate was sucessfully assigned to the system."
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters or the system is not using certificate authentication."
                    },
                    "404": {
                        "description": "NotFound: System was not found."
                    },
                    "409": {
                        "description": "Conflict: Certificate is already being used."
                    },
                    "500": {
                        "description": "Internal Server Error: When any internal operations fail."
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/versions": {
            "get": {
                "tags": [
                    "FirmwareUpdateAdmin"
                ],
                "summary": "Gets a collection of versionable asset according to a given device type",
                "description": "An authorized user who has access to manage versionable assets can use this API to get a list of all the available \r\n            versionable assets for the specified device type\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:GetVersionableAssetsByDeviceType\n",
                "operationId": "FirmwareUpdateAdmin_GetVersionableAssetsByDeviceType",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/assets/{assetType}/versions": {
            "get": {
                "tags": [
                    "FirmwareUpdateAdmin"
                ],
                "summary": "Gets a collection of versionable asset according to a given device type and asset type",
                "description": "An authorized user who has access to manage versionable assets can use this API to get a list of all the available \r\n            versionable assets for the specified device type and asset type\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:GetVersionableAssetsByAssetType\n",
                "operationId": "FirmwareUpdateAdmin_GetVersionableAssetsByAssetType",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "assetType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "FirmwareUpdateAdmin"
                ],
                "summary": "OBSOLETE: Uploads a versionable asset according to a given device type and asset type",
                "description": "An authorized user who has access to manage versionable assets can use this API to upload binaries for a versionable \r\n            asset for the specified device type and asset type\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:UploadVersionableAsset\n",
                "operationId": "FirmwareUpdateAdmin_UploadVersionableAsset",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "assetType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiVersionableAssetUploadRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiVersionableAssetUploadRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiVersionableAssetUploadRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiVersionableAssetUploadRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiVersionableAssetUploadRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": true
            }
        },
        "/api/updates/deviceTypes/{deviceType}/assets/{assetType}/versions/{version}": {
            "get": {
                "tags": [
                    "FirmwareUpdateAdmin"
                ],
                "summary": "Gets a versionable asset according to a given device type, asset type and version",
                "description": "An authorized user who has access to manage versionable assets can use this API to get a specific versionable \r\n            asset by specifying its device type, asset type and version\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:GetSpecificAssetVersion\n",
                "operationId": "FirmwareUpdateAdmin_GetSpecificAssetVersion",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "assetType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiVersionableAssetVersion"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "FirmwareUpdateAdmin"
                ],
                "summary": "Deletes an uploaded versionable asset",
                "description": "An authorized user who has access to manage versionable assets can use this API to delete a versionable \r\n            asset by specifying its device type, asset type and version\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:DeleteVersionableAsset\n",
                "operationId": "FirmwareUpdateAdmin_DeleteVersionableAsset",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "assetType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/assets/{assetType}/versions/stream": {
            "post": {
                "tags": [
                    "FirmwareUpdateAdmin"
                ],
                "summary": "Uploads a versionable Asset according to a given Device type and Asset type",
                "description": "An authorized user who has access to manage versionable assets can use this API to upload the file for a versionable \r\n            asset for the specified device type and asset type. The request body should be of multipart content type with the \r\n            \"WebApiVersionableAssetStreamUploadRequest\" being the first part and the file stream as the second part.\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:UploadVersionableAssetStream\n",
                "operationId": "FirmwareUpdateAdmin_UploadVersionableAssetStream",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "assetType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "webApiVersionableAssetFileStream": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "required": [
                                    "webApiVersionableAssetFileStream"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created: Uploaded Asset and created new Asset."
                    },
                    "400": {
                        "description": "BadRequest: Invalid request. Unable to parse Asset upload request and/or Asset stream."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failure when trying to upload. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: Not Allowed to upload Asset."
                    },
                    "404": {
                        "description": "NotFound: Unable to find Device type."
                    },
                    "409": {
                        "description": "Conflict: A version of the Asset with the same version number already exists for the device type."
                    },
                    "415": {
                        "description": "UnsupportedMediaType: Request is not multipart. Request should be multipart content with Asset\r\n            upload request information and Asset file."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/assets/{assetType}/versions/{version}/releaseState": {
            "put": {
                "tags": [
                    "FirmwareUpdateAdmin"
                ],
                "summary": "Updates the release state of an existing version.",
                "description": "An authorized user who has access to manage versionable assets can use this API update the release state of an existing version.\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:ReleaseVersionableAsset\n",
                "operationId": "FirmwareUpdateAdmin_ReleaseVersionableAsset",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "assetType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/CustomAuthManage_AddCustomManagePermissionToApplicationTargetcustomapplicationid"
                },
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/assets/{assetType}/versions/{version}/compatibleversions": {
            "put": {
                "tags": [
                    "FirmwareUpdateAdmin"
                ],
                "summary": "Updates compatible versions of an existing asset.",
                "description": "An authorized user who has access to manage versionable assets can use this API to update the compatible versions of an \r\n            existing asset. Any empty values passed for compatible versions will be filtered out and may result in clearing any compatible\r\n            versions constraint if the filtered result is empty.\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:UpdateCompatibleVersionsOfAsset\n",
                "operationId": "FirmwareUpdateAdmin_UpdateCompatibleVersionsOfAsset",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "assetType",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/systemIds/{base64EncodedSystemId}": {
            "get": {
                "tags": [
                    "FirmwareUpdateAdmin"
                ],
                "summary": "Gets the current firmware details of a device.",
                "description": "This API can be used by applications to determine the current firmware version and the verification code for a device given the deviceType, and the systemId.\r\n\nAuthorization:DeviceTypeActivity-FirmwareStatusRead\r\n\n\nAction:GetDeviceFirmwareDetail\n",
                "operationId": "FirmwareUpdateAdmin_GetDeviceFirmwareDetail",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "description": "The type of the device.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedSystemId",
                        "in": "path",
                        "description": "Base 64 encoded system Id.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully fetched the response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiGetDeviceFirmwareDetailResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiGetDeviceFirmwareDetailResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiGetDeviceFirmwareDetailResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiGetDeviceFirmwareDetailResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: SystemId is null, white space or greater than 50 characters."
                    },
                    "401": {
                        "description": "Unauthorized: The caller is not authorized against the activity FirmwareStatusRead."
                    },
                    "404": {
                        "description": "NoFound: No entry found for the given deviceType, and systemId."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected error."
                    }
                },
                "deprecated": false
            }
        },
        "/api/authentication/fixture/rpkchallenge": {
            "post": {
                "tags": [
                    "FixtureRpkChallenge"
                ],
                "summary": "Generate a challenge for factory fixture authentication via RPK",
                "description": "This API generates a cryptographically random number to challenge the caller. The caller is expected\r\n            to sign the challenge with its own private key and submit the response to [api/authentication/fixture/rpkchallengeresponse] to authenticate itself",
                "operationId": "FixtureRpkChallenge_RequestChallenge",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFixtureDetails"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFixtureDetails"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFixtureDetails"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFixtureDetails"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFixtureDetails"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RpkChallenge"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RpkChallenge"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/RpkChallenge"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/RpkChallenge"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request\r\n                1) FixtureDetails is null\r\n                2) FixtureDetail.FixtureId is null"
                    },
                    "401": {
                        "description": "Unauthorized\r\n                1) Fixture has expired"
                    },
                    "404": {
                        "description": "Not Found\r\n                1) Fixture not registered earlier"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/authentication/fixture/rpkchallengeresponse": {
            "post": {
                "tags": [
                    "FixtureRpkChallenge"
                ],
                "summary": "Validate the challenge response for factory fixture authentication via RPK",
                "description": "On successful validation this API returns a time limited JWT token that can be used\r\n            to call api/systems/ to register system from the fixture.",
                "operationId": "FixtureRpkChallenge_VerifyChallengeResponse",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FixtureRpkChallengeResponse"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FixtureRpkChallengeResponse"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/FixtureRpkChallengeResponse"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/FixtureRpkChallengeResponse"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/FixtureRpkChallengeResponse"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request\r\n                1) challengeResponse is null\r\n                2) challengeResponse.FixtureId is null\r\n                3) challengeResponse.ClientRandom is null\r\n                4) challengeResponse.ClientRandomSignature is null"
                    },
                    "401": {
                        "description": "Unauthorized\r\n                1) Challenge is expired\r\n                2) Cannot validate challenge signature"
                    },
                    "404": {
                        "description": "1) Fixture not registered\r\n                2) No challenge generated for the fixure earlier"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/fixtures": {
            "get": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Gets registered factory fixtures",
                "description": "An authorized user who has access to manage the fixtures can use this API to get list of all registered factory fixtures\r\n\nAuthorization:GlobalActivity-ManageFixture\n\r\n\nAction:GetFixtures\n",
                "operationId": "Fixtures_GetFixtures",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiFixtureDetailsResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiFixtureDetailsResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiFixtureDetailsResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiFixtureDetailsResponse"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized : Caller does not have permission to retrieve registered factory fixtures."
                    },
                    "500": {
                        "description": "Error occured while trying to retrieve factory fixtures.Request can be retried"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Register a new factory fixture",
                "description": " Register a new Factory Fixture. \r\n\nA Factory Fixture has the ability to register new Systems of specified types. \r\n\nAuthorization:GlobalActivity-CreateFixture\n\r\n\nAction:CreateFixture\n",
                "operationId": "Fixtures_CreateFixture",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFixtureRegistrationRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFixtureRegistrationRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFixtureRegistrationRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFixtureRegistrationRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiFixtureRegistrationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFixtureRegistrationResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFixtureRegistrationResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFixtureRegistrationResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFixtureRegistrationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Bad parameter."
                    },
                    "403": {
                        "description": "Unauthorized : Caller does not have permission to register factory fixtures."
                    },
                    "409": {
                        "description": "Conflict :If the passed public key is already registered"
                    },
                    "500": {
                        "description": "Error occured while trying to save factory fixture details to factory fixture registry.Request can be retried"
                    }
                },
                "deprecated": false
            }
        },
        "/api/fixtures/{fixtureId}": {
            "put": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Revokes a factory fixture",
                "description": "An authorized user who has access to manage the fixtures can use this API to revoke a registered factory fixture\r\n\nAuthorization:GlobalActivity-ManageFixture\n\r\n\nAction:RevokeFixture\n",
                "operationId": "Fixtures_RevokeFixture",
                "parameters": [
                    {
                        "name": "fixtureId",
                        "in": "path",
                        "description": "Unique Id of the fixture",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "403": {
                        "description": "Unauthorized : Caller does not have permission to revoke the registered factory fixture."
                    },
                    "404": {
                        "description": "Not found: If the given fixture is not registered."
                    },
                    "500": {
                        "description": "Error occured while trying to revoke the factory fixture.Request can be retried"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Deletes a factory fixture",
                "description": "An authorized user who has access to manage the fixtures can use this API to delete a registered factory fixture\r\n\nAuthorization:GlobalActivity-ManageFixture\n\r\n\nAction:DeleteFixture\n",
                "operationId": "Fixtures_DeleteFixture",
                "parameters": [
                    {
                        "name": "fixtureId",
                        "in": "path",
                        "description": "Unique Id of the fixture",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "403": {
                        "description": "Unauthorized : Caller does not have permission to delete the registered factory fixture."
                    },
                    "404": {
                        "description": "Not found: If the given fixture is not registered."
                    },
                    "500": {
                        "description": "Error occured while trying to delete the factory fixture.Request can be retried"
                    }
                },
                "deprecated": false
            }
        },
        "/api/fixtures/{fixtureId}/systemtypes/{systemType}": {
            "post": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Adds a system type to the types a factory fixture can register",
                "description": "An authorized user who has access to add a system type to a registered factory fixtures can use this API\r\n            to add a system type to a registered factory fixture\r\n\nAuthorization:SystemTypeActivity-ManageFixtureSystemTypesMapping\n\r\n\nAction:AddSystemTypeToFixture\n",
                "operationId": "Fixtures_AddSystemTypeToFixture",
                "parameters": [
                    {
                        "name": "fixtureId",
                        "in": "path",
                        "description": "UniqueId of the registered fixture",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request: Bad parameter."
                    },
                    "403": {
                        "description": "Unauthorized : Caller does not have permission to add systemtype to the registered factory fixture."
                    },
                    "500": {
                        "description": "Error occured while trying to add system type to the  factory fixture.Request can be retried"
                    }
                },
                "deprecated": false
            }
        },
        "/api/fixtures/{fixtureId}/systemtypes": {
            "get": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Gets the system types a factory fixture can register",
                "description": "An authorized user who has access to manage the fixtures can use this API to get list of associated system types on a registered factory fixture\r\n\nAuthorization:GlobalActivity-ManageFixture\n\r\n\nAction:GetFixtureSystemTypeMappings\n",
                "operationId": "Fixtures_GetFixtureSystemTypeMappings",
                "parameters": [
                    {
                        "name": "fixtureId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized : Caller does not have permission to retrieve the associated system types on the registered factory fixture."
                    },
                    "500": {
                        "description": "Error occured while trying to retrieve the associated system types on the fixture. Request can be retried"
                    }
                },
                "deprecated": false
            }
        },
        "/api/fixtures/{fixtureId}/systemTypes/{systemType}": {
            "delete": {
                "tags": [
                    "Fixtures"
                ],
                "summary": "Removes a system type from the type a factory fixture can register",
                "description": "An authorized user who has access to associate system type to a fixture can use this API to remove a system type from registered fixture\r\n\nAuthorization:SystemTypeActivity-ManageFixtureSystemTypes\n\r\n\nAction:RemoveSystemTypeFromFixture\n",
                "operationId": "Fixtures_RemoveSystemTypeFromFixture",
                "parameters": [
                    {
                        "name": "fixtureId",
                        "in": "path",
                        "description": "Unique Id of the fixture",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "403": {
                        "description": "Unauthorized : Caller does not have permission to remove a system type from registered factory fixture."
                    },
                    "404": {
                        "description": "Not found: If the given system type is not found on the fixture."
                    },
                    "500": {
                        "description": "Error occured while trying to remove system type from fixture.Request can be retried"
                    }
                },
                "deprecated": false
            }
        },
        "/api/modeltypes": {
            "get": {
                "tags": [
                    "ModelTypeAdmin"
                ],
                "summary": "Gets model types",
                "description": "An admin can use this API to get all model types\r\n\nAuthorization:GlobalActivity-ListModelTypes\n\r\n\nAction:GetModelTypes\n",
                "operationId": "ModelTypeAdmin_GetModelTypes",
                "responses": {
                    "200": {
                        "description": "OK: The result is the collection of model types.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Lack of required permissions. Required activity: ListModelTypes."
                    },
                    "403": {
                        "description": "Forbidden: Not allowed to get model types."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ModelTypeAdmin"
                ],
                "summary": "Adds a model type",
                "description": "Admin can use this API to add a new model type with the specified details\r\n\nAuthorization:GlobalActivity-RegisterModelType\n\r\n\nAction:RegisterModelType\n",
                "operationId": "ModelTypeAdmin_RegisterModelType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiModelTypeRegistrationRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiModelTypeRegistrationRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiModelTypeRegistrationRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiModelTypeRegistrationRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiModelTypeRegistrationRequest"
                            }
                        }
                    },
                    "description": "Model type details",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created: Registered a new model type.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Lack of required permissions. Required activity: RegisterModel."
                    },
                    "403": {
                        "description": "Forbidden: Not allowed to add a model type."
                    },
                    "409": {
                        "description": "Conflict: A model type with the same modelTypeId already exists, and its corresponding permissions have already been created."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/modeltypes/{modelTypeId}": {
            "get": {
                "tags": [
                    "ModelTypeAdmin"
                ],
                "summary": "Gets a model type",
                "description": "An admin can use this API to get model type details by modelTypeId\r\n\nAuthorization:GlobalActivity-ListModelTypes\n\r\n\nAction:GetModelType\n",
                "operationId": "ModelTypeAdmin_GetModelType",
                "parameters": [
                    {
                        "name": "modelTypeId",
                        "in": "path",
                        "description": "modelTypeId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: The result is the model type with the requested modelTypeId.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiModelTypeResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Lack of required permissions. Required activity: ListModelTypes."
                    },
                    "403": {
                        "description": "Forbidden: Not allowed to get a model type."
                    },
                    "404": {
                        "description": "NotFound: Model type with specified modelTypeId doesn't exists."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/v2": {
            "post": {
                "tags": [
                    "NewApplication"
                ],
                "summary": "Creates a new application identity in Sentience Active Directory",
                "description": " Register an Azure AD Application that can be used to make requests against the Sentience Platform. \r\n\nBy default the following permissions are added to the newly created application: \r\n\nGlobal permission (CustomApplications) and Custom permission (ConfigureCustomPermission, CheckCustomPermission),  \r\n\nso that newly created application can have basic permission to consume Sentience Services \r\n\nand to manage permissions for its downstream consumers. \r\n\nAuthorization:GlobalActivity-CreateCustomApplication</p>\r\n\n\nAction:RegisterApplicationV2\n",
                "operationId": "NewApplication_RegisterApplicationV2",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewApplicationRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NewApplicationRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/NewApplicationRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/NewApplicationRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/NewApplicationRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiApplicationRegistrationResult"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiApplicationRegistrationResult"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiApplicationRegistrationResult"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiApplicationRegistrationResult"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: request is not on behalf of an user"
                    },
                    "500": {
                        "description": "Internal Server Error: When any internal operations fail."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/v3": {
            "post": {
                "tags": [
                    "NewApplication"
                ],
                "summary": "Creates an application identity in Sentience IAM.",
                "description": "An authorized application or user can use this API to create an application identity in Sentience IAM.\r\n            Note: The application identity will be created in ForgeRock. For creating application identity in Azure AD, please use the v2 version of this API.\r\n\nAuthorization:GlobalActivity-CreateCustomApplication</p>\r\n\n\nAction:RegisterApplicationV3\n",
                "operationId": "NewApplication_RegisterApplicationV3",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateApplicationRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateApplicationRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateApplicationRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateApplicationRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateApplicationRequest"
                            }
                        }
                    },
                    "description": "The request which contains the parameters required to create the application identity.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully created application identity.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCreateApplicationResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCreateApplicationResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCreateApplicationResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCreateApplicationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: In following cases.\r\n            1. ApplicationName is null or empty.\r\n            2. RedirectionUrl is null or empty.\r\n            3. RedirectionUrl is not https.\r\n            4. If SupportEmail is provided but not in proper email format (Note: SupportEmail is an optional field though).\r\n            5. Request body is null."
                    },
                    "401": {
                        "description": "Unauthorized: The caller is not authorized to perform this action."
                    },
                    "403": {
                        "description": "Forbidden: The caller is forbidden from performing this action."
                    },
                    "409": {
                        "description": "Conflict: The application identity with the same name already exists."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/permissions/self": {
            "post": {
                "tags": [
                    "PermissionChecker"
                ],
                "summary": "Checks the permission for the current caller.",
                "description": "Checks the permission for the current caller\r\n\nAuthorization:GlobalActivity-CheckSelfPermissions\n\r\n\nAction:CheckSelfPermissions\n",
                "operationId": "PermissionChecker_CheckSelfPermissions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCheckSelfPermissionRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCheckSelfPermissionRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCheckSelfPermissionRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCheckSelfPermissionRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCheckSelfPermissionRequest"
                            }
                        }
                    },
                    "description": "permission request",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCheckPermissionResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCheckPermissionResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCheckPermissionResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCheckPermissionResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameter. EntityId, EntityType or ActivityIds is null or empty. Supplied Invalid EntityType or ActivityIds."
                    },
                    "403": {
                        "description": "Unauthorized: Caller is not authorized to invoke the API."
                    },
                    "500": {
                        "description": "InternalServerError: Unknown error while checking permission."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/permissions": {
            "post": {
                "tags": [
                    "PermissionChecker"
                ],
                "summary": "Checks the permission for the supplied application/user.",
                "description": "Checks the permission for the supplied application/user.\r\n\nAuthorization:GlobalActivity-CheckPermissions\n\r\n\nAction:CheckPermissions\n",
                "operationId": "PermissionChecker_CheckPermissions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCheckPermissionRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCheckPermissionRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCheckPermissionRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCheckPermissionRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCheckPermissionRequest"
                            }
                        }
                    },
                    "description": "permission request",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCheckPermissionResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCheckPermissionResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCheckPermissionResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiCheckPermissionResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameter. EntityId, EntityType or ActivityIds is null or empty. Supplied Invalid EntityType or ActivityId."
                    },
                    "403": {
                        "description": "Unauthorized: Caller is not authorized to invoke the API."
                    },
                    "500": {
                        "description": "InternalServerError: Unknown error while checking permission."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/projects/{base64EncodedParentProjectName}/subprojects": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "PREVIEW - Get the list of sub projects under a project.",
                "description": "PREVIEW - This Api can be called by a user or application to get the list of all sub projects under a project. \r\n            If the parent project is root, then pass base64Encoded \"/\" as the value of base64EncodedParentProjectName parameter.\r\n\nAuthorization:GlobalActivity-ManageProjects\n\r\n\nAction:FetchProjects\n",
                "operationId": "Project_FetchProjects",
                "parameters": [
                    {
                        "name": "base64EncodedParentProjectName",
                        "in": "path",
                        "description": "Pass the parent project name. If the parent project is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok: Successfully fetched all projects.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchProjectsReponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchProjectsReponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchProjectsReponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchProjectsReponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: On following cases\r\n            1. If the project name starts with \"/\".\r\n            2. If project name is null or empty.\r\n            3. If the project name is not a valid base64 encoded value"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the parent project is not found."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/projects": {
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "PREVIEW - Creates a project in Sentience.",
                "description": "PREVIEW - An application or user can call this Api to create a project so that they can create tags for authorization under that.\r\n\nAuthorization:GlobalActivity-ManageProjects\n\r\n\nAction:CreateProject\n",
                "operationId": "Project_CreateProject",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectRequest"
                            }
                        }
                    },
                    "description": "Create Project Request which has the name of the project to be created.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created: Successfully created project."
                    },
                    "400": {
                        "description": "BadRequest: On following cases\r\n            1. If the project name is starting with \"/\".\r\n            2. If the project name is null or empty."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the parent project is not found."
                    },
                    "409": {
                        "description": "Conflict: The project with same name already exists."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/projects/{base64EncodedProjectName}": {
            "delete": {
                "tags": [
                    "Project"
                ],
                "summary": "PREVIEW - Deletes a project in Sentience.",
                "description": "\r\n\nAuthorization:GlobalActivity-ManageProjects\n\r\n\nAction:DeleteProject\n",
                "operationId": "Project_DeleteProject",
                "parameters": [
                    {
                        "name": "base64EncodedProjectName",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok: Successfully deleted the project."
                    },
                    "400": {
                        "description": "BadRequest: On following cases\r\n            1. If the project name is starting with \"/\".\r\n            2. If the project name is null or empty.\r\n            3. If the project name is not a valid base64 encoded value"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the project does not exist."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/project/activities": {
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "PREVIEW - Create activities in a project.",
                "description": "PREVIEW - An application or user can call this Api to create activities in a project.\r\n\nAuthorization:GlobalActivity-ManageProjectActivities</p>\r\n\n\nAction:CreateProjectActivities\n",
                "operationId": "Project_CreateProjectActivities",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectActivitiesRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectActivitiesRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectActivitiesRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectActivitiesRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectActivitiesRequest"
                            }
                        }
                    },
                    "description": "Create Project activities Request contains the name of the project and the list of activities that has to be created under it.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created: Successfully created activities."
                    },
                    "400": {
                        "description": "BadRequest: On following cases\r\n            1. Project name is starting with \"/\".\r\n            2. Project name is null or empty.\r\n            3. Project is not found.\r\n            4. Activities list is null or empty."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the project is not found."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/projects/{base64EncodedProjectName}/activities": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "PREVIEW - Get the list of activities under a project.",
                "description": "PREVIEW - This Api can be called by a user or application to get the list of all activities under a project. \r\n            If the parent project is root, then pass base64Encoded \"/\" as the value of base64EncodedProjectName parameter.\r\n\nAuthorization:GlobalActivity-ManageProjectActivities</p>\r\n\n\nAction:GetProjectActivities\n",
                "operationId": "Project_GetProjectActivities",
                "parameters": [
                    {
                        "name": "base64EncodedProjectName",
                        "in": "path",
                        "description": "Pass the project name. If the project is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok: Successfully fetched all activities.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchProjectActivitiesResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchProjectActivitiesResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchProjectActivitiesResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchProjectActivitiesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: On following cases\r\n            1. If the project name starts with \"/\".\r\n            2. If project name is null or empty.\r\n            3. If the project name is not a valid base64 encoded value\r\n            4. Project is not found."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the project is not found."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Project"
                ],
                "summary": "PREVIEW - Delete the list of activities for a project.",
                "description": "PREVIEW - This Api can be called by a user or application to delete the list of activities for a project. \r\n            If the parent project is root, then pass base64Encoded \"/\" as the value of base64EncodedProjectName parameter.\r\n\nAuthorization:GlobalActivity-ManageProjectActivities</p>\r\n\n\nAction:DeleteProjectActivity\n",
                "operationId": "Project_DeleteProjectActivity",
                "parameters": [
                    {
                        "name": "base64EncodedProjectName",
                        "in": "path",
                        "description": "Pass the project name. If the project is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeleteProjectActivitiesRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeleteProjectActivitiesRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeleteProjectActivitiesRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeleteProjectActivitiesRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeleteProjectActivitiesRequest"
                            }
                        }
                    },
                    "description": "The payload which contains the list of activities to be deleted.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully delete the activities."
                    },
                    "400": {
                        "description": "BadRequest: On following cases\r\n            1. If the project name starts with \"/\".\r\n            2. If project name is null or empty.\r\n            3. If the project name is not a valid base64 encoded value\r\n            4. Project is not found.\r\n            5. The activities list is null or empty."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the project is not found."
                    },
                    "404": {
                        "description": "NotFound: When any of the activities in the list is not found."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/project/tags": {
            "post": {
                "tags": [
                    "Project"
                ],
                "summary": "PREVIEW - Create tags in a project.",
                "description": "PREVIEW - An application or user can call this Api to create tags in a project.\r\n\nAuthorization:GlobalActivity-ManageProjectTags\n\r\n\nAction:CreateProjectTags\n",
                "operationId": "Project_CreateProjectTags",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectTagsRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectTagsRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectTagsRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectTagsRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiCreateProjectTagsRequest"
                            }
                        }
                    },
                    "description": "The pay load which contains the name of the project and the list of tags that has to be created under it.",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created: Successfully created tags."
                    },
                    "400": {
                        "description": "BadRequest: On following cases\r\n            1. Project name is starting with \"/\".\r\n            2. Project name is null or empty.\r\n            3. Project is not found.\r\n            4. Tags list is null or empty."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the project is not found."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/projects/{base64EncodedProjectName}/tags": {
            "get": {
                "tags": [
                    "Project"
                ],
                "summary": "PREVIEW - Gets the list of tags for a project.",
                "description": "PREVIEW - This Api can be called by a user or application to get the list of all project tags. \r\n            If the parent project is root, then pass base64Encoded \"/\" as the value of base64EncodedProjectName parameter.\r\n\nAuthorization:GlobalActivity-ManageProjectTags\n\r\n\nAction:GetProjectTags\n",
                "operationId": "Project_GetProjectTags",
                "parameters": [
                    {
                        "name": "base64EncodedProjectName",
                        "in": "path",
                        "description": "Pass the project name. If the project is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok: Successfully fetched all activities.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiGetProjectTagsResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiGetProjectTagsResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiGetProjectTagsResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiGetProjectTagsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: On following cases\r\n            1. If the project name starts with \"/\".\r\n            2. If project name is null or empty.\r\n            3. If the project name is not a valid base64 encoded value\r\n            4. Project is not found."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the project is not found."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "Project"
                ],
                "summary": "PREVIEW - Delete the list of tags for a project.",
                "description": "PREVIEW - This Api can be called by a user or application to delete the list of tags for a project. \r\n            If the parent project is root, then pass base64Encoded \"/\" as the value of base64EncodedProjectName parameter.\r\n\nAuthorization:GlobalActivity-ManageProjectTags\n\r\n\nAction:DeleteProjectTags\n",
                "operationId": "Project_DeleteProjectTags",
                "parameters": [
                    {
                        "name": "base64EncodedProjectName",
                        "in": "path",
                        "description": "Pass the project name. If the project is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeleteProjectTagsRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeleteProjectTagsRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeleteProjectTagsRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeleteProjectTagsRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiDeleteProjectTagsRequest"
                            }
                        }
                    },
                    "description": "The payload which contains the list of tags to be deleted.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully delete the tags."
                    },
                    "400": {
                        "description": "BadRequest: On following cases\r\n            1. If the project name starts with \"/\".\r\n            2. If project name is null or empty.\r\n            3. If the project name is not a valid base64 encoded value\r\n            4. Project is not found.\r\n            5. The Tags list is null or empty."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the project is not found."
                    },
                    "404": {
                        "description": "NotFound: When any of the tag in the list is not found."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/projects/{base64EncodedProjectName}": {
            "post": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Grants global permissions on a project for an application.",
                "description": "PREVIEW - This Api can be called to grant project level global permissions to an application.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:GrantGlobalPermissionsOnAProjectForApplication",
                "operationId": "ProjectAuth_GrantGlobalPermissionsOnAProjectForApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "The Guid of the application which needs permission.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedProjectName",
                        "in": "path",
                        "description": "Pass the base64Encoded project name to which the permission is to be granted.\r\n            If the project is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiProjectGlobalActivitiesRequest"
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully granted permissions."
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Project is not found.\r\n            2. Activity list is empty or null.\r\n            3. Activity is not a global level activity.\r\n            4. If the project name is not a valid base64 encoded value\r\n            5. applicationGuid is not valid"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the parent project is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the application."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Removes global permissions on a project for an application.",
                "description": "PREVIEW - This Api can be called to remove project level global permissions for an application.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:RemoveGlobalPermissionsOnAProjectForApplication\n",
                "operationId": "ProjectAuth_RemoveGlobalPermissionsOnAProjectForApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "The Guid of the application whose permission needs to be removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedProjectName",
                        "in": "path",
                        "description": "Pass the base64Encoded project name against which the permission is to be removed.\r\n            If the project is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiProjectGlobalActivitiesRequest"
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully removed permissions."
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Project is not found.\r\n            2. Activity list is empty or null.\r\n            3. Activity is not a global level activity.\r\n            4. If the project name is not a valid base64 encoded value\r\n            5. applicationGuid is not valid"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the parent project is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the application."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/projects/{base64EncodedProjectName}/activity/{activityName}": {
            "get": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Checks global permission on a project for an application.",
                "description": "PREVIEW - This Api can be called to check project level global permissions for an application.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:CheckGlobalPermissionsOnAProjectForApplication",
                "operationId": "ProjectAuth_CheckGlobalPermissionsOnAProjectForApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "The Guid of the application whose permission needs to be checked.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedProjectName",
                        "in": "path",
                        "description": "Pass the base64Encoded project name against which the permission is to be checked.\r\n            If the project is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activityName",
                        "in": "path",
                        "description": "Name of the global activity.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok: Successfully checked permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCheckProjectPermissionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCheckProjectPermissionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Project is not found.\r\n            2. Activity is null or empty.\r\n            3. Activity is not a global level activity.\r\n            4. If the project name is not a valid base64 encoded value\r\n            5. applicationGuid is not valid"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the project is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the application."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/projects/{base64EncodedProjectName}": {
            "post": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Grants global permissions on a project for a user.",
                "description": "PREVIEW - This Api can be called to grant project level global permissions to a user.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:GrantGlobalPermissionsOnAProjectForUser\n",
                "operationId": "ProjectAuth_GrantGlobalPermissionsOnAProjectForUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The Guid of the user who needs permission.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedProjectName",
                        "in": "path",
                        "description": "Pass the base64Encoded project name to which the permission is to be granted.\r\n            If the project is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiProjectGlobalActivitiesRequest"
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully granted permissions."
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Project is not found.\r\n            2. Activity list is empty or null.\r\n            3. Activity is not a global level activity.\r\n            4. If the project name is not a valid base64 encoded value\r\n            5. userId is not valid"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the project is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the user."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Removes global permissions on a project for a user.",
                "description": "PREVIEW - This Api can be called to remove project level global permissions for an application.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:RemoveGlobalPermissionsOnAProjectForUser\n",
                "operationId": "ProjectAuth_RemoveGlobalPermissionsOnAProjectForUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The Guid of the user whose permission needs to be removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedProjectName",
                        "in": "path",
                        "description": "Pass the base64Encoded project name against which the permission is to be removed.\r\n            If the project is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiProjectGlobalActivitiesRequest"
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully removed permissions."
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Project is not found.\r\n            2. Activity list is empty or null.\r\n            3. Activity is not a global level activity.\r\n            4. If the project name is not a valid base64 encoded value\r\n            5. userId is not valid"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the project is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the user."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/projects/{base64EncodedProjectName}/activity/{activityName}": {
            "get": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Checks global permission on a project for a user.",
                "description": "PREVIEW - This Api can be called to check project level global permissions for a user.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:CheckGlobalPermissionsOnAProjectForUser\n",
                "operationId": "ProjectAuth_CheckGlobalPermissionsOnAProjectForUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The Guid of the user whose permission needs to be checked.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedProjectName",
                        "in": "path",
                        "description": "Pass the base64Encoded project name against which the permission is to be checked.\r\n            If the project is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activityName",
                        "in": "path",
                        "description": "Name of the global activity.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok: Successfully checked permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCheckProjectPermissionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCheckProjectPermissionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Project is not found.\r\n            2. Activity is null or empty.\r\n            3. Activity is not a global level activity.\r\n            4. If the project name is not a valid base64 encoded value\r\n            5. userId is not valid"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the project is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the user."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/activities/{activityName}/tags": {
            "get": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Get all tags associated to an application for an activity.",
                "description": "PREVIEW - This Api can be called to get all tags associated to an application for an activity.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:FetchApplicationAssociateTags\n",
                "operationId": "ProjectAuth_FetchApplicationAssociateTags",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "The Guid of the application whose associated tags needs to be returned.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activityName",
                        "in": "path",
                        "description": "Name of the activity.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok: Successfully fetched all tags.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchTagsResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchTagsResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchTagsResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchTagsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: On following cases\r\n            1. applicationGuid is not valid.\r\n            2. Activity is null or empty.\r\n            3. Ativity is not found."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the application is not having permission."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the application."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/tags/{base64EncodedTag}": {
            "post": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Grant tag permission to Application on given activities in sentience.",
                "description": "PREVIEW - An application or user can call this Api to grant tag permission on the given actvities.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:GrantTagPermissionsToApplication\n",
                "operationId": "ProjectAuth_GrantTagPermissionsToApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "The Guid of the application who needs to be be granted tag permission.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedTag",
                        "in": "path",
                        "description": "Pass the base64Encoded tag name to which the permission is to be granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiProjectActivitiesRequest"
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully permissions."
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Tag is not found.\r\n            2. If the tag name is not a valid base64 encoded value\r\n            3. Tag name starts with /\r\n            4. applicationGuid is not valid"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the tag is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the application."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Removes tag permissions for an application on an activity.",
                "description": "PREVIEW - This Api can be called to remove tag permissions for an application.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:RemoveTagPermissionFromApplication\n",
                "operationId": "ProjectAuth_RemoveTagPermissionFromApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "The Guid of the applicaiton whose permission needs to be removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedTag",
                        "in": "path",
                        "description": "Pass the base64Encoded tag name to which the permission is to be granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiProjectActivitiesRequest"
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully removed permissions."
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Tag is not found.\r\n            2. If the tag name is not a valid base64 encoded value\r\n            3. Tag name starts with /\r\n            4. Tag list is empty or null.\r\n            5. applicationGuid is not valid"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the Tag is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the application."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/tags/{base64EncodedTag}/activities/{activityName}": {
            "get": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Checks application permission for a tag on an activity.",
                "description": "PREVIEW - This Api can be called to check application permissions for a tag on an activity.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:CheckGlobalPermissionsOnATagForApplication\n",
                "operationId": "ProjectAuth_CheckGlobalPermissionsOnATagForApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "description": "The Guid of the application whose permission needs to be checked.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedTag",
                        "in": "path",
                        "description": "Pass the base64Encoded tag name against which the permission is to be checked.\r\n            If the tag is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activityName",
                        "in": "path",
                        "description": "Name of the activity.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok: Successfully checked permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCheckTagPermissionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCheckTagPermissionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Tag is not found.\r\n            2. Tag name starts with /\r\n            3. Activity is null or empty.\r\n            4. Activity is not a global level activity.\r\n            5. If the tag name is not a valid base64 encoded value\r\n            6. applicationGuid is not valid"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the tag is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the application."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/activities/{activityName}/tags": {
            "get": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Get all tags associated to a user for an activity.",
                "description": "PREVIEW - This Api can be called by a user to get the list of tags associated for an activity.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:FetchUserAssociateTags\n",
                "operationId": "ProjectAuth_FetchUserAssociateTags",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The Guid of the user whose associated tags needs to be returned.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activityName",
                        "in": "path",
                        "description": "Name of the activity.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok: Successfully fetched all tags.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchTagsResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchTagsResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchTagsResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiFetchTagsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: On following cases\r\n            1. userId is not valid.\r\n            2. Activity is null or empty.\r\n            3. Activity is not found."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the user is not having permission."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the user."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/tags/{base64EncodedTag}": {
            "post": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Grant tag permission to user on given activities in sentience.",
                "description": "PREVIEW - This Api can be called to get all tags associated to a user for an activity.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:GrantTagPermissionsToUser\n",
                "operationId": "ProjectAuth_GrantTagPermissionsToUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The Guid of the user whose associated tags needs to be granted permission.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedTag",
                        "in": "path",
                        "description": "Pass the base64Encoded tag name to which the permission is to be granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiProjectActivitiesRequest"
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully granted permissions."
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Tag is not found.\r\n            2. If the tag name is not a valid base64 encoded value\r\n            3. userId is not valid\r\n            4. Tag name starts with /"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the tag is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the user."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation or error while granting tag permissions."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Removes tag permissions for a user on an activity.",
                "description": "PREVIEW - This Api can be called to remove tag permissions for a user.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:RemoveTagPermissionFromUser\n",
                "operationId": "ProjectAuth_RemoveTagPermissionFromUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The Guid of the user whose associated tags needs to be removed.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedTag",
                        "in": "path",
                        "description": "Pass the base64Encoded tag name to which the permission is to be granted.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiProjectActivitiesRequest"
                },
                "responses": {
                    "200": {
                        "description": "Ok: Successfully removed permissions."
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Tag is not found.\r\n            2. If the tag name is not a valid base64 encoded value\r\n            3. Tag list is empty or null.\r\n            4. userId is not valid\r\n            5. Tag name starts with /"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the Tag is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the user."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/tags/{base64EncodedTag}/activities/{activityName}": {
            "get": {
                "tags": [
                    "ProjectAuth"
                ],
                "summary": "PREVIEW - Checks user permission for a tag on an activity.",
                "description": "PREVIEW - This Api can be called to check user permissions for a tag on an activity.\r\n\nAuthorization:GlobalActivity-ManageProjectPermissions\r\n\nAction:CheckGlobalPermissionsOnATagForUser\n",
                "operationId": "ProjectAuth_CheckGlobalPermissionsOnATagForUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The Guid of the user whose associated tags needs to be checked.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedTag",
                        "in": "path",
                        "description": "Pass the base64Encoded tag name against which the permission is to be checked.\r\n            If the tag is root, then pass base64Encoded value of \"/\".",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "activityName",
                        "in": "path",
                        "description": "Name of the activity.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok: Successfully checked permissions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCheckTagPermissionResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiCheckTagPermissionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest: On following cases.\r\n            1. Tag is not found.\r\n            2. Activity is null or empty.\r\n            3. Activity is not found.\r\n            4. If the tag name is not a valid base64 encoded value\r\n            5. userId is not valid\r\n            6. Tag name starts with /"
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: If the consumer is not having permission or the tag is not found."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the user."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during the operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/provisioning/discovery/keys": {
            "get": {
                "tags": [
                    "ProvisioningKeyDiscovery"
                ],
                "summary": "Gets public keys used for platform issued tokens",
                "description": "Returns the provisioning token signature key as a Json Web Key",
                "operationId": "ProvisioningKeyDiscovery_GetProvisioningWebKeyResponse",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiJsonKeySetResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiJsonKeySetResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiJsonKeySetResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiJsonKeySetResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/authentication/rpkchallenge": {
            "post": {
                "tags": [
                    "RpkChallenge"
                ],
                "summary": "Generate a challenge for system authentication via RPK",
                "operationId": "RpkChallenge_RequestChallenge",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SystemDetails"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SystemDetails"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/SystemDetails"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/SystemDetails"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/SystemDetails"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RpkChallenge"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RpkChallenge"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/RpkChallenge"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/RpkChallenge"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request\r\n                1) SystemDetails is null\r\n                2) SystemDetails.SystemType is null\r\n                3) SystemDetails.SystemId is null"
                    },
                    "404": {
                        "description": "Not Found\r\n                1) System not registered from factory"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/authentication/rpkchallengeresponse": {
            "post": {
                "tags": [
                    "RpkChallenge"
                ],
                "summary": "Validate a challenge response for system authentication via RPK",
                "operationId": "RpkChallenge_ChallengeResponse",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RpkChallengeResponse"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RpkChallengeResponse"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/RpkChallengeResponse"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/RpkChallengeResponse"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/RpkChallengeResponse"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/Identity"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request\r\n                1) systemChallengeResponse is null\r\n                2) systemChallengeResponse.SystemType is null\r\n                3) systemChallengeResponse.SystemId is null\r\n                4) systemChallengeResponse.ClientRandom is null\r\n                5) systemChallengeResponse.ClientRandomSignature is null"
                    },
                    "401": {
                        "description": "Unauthorized\r\n                1) Challenge is expired\r\n                2) Cannot validate challenge signature\r\n                3) Error when validating challenge signature"
                    },
                    "404": {
                        "description": "1) System not registered from factory\r\n                2) No challenge generated for the system earlier"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/servicedetails/{systemGuid}/services/{serviceId}": {
            "get": {
                "tags": [
                    "ServiceDetails"
                ],
                "summary": "Gets service details for a system related service",
                "description": "\r\n\nAuthorization:SystemPermissionBySystemType-ReadServiceUrls\n\r\n\nAction:GetServiceDetails\n",
                "operationId": "ServiceDetails_GetServiceDetails",
                "parameters": [
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/servicedetails/models/{modelId}/services/{serviceId}": {
            "get": {
                "tags": [
                    "ServiceDetails"
                ],
                "summary": "Gets service details for a model related service",
                "description": "\r\n\nAuthorization:ModelActivity-ReadServiceUrls\n\r\n\nAction:GetServiceDetailsByModelId\n",
                "operationId": "ServiceDetails_GetServiceDetailsByModelId",
                "parameters": [
                    {
                        "name": "modelId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/servicedetails/tenants/{asuMasterName}/services/{serviceId}": {
            "get": {
                "tags": [
                    "ServiceDetails"
                ],
                "summary": "Gets service details for a tenant related service",
                "description": "\r\n\nAuthorization:GlobalActivity-ReadServiceUrls\n\r\n\nAction:GetServiceDetailsByAsuMaster\n",
                "operationId": "ServiceDetails_GetServiceDetailsByAsuMaster",
                "parameters": [
                    {
                        "name": "asuMasterName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceDetails"
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/api/servicedetails/tenants/{tenantName}/services": {
            "put": {
                "tags": [
                    "ServiceDetails"
                ],
                "summary": "update service details for tenant",
                "description": "update service details for tenant\r\n\nAuthorization:GlobalActivity-WriteServiceUrls\n\r\n\nAction:UpdateServiceDetailsByAsuMaster\n",
                "operationId": "ServiceDetails_UpdateServiceDetailsByAsuMaster",
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "tenant name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/RegisterServiceDetailsRequest"
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters."
                    },
                    "401": {
                        "description": "Unauthorized Request-When authentication header is invalid or JwtToken expired or invalid or the caller does not have permissions to call the API"
                    },
                    "500": {
                        "description": "Internal Server Error: when any internal operations fail."
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ServiceDetails"
                ],
                "summary": "Add service details for tenant",
                "description": "Add service details for tenant\r\n\nAuthorization:GlobalActivity-WriteServiceUrls\n\r\n\nAction:RegisterServiceDetailsByAsuMaster\n",
                "operationId": "ServiceDetails_RegisterServiceDetailsByAsuMaster",
                "parameters": [
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "tenant name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/RegisterServiceDetailsRequest"
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters."
                    },
                    "401": {
                        "description": "Unauthorized Request-When authentication header is invalid or JwtToken expired or invalid or the caller does not have permissions to call the API"
                    },
                    "500": {
                        "description": "Internal Server Error: when any internal operations fail."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/registration/unconnected": {
            "get": {
                "tags": [
                    "SystemConnection"
                ],
                "summary": "OBSOLETE: Retrieve the systems that have not been marked as connected.",
                "description": " OBSOLETE: This API is marked for deletion. \r\n\nThis api retrieves systems that have not been marked as connected. This is an R1 call and is no longer supported in R2. \r\n\nReturns 400: The systemId is invalid \r\n\nReturns 500: The given systemType is not found, the combination of systemType and systemId is not found, or an unspecified error occured \r\n\nAuthorization:GlobalActivity-RegisterSystem\n\r\n\nAction:GetUnconnectedSystemDetails\n",
                "operationId": "SystemConnection_GetUnconnectedSystemDetails",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemId",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The connection string is retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiUnconnectedSystemDetailResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiUnconnectedSystemDetailResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiUnconnectedSystemDetailResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiUnconnectedSystemDetailResponse"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/api/systems/registration/{systemGuid}/connection": {
            "get": {
                "tags": [
                    "SystemConnection"
                ],
                "summary": "OBSOLETE: Retrieve the first connection detail for a given SystemGuid.",
                "description": " OBSOLETE: This API is marked for deletion.  Use the api/system/connections instead. \r\n\nThis api retrieves a SINGLE connection string. Newer versions of the API retrieve multiple connections to handle multiple services. This api retrieves the first service in the list connection details, which is typically the messaging service details. \r\n\nReturns a 500: SystemGuid is not found, information is not available for that SystemGuid, or an unspecified error occured \r\n\nAuthorization:GlobalActivity-RegisterSystem\n\r\n\nAction:GetConnectionDetails\n",
                "operationId": "SystemConnection_GetConnectionDetails",
                "parameters": [
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The connection string is retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/api/systems/provisioning/status": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "OBSOLETE: Gets the provisioning state of a system",
                "description": "Given system type and ownershipcode, this api returns the provisioning state of the system\r\n\nAuthorization:GlobalActivity-ReadSystemProvisioningStatus\n\r\n\nAction:GetSystemProvisioningState\n",
                "operationId": "SystemRegistrationAdmin_GetSystemProvisioningState",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemProvisioningRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemProvisioningRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemProvisioningRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemProvisioningRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemProvisioningRequest"
                            }
                        }
                    },
                    "description": "parameter for provisioning status",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters."
                    },
                    "404": {
                        "description": "Not Found: When ownershipcode is not found."
                    },
                    "500": {
                        "description": "Internal Server Error: when any internal operations fail."
                    }
                },
                "deprecated": true
            }
        },
        "/api/systems/provisioning/systemtypes/{systemType}/ownershipcodes/{base64EncodedOwnershipCode}/status": {
            "get": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "Gets the provisioning state of a system",
                "description": "Given system type and ownershipcode, this api returns the provisioning state of the system\r\n\nAuthorization:GlobalOrSystemTypeActivity-ReadSystemProvisioningStatus\n\r\n\nAction:GetSystemProvisioningStateV2\n",
                "operationId": "SystemRegistrationAdmin_GetSystemProvisioningStateV2",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "System type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedOwnershipCode",
                        "in": "path",
                        "description": "Base64 encoded device ownership code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters."
                    },
                    "404": {
                        "description": "Not Found: When ownershipcode is not found."
                    },
                    "500": {
                        "description": "Internal Server Error: when any internal operations fail."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/provisioning/systemtypes/{systemType}/prepare": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "Requests that resources be prepared so a system can connect and associates the system identity with a system guid",
                "description": "This method allows a system to be prepared to be moved into the provisioning-allowed state. \r\n            This call is meant to be called as part of the provisioning-allowed workflow. The following things are setup as part of this preparation.\r\n            1. Generate a unique SystemGuid for the system\r\n            2. Assign the system to a Tenant\r\n            3. Create security groups required to manage the system\r\n            \r\n            The provision state is not changed as part of this call. By separating this call from the allow-provisioning, \r\n            we prevent a race-condition where a system could connect before an application has a chance to know the SystemGuid \r\n            and setup system specific alarms or work with the create security groups\r\n\nAuthorization:GlobalOrSystemTypeOrFixtrueActivity-RegisterSystemType\n\r\n\nAction:PrepareSystemForProvisioning2\n",
                "operationId": "SystemRegistrationAdmin_PrepareSystemForProvisioning2",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiSystemProvisioningPrepareRequest2"
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Bad parameter."
                    },
                    "404": {
                        "description": "Not Found  \r\n            The registration ID entered is not recognized."
                    },
                    "409": {
                        "description": "Conflict  \r\n            The system you attempted to register is already in use."
                    },
                    "500": {
                        "description": "Internal Server Errors  \r\n            1. Failed to add SystemGuid and ModelId map.  \r\n            2. Failed to add system and AsuMaster map.\n\r\n            3. Failed to set provision status.  \r\n            4. Unexpected error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/provisioning/systemtypes/{systemType}/models/{modelId}/prepare": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "Requests that resources be prepared so a system can connect and associates the system identity with a system guid and sets given model to be default model",
                "description": "This method allows a system to be prepared to be moved into the provisioning-allowed state.\r\n             This call is meant to be called as part of the provisioning-allowed workflow. The following things are setup as part of this preparation.\r\n             1. Generate a unique SystemGuid for the system\r\n             2. Assign the system to a Tenant\r\n             3. Create security groups required to manage the system\r\n             4. Sets the given model as the default model for the system\r\n            \r\n             The provision state is not changed as part of this call. By separating this call from the allow-provisioning,\r\n             we prevent a race-condition where a system could connect before an application has a chance to know the SystemGuid\r\n             and setup system specific alarms or work with the create security groups\r\n\nAuthorization:GlobalOrSystemTypeOrFixtrueActivity-RegisterSystemType\n\r\n\nAction:PrepareSystemForProvisioningAndSetDefaultModel",
                "operationId": "SystemRegistrationAdmin_PrepareSystemForProvisioningAndSetDefaultModel",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "ModelId that will be set as the default model for the system",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiSystemProvisioningPrepareRequest2"
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request \r\n             1. SystemType, ownershipCode or tenantName is null. \r\n             2. Model Id does not belong to the same tenant."
                    },
                    "401": {
                        "description": "Unauthorized: User or application is not authorized to invoke the API"
                    },
                    "404": {
                        "description": "Not Found  \r\n             The registration ID entered is not recognized.  \r\n             The model Id is not valid."
                    },
                    "409": {
                        "description": "Conflict  \r\n             The system you attempted to register is already in use."
                    },
                    "500": {
                        "description": "Internal Server Errors  \r\n             1. Failed to add SystemGuid and ModelId map.  \r\n             2. Failed to add system and AsuMaster map.\n\r\n             3. Failed to set provision status.  \r\n             4. Failed to set default model.  \r\n             5. Unexpected error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/provisioning/allow": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "OBSOLETE: Move a system into the Allow-Provisioning state.",
                "description": "This method moves a system into the Allow-Provisioning state. This method should be preceded by 'api/systems/provisioning/prepare'.\r\n             Once in Allow-Provisioning state, a system can make it's connection to the SystemRegistrationApi 'api/system/connections' to retrieve it's connection strings. \r\n             On first call to the SystemRegistrationApi it will return 'Accepted' and do the actual provisioning. On the next call, once provisioning has been finished,\r\n             the connection strings will be returned.\r\n\nAuthorization:GlobalActivity-RegisterSystem\n\r\n\nAction:AllowProvisioning\n",
                "operationId": "SystemRegistrationAdmin_AllowProvisioning",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemProvisioningRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemProvisioningRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemProvisioningRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemProvisioningRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemProvisioningRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request: Bad parameter."
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict  \r\n             Invalid status"
                    },
                    "500": {
                        "description": "Internal Server Errors  \r\n             1. Failed set provision status.  \r\n             2. Unexpected error"
                    }
                },
                "deprecated": true
            }
        },
        "/api/systems/provisioning/systemtypes/{systemType}/ownershipcodes/{base64EncodedOwnershipCode}/allow": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "Allow a system to obtain connection details from the provisioning service",
                "description": "This method moves a system into the Allow-Provisioning state. This method should be preceded by 'api/systems/provisioning/prepare'.\r\n             Once in Allow-Provisioning state, a system can make it's connection to the SystemRegistrationApi 'api/system/connections' to retrieve it's connection strings. \r\n             On first call to the SystemRegistrationApi it will return 'Accepted' and do the actual provisioning. On the next call, once provisioning has been finished,\r\n             the connection strings will be returned.\r\n\nAuthorization:GlobalOrSystemTypeOrFixtrueActivity-RegisterSystem\n\r\n\nAction:AllowProvisioningV2\n",
                "operationId": "SystemRegistrationAdmin_AllowProvisioningV2",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "System type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedOwnershipCode",
                        "in": "path",
                        "description": "Base64 encoded device ownership code",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "400": {
                        "description": "Bad Request: Bad parameter."
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict  \r\n             Invalid status"
                    },
                    "500": {
                        "description": "Internal Server Errors  \r\n             1. Failed set provision status.  \r\n             2. Unexpected error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/registration/{systemType}/ownershipcode/{ownershipCode}": {
            "patch": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "OBSOLETE: Rollback system association,\r\n            this will be deprecated by Feb 15, 2016",
                "description": "this will be deprecated by Feb 15, 2016\r\n\nAuthorization:GlobalOrSystemTypeActivity-RegisterSystem\n\r\n\nAction:ResetSystemAssociation\n",
                "operationId": "SystemRegistrationAdmin_ResetSystemAssociation",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "System type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ownershipCode",
                        "in": "path",
                        "description": "Ownership code of the device",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResetResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResetResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResetResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResetResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Bad parameter."
                    },
                    "404": {
                        "description": "Not Found  \r\n            The registration ID entered is not recognized."
                    },
                    "500": {
                        "description": "Internal Server Errors  \r\n            1. Failed to rollback  \r\n            2. Unexpected error  "
                    }
                },
                "deprecated": true
            }
        },
        "/api/systems/provisioning/replace": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "OBSOLETE: Replace the system association with a new ownership code, keeping the same system identity",
                "description": "PREVIEW - This method allows an already provisioned system to be replaced by another one, but keeping the same identity in the platform\r\n             This API is meant to be called after the provisioning workflow. The following things are done as part of this operation:\r\n             1. Re-use the SystemGuid for the replacement system\r\n             2. Assign the replacement system to the Tenant\r\n             3. Un-assign the current system from the tenant\r\n             3. Set the status of the current system as NotProvisioned\r\n              \r\n             The provision state for the current system is changed to NotProvisioned in order to allow the deregistration of that system in a future call \r\n             to the corresponding API.\r\n\nAuthorization:GlobalActivity-RegisterSystem\n\r\n\nAction:ReplaceSystem\n",
                "operationId": "SystemRegistrationAdmin_ReplaceSystem",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemReplaceRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemReplaceRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemReplaceRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemReplaceRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemReplaceRequest"
                            }
                        }
                    },
                    "description": "System type: system type of the systems involved in the replacement operation.\r\n             CurrentOwnershipCode: ownership code of the system that will by replaced by a new one.\r\n             ReplacementOwnershipCode: ownership code of the new system that will replace the existing one.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request \r\n             Invalid parameters.\r\n             The system to be replaced is not in a valid state for replacement."
                    },
                    "404": {
                        "description": "Not Found \r\n             The unique id for the replacement system is not found.\r\n             The unique id of the system to be replaced is not found."
                    },
                    "500": {
                        "description": "Internal Server Error  \r\n             1. Failed to retrieve asu master map for both unique ids of the involved systems.  \r\n             2. Failed to remove asu master map for unqieu id of the current system.  \r\n             3. Failed to reset the provisioning state of the current system.  \r\n             4. Failed to update map for system guid and the unique id of the replacement system.  \r\n             5. Unexpected error."
                    }
                },
                "deprecated": true
            }
        },
        "/api/systems/provisioning/systemtypes/{systemType}/replace": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "Removes the association between a system identity and system guid and provides an ownership code that can be used to re-associate the system",
                "description": "PREVIEW - This method allows an already provisioned system to be replaced by another one, but keeping the same identity in the platform\r\n             This API is meant to be called after the provisioning workflow. The following things are done as part of this operation:\r\n             1. Re-use the SystemGuid for the replacement system\r\n             2. Assign the replacement system to the Tenant\r\n             3. Un-assign the current system from the tenant\r\n             3. Set the status of the current system as NotProvisioned\r\n             \r\n             The provision state for the current system is changed to NotProvisioned in order to allow the deregistration of that system in a future call \r\n             to the corresponding API.\r\n\nAuthorization:GlobalOrSystemTypeActivity-RegisterSystem\n\r\n\nAction:ReplaceSystemV2\n",
                "operationId": "SystemRegistrationAdmin_ReplaceSystemV2",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "System type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemReplaceRequestV2"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemReplaceRequestV2"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemReplaceRequestV2"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemReplaceRequestV2"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemReplaceRequestV2"
                            }
                        }
                    },
                    "description": "System type: system type of the systems involved in the replacement operation.\r\n             CurrentOwnershipCode: ownership code of the system that will by replaced by a new one.\r\n             ReplacementOwnershipCode: ownership code of the new system that will replace the existing one.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAssociationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request \r\n             Invalid parameters.\r\n             The system to be replaced is not in a valid state for replacement."
                    },
                    "404": {
                        "description": "Not Found \r\n             The unique id for the replacement system is not found.\r\n             The unique id of the system to be replaced is not found."
                    },
                    "500": {
                        "description": "Internal Server Error  \r\n             1. Failed to retrieve asu master map for both unique ids of the involved systems.  \r\n             2. Failed to remove asu master map for unqieu id of the current system.  \r\n             3. Failed to reset the provisioning state of the current system.  \r\n             4. Failed to update map for system guid and the unique id of the replacement system.  \r\n             5. Unexpected error."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/provisioning/deprovision": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "OBSOLETE: Move a system into the Not-Provisioned state",
                "description": "PREVIEW\r\n            Given system type and ownershipcode, this method moves the system into NotProvisioned state.\r\n\nAuthorization:GlobalActivity-DeProvisionSystem\n\r\n\nAction:DeProvisionSystem\n",
                "operationId": "SystemRegistrationAdmin_DeProvisionSystem",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemDeProvisionRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemDeProvisionRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemDeProvisionRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemDeProvisionRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSystemDeProvisionRequest"
                            }
                        }
                    },
                    "description": "WebApiSystemDeProvisionRequest",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "Bad Request: Invalid Provisining Status."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found: When AsuMasterMap is not found and UniqueId is not found for that SystemType."
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": true
            }
        },
        "/api/systems/provisioning/systemtypes/{systemType}/systemids/{systemId}/deprovision": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "OBSOLETE - Releases resources allocated to a system connection and prevents it from obtaining connection details",
                "description": "OBSOLETE\r\n            Given system type and ownershipcode, this method moves the system into NotProvisioned state.\r\n\nAuthorization:GlobalOrSystemTypeOrFixtrueActivity-DeProvisionSystem\n\r\n\nAction:DeProvisionSystemV2\n",
                "operationId": "SystemRegistrationAdmin_DeProvisionSystemV2",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "System type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemId",
                        "in": "path",
                        "description": "System ID of the system to be deprovisioned.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "Bad Request: Invalid Provisining Status."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found: When AsuMasterMap is not found and UniqueId is not found for that SystemType."
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": true
            }
        },
        "/api/systems/provisioning/systemtypes/{systemType}/v3/systemids/{base64EncodedSystemId}/deprovision": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "Releases resources allocated to a system connection and prevents it from obtaining connection details",
                "description": "Given a System Type and System ID the method moves the system into NotProvisioned state.\r\n\nAuthorization:GlobalOrSystemTypeActivity-DeProvisionSystem\n\r\n\nAction:DeProvisionSystemV3\n",
                "operationId": "SystemRegistrationAdmin_DeProvisionSystemV3",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "System type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedSystemId",
                        "in": "path",
                        "description": "Base64 encoded System ID of the system to be deprovisioned.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "Bad Request: Invalid Provisining Status or systemId exceeds length."
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found: When AsuMasterMap is not found and UniqueId is not found for that SystemType."
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/provisioning/systemtypes/{systemType}/preparesubsystembatch": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "Provisions a subsystem batch using  a factory fixture or application authentication",
                "description": "Requests resources to be prepared so a subsystem can connect and associates the system identity with a system guid\r\n\nAuthorization:SystemTypeActivityOrFixture-RegisterSystem\n\r\n\nAction:PrepareSubsystemBatchForProvisioning\n",
                "operationId": "SystemRegistrationAdmin_PrepareSubsystemBatchForProvisioning",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "System type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiSubsystemProvisioningRequest"
                                }
                            }
                        },
                        "text/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiSubsystemProvisioningRequest"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiSubsystemProvisioningRequest"
                                }
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiSubsystemProvisioningRequest"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiSubsystemProvisioningRequest"
                                }
                            }
                        }
                    },
                    "description": "Subsystem provisioning batch",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSubsystemProvisioningBatchResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSubsystemProvisioningBatchResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSubsystemProvisioningBatchResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSubsystemProvisioningBatchResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Batch is not valid or contains duplicate items."
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/provisioning/systemTypes/{systemType}/systemids/{base64EncodedSystemId}/enable": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "Lets a system communicate with the platform by enabling it and moving it to 'AllowProvisioning' state.",
                "description": "For a system that is currently disabled, this API changes the Provisioning Status of the system to 'AllowProvisioning' so that it can communicate with cloud services.\r\n\nAuthorization:SystemTypeActivity-EnableDisableSystem</p>\r\n\n\nAction:EnableSystem\n",
                "operationId": "SystemRegistrationAdmin_EnableSystem",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "Type of the system to be enabled",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedSystemId",
                        "in": "path",
                        "description": "base 64 encoded system Id of the system to be enabled",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully enabled the system"
                    },
                    "400": {
                        "description": "BadRequest: System cannot be enabled as it is not in 'Disabled' state.  \r\n            The decoded system Id should not be empty and should be less than 50 characters."
                    },
                    "401": {
                        "description": "Unauthorized: The user or application is not part of the activity EnableDisableSystem."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the systemGuid for the given system type and system Id."
                    },
                    "500": {
                        "description": "Internal Server Error: Unexpected error."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systems/provisioning/systemtypes/{systemType}/systemids/{base64EncodedSystemId}/disable": {
            "post": {
                "tags": [
                    "SystemRegistrationAdmin"
                ],
                "summary": "Stops a system communicating with the platform by moving it into the disabled state.",
                "description": "Disables a system so that it cannot communicate with cloud services.\r\n            For a system that is currently provisioned all current credentials will be immediately invalidated\r\n            and request for new connection details from the provisioning endpoint will fail. \r\n            For a system that has never been provisioned attempts to prepare provisioning will fail.\r\n            To allow the system to communicate again it should be moved into the provisioned state.\r\n\nAuthorization:SystemTypeActivity-EnableDisableSystem</p>\r\n\n\nAction:DisableSystem\n",
                "operationId": "SystemRegistrationAdmin_DisableSystem",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "Type of the system to be disabled",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "base64EncodedSystemId",
                        "in": "path",
                        "description": "base 64 encoded system Id of the system to be disabled",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully disabled the system"
                    },
                    "400": {
                        "description": "BadRequest: System cannot be disabled as it is in 'NotProvisioned' state.  \r\n            The decoded system Id should not be empty and should be less than 50 characters."
                    },
                    "401": {
                        "description": "Unauthorized: The user or application is not part of the activity EnableDisableSystem."
                    },
                    "404": {
                        "description": "NotFound: Unable to find the systemGuid for the given system type and system Id."
                    },
                    "500": {
                        "description": "Internal Server Error: Unexpected error."
                    }
                },
                "deprecated": false
            }
        },
        "/api/system/connections": {
            "post": {
                "tags": [
                    "SystemRegistrationApi"
                ],
                "summary": "Gets the connection details for services a system can use",
                "description": "Must be called by using the JWT token obtained by using the RPK challenge response apis 'api/authentication/rpkchallenge' and 'api/authentication/rpkchallengeresponse'\r\n\nAuthorization:AuthorizationWithoutActivity-Undefined</p>\r\n\n\nAction:Register\n",
                "operationId": "SystemRegistrationApi_Register",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                    }
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Accepted - System provisioning in progress",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiSystemConnectionDetailResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized Request-When authentication header is invalid or JwtToken expired or invalid"
                    },
                    "403": {
                        "description": "Forbidden-The current state of the system does not support provisioning"
                    },
                    "500": {
                        "description": "Other Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systemsregistry/systems/{systemGuid}": {
            "get": {
                "tags": [
                    "SystemRegistrySearch"
                ],
                "summary": "Gets registry information for a system",
                "description": " This method retrieves the registration details of a given system by SystemGuid \r\n\nThis call requires the SearchSystemRegistryBySystemGuid activity permission. \r\n\nAuthorization:GlobalActivity-SearchSystemRegistryBySystemGuid\n\r\n\nAction:GetSystemRegistryDetailsBySystemGuid\n",
                "operationId": "SystemRegistrySearch_GetSystemRegistryDetailsBySystemGuid",
                "parameters": [
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "The system to retrieve registration information about",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systemsregistry/systemtypes/{systemType}/ownershipCode/{ownershipCode}": {
            "get": {
                "tags": [
                    "SystemRegistrySearch"
                ],
                "summary": "Gets registry information for a system given an ownership code",
                "description": "Given system type and ownershipcode, this api retrieves the registry information. System Guid is retrieved only if system is provisioned.\r\n\nAuthorization:SystemTypeActivity-SearchSystemRegistryBySystemTypeAndId\n\r\n\nAction:GetSystemDetailsBySytemTypeAndOwnershipCode",
                "operationId": "SystemRegistrySearch_GetSystemDetailsBySytemTypeAndOwnershipCode",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "type of system (this should be same system used which was used to register the system)",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ownershipCode",
                        "in": "path",
                        "description": "ownership code parameter for fetching system registration details",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid parameters."
                    },
                    "404": {
                        "description": "Not Found: when system has not been registred."
                    },
                    "500": {
                        "description": "Internal Server Error: when any internal operations fail."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systemsregistry/systemtypes/{systemType}/v2/systems/{systemId}": {
            "get": {
                "tags": [
                    "SystemRegistrySearch"
                ],
                "summary": "Gets registry information for a system given a system type and system id",
                "description": "\nThis method retrieves the registration details of a given system by SystemType and SystemId \r\n\nThis call requires the SearchSystemRegistryBySystemTypeAndId activity permission. \r\n\nAuthorization:SystemTypeActivity-SearchSystemRegistryBySystemTypeAndId\n\r\n\nAction:GetSystemRegistryDetailsBySystemTypeAndIdV2",
                "operationId": "SystemRegistrySearch_GetSystemRegistryDetailsBySystemTypeAndIdV2",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "The SystemType of the system to retrieve details from",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemId",
                        "in": "path",
                        "description": "The base64 encoded SystemId of the system to retrieve details from",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGetSystemResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systemsregistry/systemtypes/{systemType}/graphql": {
            "get": {
                "tags": [
                    "SystemRegistrySearch"
                ],
                "summary": "PREVIEW - Retrieve system registry details for given systemtype",
                "description": "PREVIEW - This Web API retrieves the corresponding systems along with registration details for a systemtype.\r\n            Needs a valid system type and a well-formatted query as required parameters to be executed.\r\n                Optional parameters: operationName, namedQuery.\r\n                Cannot send mutations within the query.\r\n                If data is present within the Json returned then errors will be empty.\r\n                By default query returns max 50 records. This limitation can be overridden by passing 'first' argument in the Query.\r\n             Return shape:\r\n             {\r\n               \"data\":{\r\n                   \"systemRegistryDetails\": {\r\n                        \"systemType\": \"type1\",\r\n                        \"systems\": [\r\n                        {\r\n                          \"systemId\": \"system1\",\r\n                          \"systemGuid\": \"516e5e80-1eb5-41da-b494-420a4cd0374a\",\r\n                          \"details\": \"systemmetadata\",\r\n                          \"provisioningStatus\": \"Provisioned\"\r\n                        },\r\n                       {\r\n                         \"systemId\": \"system3\",\r\n                         \"systemGuid\": \"84b30576-3c21-4a70-9b92-fd1bd6b13e79\",\r\n                         \"details\": \"systemmetadata\",\r\n                         \"provisioningStatus\": \"Provisioned\"\r\n                       }]         \r\n                    }\r\n                },\r\n                \"errors\": [\r\n                 {\r\n                   \"locations\": [\r\n                   {\r\n                     \"line\": 1,\r\n                     \"column\": 5\r\n                   }],\r\n                   \"message\": \"errorMessage\"\r\n                 }]\r\n                }\r\n\n\nAuthorization:SystemTypeActivity-SearchSystemRegistry\r\n\nAction:SystemRegistryQuery\n",
                "operationId": "SystemRegistrySearch_SystemRegistryQuery",
                "parameters": [
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "The SystemType of the system to retrieve details from",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "operationName",
                        "in": "query",
                        "description": "Operation name inside the query to be executed",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "namedQuery",
                        "in": "query",
                        "description": "Name of supported query.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "A GraphQL to be executed\r\n             Query example:\r\n             query namedQuery{\r\n                systemRegistryDetails(systemType: \"type1\" )\r\n                {\r\n                    systemType\r\n                    systems(provisioningStatus: \"Provisioned\" first: 2)\r\n                    {\r\n                        systemId\r\n                        systemGuid\r\n                        details\r\n                        provisioningStatus\r\n                    }\r\n                }\r\n            }",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "variables",
                        "in": "query",
                        "description": "A JSON-encoded object containing the variables for the query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGraphQlResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGraphQlResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGraphQlResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemRegistryGraphQlResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest:Invalid query."
                    },
                    "401": {
                        "description": "Unauthorized:The user or application is missing the permission."
                    },
                    "500": {
                        "description": "InternalServerError:Failure during internal operations."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systemservices/{serviceId}": {
            "get": {
                "tags": [
                    "SystemServiceAdmin"
                ],
                "summary": "Gets system service details",
                "description": "An admin can use this API to get system service details by ServiceId\r\n\nAuthorization:GlobalActivity-ManageSystemService\n\r\n\nAction:GetSystemService\n",
                "operationId": "SystemServiceAdmin_GetSystemService",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ServiceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: The result is the System Service with the requested serviceId.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceDetailsResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceDetailsResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceDetailsResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceDetailsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform request. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: Not allowed to get a System Service."
                    },
                    "404": {
                        "description": "NotFound: System Service with specified serviceId doesn't exists."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "SystemServiceAdmin"
                ],
                "summary": "Adds a new system service",
                "description": "Admin can use this API to add a new system service with the specified ServiceId\r\n\nAuthorization:GlobalActivity-ManageSystemService\n\r\n\nAction:AddSystemService\n",
                "operationId": "SystemServiceAdmin_AddSystemService",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "System service identifier",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created: Added a new System Service."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failure when attempting to add. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: Not allowed to add a System Service."
                    },
                    "409": {
                        "description": "Conflict: A System service with the same serviceId already exists, and its corresponding permissions have already been created."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "SystemServiceAdmin"
                ],
                "summary": "Removes a system service",
                "description": "Admin can use this API to remove system service with the specified ServiceId\r\n\nAuthorization:GlobalActivity-ManageSystemService\n\r\n\nAction:RemoveSystemService\n",
                "operationId": "SystemServiceAdmin_RemoveSystemService",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ServiceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent: System Service removed successfully."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to remove. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden. Not allowed to remove System Service."
                    },
                    "404": {
                        "description": "NotFound: Candidate deletion was not found."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systemservices/{serviceId}/enabledsystemtypes/{systemType}": {
            "get": {
                "tags": [
                    "SystemServiceAdmin"
                ],
                "summary": "Checks if a system service is enabled for a system type",
                "description": "An authorized service who has access can use this API to check if a system service\r\n                with the specified ServiceId is enabled for a system type with its specified system type id\r\n\nAuthorization:SystemServiceActivity-EnableSystemService\n\r\n\nAction:IsSystemServiceEnabledForSystemType\n",
                "operationId": "SystemServiceAdmin_IsSystemServiceEnabledForSystemType",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ServiceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "System Type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: System Service is enabled for the given System Type."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform operation. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: Not able to query enablement of given System Service for given System Type."
                    },
                    "404": {
                        "description": "Not Found: System Type with given Id does not exists."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "SystemServiceAdmin"
                ],
                "summary": "Enables a system service for a system type",
                "description": "An admin can use this API to enable a SystemService For SystemType\r\n                with the specified ServiceId and SystemType\r\n\nAuthorization:SystemServiceActivity-EnableSystemService\n\r\n\nAction:EnableSystemServiceForSystemType\n",
                "operationId": "SystemServiceAdmin_EnableSystemServiceForSystemType",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ServiceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "System Type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created: Successfully enabled System Service with serviceId for Sytem Type with systemType id."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform operation. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: Not able to enable given System Service for given System Type."
                    },
                    "404": {
                        "description": "NotFound: System Type with given Id does not exists."
                    },
                    "409": {
                        "description": "Conflict: System Service is already enabled for the given System Type."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "SystemServiceAdmin"
                ],
                "summary": "Disables system service for a system type",
                "description": "An admin can use this API to Disable SystemService For SystemType\r\n                with the specified ServiceId and SystemType\r\n\nAuthorization:SystemServiceActivity-EnableSystemService\n\r\n\nAction:DisableSystemServiceForSystemType\n",
                "operationId": "SystemServiceAdmin_DisableSystemServiceForSystemType",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ServiceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemType",
                        "in": "path",
                        "description": "System Type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent: Successfully enabled System Service with serviceId for Sytem Type with systemType id."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform operation. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: Not able to disable given System Service for given System Type."
                    },
                    "404": {
                        "description": "Not Found: System Type with given Id does not exists."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systemservices/{serviceId}/systems/{systemGuid}/enabled": {
            "get": {
                "tags": [
                    "SystemServiceAdmin"
                ],
                "summary": "Gets enabled status of a system for the given system service",
                "description": "This API returns the enabled status of a system for the given system service.\r\n\nAuthorization:SystemServiceActivity-EnableSystemService\n\r\n\nAction:GetSystemEnabledStatusInSystemService\n",
                "operationId": "SystemServiceAdmin_GetSystemEnabledStatusInSystemService",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ServiceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: Successfully get system enabled status.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiGetSystemEnabledStatusResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiGetSystemEnabledStatusResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiGetSystemEnabledStatusResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiGetSystemEnabledStatusResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Unabled to find system tenant mapping or the data of request is invalid."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform operation. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: Not able to perform the operation."
                    },
                    "404": {
                        "description": "Not Found: System does not exists."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "SystemServiceAdmin"
                ],
                "summary": "Enables or disables a system for the given system service",
                "description": "This API allows a system to be enabled or disabled from using the given system service.\r\n\nAuthorization:SystemServiceActivity-EnableSystemService\n\r\n\nAction:SetSystemEnabledStatusInSystemService\n",
                "operationId": "SystemServiceAdmin_SetSystemEnabledStatusInSystemService",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ServiceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "SystemGuid",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSetSystemEnabledStatusRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSetSystemEnabledStatusRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSetSystemEnabledStatusRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSetSystemEnabledStatusRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiSetSystemEnabledStatusRequest"
                            }
                        }
                    },
                    "description": "WebApiSetSystemEnabledStatusRequest",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "No Content: Successfully set system enabled status."
                    },
                    "400": {
                        "description": "Bad Request: Unabled to find system tenant mapping or the data of request is invalid."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failed when trying to perform operation. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: Not able to perform the operation."
                    },
                    "404": {
                        "description": "Not Found: System does not exists."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/applications/{applicationGuid}/systemServices/{serviceId}": {
            "get": {
                "tags": [
                    "SystemServiceAuth"
                ],
                "summary": "Gets system service permissions for an application",
                "description": "\r\n\nAuthorization:GlobalActivity-ConfigureSystemServicePermission\n\r\n\nAction:GetApplicationSystemServicePermissions\n",
                "operationId": "SystemServiceAuth_GetApplicationSystemServicePermissions",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceActivitiesResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceActivitiesResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceActivitiesResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceActivitiesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "SystemServiceAuth"
                ],
                "summary": "Adds system service permissions to an application",
                "description": "\r\n\nAuthorization:GlobalActivity-ConfigureSystemServicePermission\n\r\n\nAction:AddSystemServicePermissionsToApplication\n",
                "operationId": "SystemServiceAuth_AddSystemServicePermissionsToApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiSystemServicePermissionsRequest"
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "SystemServiceAuth"
                ],
                "summary": "Removes system service permissions from an application",
                "description": "\r\n\nAuthorization:GlobalActivity-ConfigureSystemServicePermission\n\r\n\nAction:RemoveSystemServicePermissionsFromApplication</p>",
                "operationId": "SystemServiceAuth_RemoveSystemServicePermissionsFromApplication",
                "parameters": [
                    {
                        "name": "applicationGuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiSystemServicePermissionsRequest"
                },
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/users/{userId}/systemServices/{serviceId}": {
            "get": {
                "tags": [
                    "SystemServiceAuth"
                ],
                "summary": "Gets system service permissions for a user",
                "description": "\r\n\n\nAuthorization:GlobalActivity-ConfigureSystemServicePermission\n\r\n\nAction:GetUserSystemServicePermissions\n",
                "operationId": "SystemServiceAuth_GetUserSystemServicePermissions",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceActivitiesResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceActivitiesResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceActivitiesResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceActivitiesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "SystemServiceAuth"
                ],
                "summary": "Adds system service permission to a user",
                "description": "\r\n\nAuthorization:GlobalActivity-ConfigureSystemServicePermission\n\r\n\nAction:AddSystemServicePermissionsToUser\n",
                "operationId": "SystemServiceAuth_AddSystemServicePermissionsToUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiSystemServicePermissionsRequest"
                },
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "SystemServiceAuth"
                ],
                "summary": "Removes system service permission from a user",
                "description": "\r\n\nAuthorization:GlobalActivity-ConfigureSystemServicePermission\n\r\n\nAction:RemoveSystemServicePermissionsFromUser\n",
                "operationId": "SystemServiceAuth_RemoveSystemServicePermissionsFromUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "serviceId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/WebApiSystemServicePermissionsRequest"
                },
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/auth/services/systemservices": {
            "get": {
                "tags": [
                    "SystemServiceAuth"
                ],
                "summary": "Gets all activities applicable to system services",
                "description": "Admin can use this API to get all the System Services type activities available in the platform\r\n\nAuthorization:GlobalActivity-ConfigureSystemServicePermission\n\r\n\nAction:GetSystemServicesServiceActivities\n",
                "operationId": "SystemServiceAuth_GetSystemServicesServiceActivities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiServiceActivitiesResponse"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systemservices/{serviceId}/tenants/{tenantName}": {
            "get": {
                "tags": [
                    "SystemServiceRegistration"
                ],
                "summary": "Gets system service details for a tenant",
                "description": "An authorized service who has access can use this API to get details of service in tenant\r\n                with the specified ServiceId and TenantName\r\n\nAuthorization:SystemServiceActivity-RegisterSystemService\n\r\n\nAction:GetSystemServiceDetailsInTenant\n",
                "operationId": "SystemServiceRegistration_GetSystemServiceDetailsInTenant",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ServiceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK: The result is the given System Service registration details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceRegistrationResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceRegistrationResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceRegistrationResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemServiceRegistrationResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failure when attempting to get registration details. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: Not allowed to get System Service registration details."
                    },
                    "404": {
                        "description": "NotFound: System Service with given serviceId does not exists."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "SystemServiceRegistration"
                ],
                "summary": "Adds a system service to a tenant",
                "description": "An authorized service who has access can use this API to register system service in tenant\r\n                with the specified ServiceId, TenantName, URL, Audience, IsJWTRequired and Callback\r\n\nAuthorization:SystemServiceActivity-RegisterSystemService\n\r\n\nAction:RegisterSystemServiceInTenant\n",
                "operationId": "SystemServiceRegistration_RegisterSystemServiceInTenant",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "Name of the system service",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiRegisterSystemServiceRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiRegisterSystemServiceRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiRegisterSystemServiceRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiRegisterSystemServiceRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiRegisterSystemServiceRequest"
                            }
                        }
                    },
                    "description": "Request object containing the registration details",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created: Registered System Service in Tenant."
                    },
                    "400": {
                        "description": "BadRequest: Invalid request. Unable to parse request."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failure when attempting to register. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: Not allowed to register System Service in Tenant."
                    },
                    "404": {
                        "description": "NotFound: System Service to register not found."
                    },
                    "409": {
                        "description": "Conflict: A System service with the same serviceId already exists."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "SystemServiceRegistration"
                ],
                "summary": "Removes a system service from tenant",
                "description": "An authorized service who has access can use this API to Deregister SystemService in tenant\r\n                with the specified ServiceId and TenantName\r\n\nAuthorization:SystemServiceActivity-RegisterSystemService\n\r\n\nAction:DeregisterSystemServiceInTenant\n",
                "operationId": "SystemServiceRegistration_DeregisterSystemServiceInTenant",
                "parameters": [
                    {
                        "name": "serviceId",
                        "in": "path",
                        "description": "ServiceId",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "tenantName",
                        "in": "path",
                        "description": "Name of the tenant",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent: Deregistered System Service in Tenant."
                    },
                    "401": {
                        "description": "Unauthorized: Authorization failure when attempting to register. Please check permissions."
                    },
                    "403": {
                        "description": "Forbidden: Not allowed to deregister System Service in Tenant."
                    },
                    "404": {
                        "description": "Not Found: System Service with given serviceId does not exists."
                    },
                    "500": {
                        "description": "InternalServerError: Unexpected failure during internal operation."
                    }
                },
                "deprecated": false
            }
        },
        "/api/systemmodelmaps/systems/{systemGuid}": {
            "get": {
                "tags": [
                    "SystemToModelMapping"
                ],
                "summary": "Gets system to model map for a given system",
                "description": "Gets system to model map for a given system\r\n\nAuthorization:SystemPermissionBySystemType-ManageSystemToModelLinkage\n\r\n\nAction:GetSystemToModelMap\n",
                "operationId": "SystemToModelMapping_GetSystemToModelMap",
                "parameters": [
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Successfully fetched system to model map for the given system",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAndModelMappingResponse"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAndModelMappingResponse"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAndModelMappingResponse"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiSystemAndModelMappingResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "NotFound - System to model map doesn't exist for the given system"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "SystemToModelMapping"
                ],
                "summary": "Resets the system to model map for the given system",
                "description": "Resets the system to model map for the given system.\r\n            If the existing model in the map is an internally created model, it will be deleted.\r\n            A new internal model will be created and linked to the system in the map.\r\n\nAuthorization:SystemPermissionBySystemType-ManageSystemToModelLinkage\n\r\n\nAction:ResetSystemToModelMap\n",
                "operationId": "SystemToModelMapping_ResetSystemToModelMap",
                "parameters": [
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent - Successfully resetted the system to model map for the given system"
                    },
                    "400": {
                        "description": "BadRequest - System to model map doesn't exist"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systemmodelmaps/systems/{systemGuid}/models/{modelId}": {
            "put": {
                "tags": [
                    "SystemToModelMapping"
                ],
                "summary": "Links the given system to the given model",
                "description": "Links the given system to the given model\r\n            Internally created model will be deleted and will be replaced by the given model in the system to model map\r\n            If the given modelId is same as the modelId in the mapping, then no changes will be made to the map\r\n            A new entry will be added to the system to model map, if there is no map found\r\n\nAuthorization:SystemPermissionBySystemTypeAndModelPermissionByModelType-Undefined\n\r\n\nAction:LinkSystemToModel\n",
                "operationId": "SystemToModelMapping_LinkSystemToModel",
                "parameters": [
                    {
                        "name": "systemGuid",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modelId",
                        "in": "path",
                        "description": "",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK - Successfully linked the given system to the given model"
                    },
                    "400": {
                        "description": "BadRequest - Given model doesn't exist"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/systemTypes": {
            "post": {
                "tags": [
                    "SystemTypes"
                ],
                "summary": "Adds a system type",
                "description": "\r\n\nAuthorization:GlobalActivity-ManageSystemType\n\r\n\nAction:AddSystemType\n",
                "operationId": "SystemTypes_AddSystemType",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiAddSystemTypeRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiAddSystemTypeRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiAddSystemTypeRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiAddSystemTypeRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiAddSystemTypeRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Invalid Parameters"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/testGroups": {
            "get": {
                "tags": [
                    "TestGroupsAdmin"
                ],
                "summary": "Gets a collection of test groups according to a given device type",
                "description": "An authorized user who has access to manage test groups can use this API to get a list of all the available \r\n            test groups for the specified device type\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:GetTestGroupsByDeviceType\n",
                "operationId": "TestGroupsAdmin_GetTestGroupsByDeviceType",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "description": "Device type name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiTestGroup"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiTestGroup"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiTestGroup"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiTestGroup"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "TestGroupsAdmin"
                ],
                "summary": "Adds a test group according to a given device type, test group name and test group description",
                "description": "An authorized user who has access to manage test groups can use this API to add a test \r\n            group for the specified device type, test group name and test group description\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:AddTestGroup\n",
                "operationId": "TestGroupsAdmin_AddTestGroup",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "description": "Device type name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiTestGroupAddRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiTestGroupAddRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiTestGroupAddRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiTestGroupAddRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiTestGroupAddRequest"
                            }
                        }
                    },
                    "description": "Details of test group to be created",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/testGroups/{testGroupName}": {
            "get": {
                "tags": [
                    "TestGroupsAdmin"
                ],
                "summary": "Gets a test group according to a given device type and a test group name",
                "description": "An authorized user who has access to manage test groups can use this API to get a specific test \r\n            group by specifying its device type and test group name\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:GetSpecificTestGroup\n",
                "operationId": "TestGroupsAdmin_GetSpecificTestGroup",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "description": "Device type name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testGroupName",
                        "in": "path",
                        "description": "Test group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiTestGroup"
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiTestGroup"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiTestGroup"
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/WebApiTestGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "TestGroupsAdmin"
                ],
                "summary": "Deletes an existing test group",
                "description": "An authorized user who has access to manage test groups can use this API to delete a test \r\n            group by specifying its device type and test group name\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:DeleteTestGroup\n",
                "operationId": "TestGroupsAdmin_DeleteTestGroup",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "description": "Device type name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testGroupName",
                        "in": "path",
                        "description": "Test group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/testGroups/{testGroupName}/systems/{systemId}": {
            "get": {
                "tags": [
                    "TestGroupsAdmin"
                ],
                "summary": "Gets a system in a test group according to a given device type, test group name and system id",
                "description": "An authorized user who has access to manage test groups can use this API to get a system in a test \r\n            group by specifying device type, test group name and system id\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:CheckSystemExistsInTestGroup\n",
                "operationId": "TestGroupsAdmin_CheckSystemExistsInTestGroup",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "description": "Device type name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testGroupName",
                        "in": "path",
                        "description": "Test group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemId",
                        "in": "path",
                        "description": "Base64 encoded system id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "TestGroupsAdmin"
                ],
                "summary": "Adds a system to an existing test group according to a given device type, test group name and system id",
                "description": "An authorized user who has access to manage test groups can use this API to add a system to an existing test \r\n            group for the specified device type, test group name and system id\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:AddSystemToTestGroup\n",
                "operationId": "TestGroupsAdmin_AddSystemToTestGroup",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "description": "Device type name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testGroupName",
                        "in": "path",
                        "description": "Test group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemId",
                        "in": "path",
                        "description": "Base64 encoded system id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "TestGroupsAdmin"
                ],
                "summary": "Deletes an existing system from a test group",
                "description": "An authorized user who has access to manage test groups can use this API to delete a system from a test \r\n            group by specifying device type, test group name and system id\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:DeleteSystemInTestGroup\n",
                "operationId": "TestGroupsAdmin_DeleteSystemInTestGroup",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "description": "Device type name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testGroupName",
                        "in": "path",
                        "description": "Test group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "systemId",
                        "in": "path",
                        "description": "Base64 encoded system id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/testGroups/{testGroupName}/systems": {
            "get": {
                "tags": [
                    "TestGroupsAdmin"
                ],
                "summary": "Gets a collection of systems according to a given device type and test group name",
                "description": "An authorized user who has access to manage test groups can use this API to get a list of all the available \r\n            systems for the specified device type and test group name\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:GetSystemsInTestGroup\n",
                "operationId": "TestGroupsAdmin_GetSystemsInTestGroup",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "description": "Device type name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testGroupName",
                        "in": "path",
                        "description": "Test group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/deviceTypes/{deviceType}/testGroups/{testGroupName}/targetVersions": {
            "put": {
                "tags": [
                    "TestGroupsAdmin"
                ],
                "summary": "Sets a list of asset types and versions to an existing test group according to a given device type and test group name",
                "description": "An authorized user who has access to manage test groups can use this API to set a list of asset types and versions \r\n            to an existing test group for the specified device type and test group name\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:SetVersionsInTestGroup\n",
                "operationId": "TestGroupsAdmin_SetVersionsInTestGroup",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "description": "Device type name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testGroupName",
                        "in": "path",
                        "description": "Test group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiTestGroupAssetVersion"
                                }
                            }
                        },
                        "text/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiTestGroupAssetVersion"
                                }
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiTestGroupAssetVersion"
                                }
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiTestGroupAssetVersion"
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/WebApiTestGroupAssetVersion"
                                }
                            }
                        }
                    },
                    "description": "Array of asset type and versions",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "TestGroupsAdmin"
                ],
                "summary": "Deletes all versions associated with a test group",
                "description": "An authorized user who has access to manage test groups can use this API to delete all versions associated with a test \r\n            group by specifying device type and test group name\r\n\nAuthorization:DeviceTypeActivity-FirmwareAdmin\n\r\n\nAction:DeleteVersionsFromTestGroup\n",
                "operationId": "TestGroupsAdmin_DeleteVersionsFromTestGroup",
                "parameters": [
                    {
                        "name": "deviceType",
                        "in": "path",
                        "description": "Device type name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "testGroupName",
                        "in": "path",
                        "description": "Test group name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "NoContent"
                    },
                    "400": {
                        "description": "BadRequest"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "NotFound"
                    },
                    "500": {
                        "description": "InternalServerError"
                    }
                },
                "deprecated": false
            }
        },
        "/api/updates/query": {
            "post": {
                "tags": [
                    "UpdatesQuery"
                ],
                "summary": "Returns the available asset updates for a system based on its current state.",
                "operationId": "UpdatesQuery_GetFirmwareUpdate",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiUpdateQueryRequest"
                            }
                        },
                        "text/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiUpdateQueryRequest"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiUpdateQueryRequest"
                            }
                        },
                        "text/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiUpdateQueryRequest"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/WebApiUpdateQueryRequest"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Ok - Return an array of WebApiAssetUpdateResponse containing all the available assets updates",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiAssetUpdateResponse"
                                    }
                                }
                            },
                            "text/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiAssetUpdateResponse"
                                    }
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiAssetUpdateResponse"
                                    }
                                }
                            },
                            "text/xml": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WebApiAssetUpdateResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - When authentication system details are missing or are invalid"
                    },
                    "500": {
                        "description": "InternalServerError - When an error occurred when getting updates"
                    }
                },
                "deprecated": false
            }
        }
    },
    "servers": [
        {
            "url": "http://localhost"
        }
    ],
    "components": {
        "requestBodies": {
            "WebApiPermissionsRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    }
                },
                "description": "List of global activities.",
                "required": true
            },
            "WebApiProjectGlobalActivitiesRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiProjectGlobalActivitiesRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiProjectGlobalActivitiesRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiProjectGlobalActivitiesRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiProjectGlobalActivitiesRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiProjectGlobalActivitiesRequest"
                        }
                    }
                },
                "required": true
            },
            "CustomAuthManage_AddCustomManagePermissionToApplicationTargetcustomapplicationid": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "string"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "type": "string"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "type": "string"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "type": "string"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "type": "string"
                        }
                    }
                },
                "required": true
            },
            "WebApiPermissionsRequest2": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    }
                },
                "description": "List of system type activities.",
                "required": true
            },
            "WebApiModelTypePermissionsRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiModelTypePermissionsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiModelTypePermissionsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiModelTypePermissionsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiModelTypePermissionsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiModelTypePermissionsRequest"
                        }
                    }
                },
                "description": "List of model type activities.",
                "required": true
            },
            "WebApiDeviceTypePermissionsRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiDeviceTypePermissionsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiDeviceTypePermissionsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiDeviceTypePermissionsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiDeviceTypePermissionsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiDeviceTypePermissionsRequest"
                        }
                    }
                },
                "required": true
            },
            "WebApiSystemProvisioningPrepareRequest2": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiSystemProvisioningPrepareRequest2"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiSystemProvisioningPrepareRequest2"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiSystemProvisioningPrepareRequest2"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiSystemProvisioningPrepareRequest2"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiSystemProvisioningPrepareRequest2"
                        }
                    }
                },
                "required": true
            },
            "WebApiPermissionsRequest3": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    }
                },
                "description": "List of model activities.",
                "required": true
            },
            "WebApiModelTypePermissionsRequest2": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiModelTypePermissionsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiModelTypePermissionsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiModelTypePermissionsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiModelTypePermissionsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiModelTypePermissionsRequest"
                        }
                    }
                },
                "description": "List of model type permissions.",
                "required": true
            },
            "WebApiPermissionsRequest4": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    }
                },
                "description": "List of tenant permissions.",
                "required": true
            },
            "WebApiPermissionsRequest5": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    }
                },
                "description": "List of system activities.",
                "required": true
            },
            "WebApiPermissionsRequest6": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    }
                },
                "description": "List of activities to add to the Active Directory group.",
                "required": true
            },
            "WebApiPermissionsRequest7": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiPermissionsRequest"
                        }
                    }
                },
                "description": "List of tenant activities.",
                "required": true
            },
            "WebApiProjectActivitiesRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiProjectActivitiesRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiProjectActivitiesRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiProjectActivitiesRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiProjectActivitiesRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiProjectActivitiesRequest"
                        }
                    }
                },
                "required": true
            },
            "RegisterServiceDetailsRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RegisterServiceDetailsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RegisterServiceDetailsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/RegisterServiceDetailsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/RegisterServiceDetailsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/RegisterServiceDetailsRequest"
                        }
                    }
                },
                "description": "RegisterServiceDetailsRequest",
                "required": true
            },
            "WebApiSystemServicePermissionsRequest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiSystemServicePermissionsRequest"
                        }
                    },
                    "text/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiSystemServicePermissionsRequest"
                        }
                    },
                    "application/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiSystemServicePermissionsRequest"
                        }
                    },
                    "text/xml": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiSystemServicePermissionsRequest"
                        }
                    },
                    "application/x-www-form-urlencoded": {
                        "schema": {
                            "$ref": "#/components/schemas/WebApiSystemServicePermissionsRequest"
                        }
                    }
                },
                "required": true
            }
        },
        "schemas": {
            "WebApiRetrieveSystemTypesResponse": {
                "type": "object",
                "properties": {
                    "SystemTypes": {
                        "description": "List of system types.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiPermissionsRequest": {
                "type": "object",
                "properties": {
                    "Activities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "SystemModelLevelActivityResponse": {
                "type": "object",
                "properties": {
                    "Activities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiServiceActivitiesResponse": {
                "type": "object",
                "properties": {
                    "Activity": {
                        "type": "string"
                    },
                    "DisplayName": {
                        "type": "string"
                    }
                }
            },
            "GlobalActivityResponse": {
                "type": "object",
                "properties": {
                    "Activities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiNewUserRequest": {
                "required": [
                    "FirstName",
                    "LastName",
                    "Email",
                    "Phone"
                ],
                "type": "object",
                "properties": {
                    "FirstName": {
                        "type": "string"
                    },
                    "LastName": {
                        "type": "string"
                    },
                    "Email": {
                        "type": "string"
                    },
                    "Phone": {
                        "type": "string"
                    }
                }
            },
            "WebApiNewUserResponse": {
                "type": "object",
                "properties": {
                    "UserObjectId": {
                        "type": "string"
                    },
                    "UserPrincipleName": {
                        "type": "string"
                    },
                    "Password": {
                        "type": "string"
                    }
                }
            },
            "WebApiNewUserWithLoginNameRequest": {
                "required": [
                    "FirstName",
                    "LastName",
                    "Email",
                    "Phone",
                    "LoginName"
                ],
                "type": "object",
                "properties": {
                    "FirstName": {
                        "type": "string"
                    },
                    "LastName": {
                        "type": "string"
                    },
                    "Email": {
                        "type": "string"
                    },
                    "Phone": {
                        "type": "string"
                    },
                    "LoginName": {
                        "type": "string"
                    }
                }
            },
            "WebApiModelTypePermissionsRequest": {
                "required": [
                    "Activities"
                ],
                "type": "object",
                "properties": {
                    "Activities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiModelTypeActivitiesResponse": {
                "type": "object",
                "properties": {
                    "Activities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "Identity": {
                "type": "object",
                "properties": {
                    "IdentityJwt": {
                        "type": "string"
                    }
                }
            },
            "WebApiCertificate": {
                "description": "Basic information about a certificate",
                "type": "object",
                "properties": {
                    "Thumbprint": {
                        "description": "Certificate thumbprint",
                        "type": "string"
                    },
                    "DistinguishedName": {
                        "description": "Content of certificate Subject field",
                        "type": "string"
                    },
                    "ExpirationInUtc": {
                        "format": "date-time",
                        "description": "Content of certificate NotAfter field",
                        "type": "string"
                    }
                }
            },
            "AuthWebApiResponse": {
                "type": "object",
                "properties": {
                    "Succeeded": {
                        "type": "boolean"
                    },
                    "ErrorMessage": {
                        "type": "string"
                    }
                }
            },
            "CustomPermissionsResponse": {
                "type": "object",
                "properties": {
                    "CustomPermissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CustomPermission"
                        }
                    }
                }
            },
            "CustomPermission": {
                "type": "object",
                "properties": {
                    "Instance": {
                        "type": "string"
                    },
                    "Activity": {
                        "type": "string"
                    }
                }
            },
            "WebApiDeviceType": {
                "type": "object",
                "properties": {
                    "Name": {
                        "description": "The device type name",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The device type description",
                        "type": "string"
                    },
                    "IsSystemType": {
                        "description": "Determines if the device type is also a system type",
                        "type": "boolean"
                    },
                    "CreatedById": {
                        "description": "AD Object id of the logged in user/application",
                        "type": "string"
                    },
                    "CreatedBy": {
                        "description": "Name of the logged in user/application",
                        "type": "string"
                    },
                    "CreatedOn": {
                        "format": "date-time",
                        "description": "Created Date in UTC.",
                        "type": "string"
                    },
                    "ModifiedById": {
                        "description": "AD Object id of the logged in user/application",
                        "type": "string"
                    },
                    "ModifiedBy": {
                        "description": "Name of the logged in user/application",
                        "type": "string"
                    },
                    "ModifiedOn": {
                        "format": "date-time",
                        "description": "Modified Date in UTC. Set a value only in update operations.",
                        "type": "string"
                    }
                }
            },
            "WebApiDeviceTypeAddRequest": {
                "required": [
                    "Name",
                    "Description"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "description": "The device type name",
                        "pattern": "^[a-zA-Z0-9:-]{1,49}$",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The device type description",
                        "type": "string"
                    },
                    "IsSystemType": {
                        "description": "Determines if the device type is also a system type",
                        "type": "boolean"
                    }
                }
            },
            "WebApiDeviceTypePermissionsRequest": {
                "required": [
                    "Activities"
                ],
                "type": "object",
                "properties": {
                    "Activities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiDeviceTypeActivitiesResponse": {
                "type": "object",
                "properties": {
                    "Activities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiDeviceTypeConfiguration": {
                "type": "object",
                "properties": {
                    "Key": {
                        "description": "The key of the property",
                        "type": "string"
                    },
                    "Value": {
                        "description": "The value of the property",
                        "type": "string"
                    }
                }
            },
            "WebApiFactorySystemDetails": {
                "required": [
                    "SystemOwnershipCode",
                    "SystemId"
                ],
                "type": "object",
                "properties": {
                    "SystemOwnershipCode": {
                        "description": "Unique 8 digit code",
                        "type": "string"
                    },
                    "User": {
                        "description": "User performing the registration",
                        "type": "string"
                    },
                    "SystemId": {
                        "description": "Unique id of the system",
                        "type": "string"
                    },
                    "SystemPublicKey": {
                        "description": "Public Key of the system",
                        "type": "string"
                    },
                    "CertificateDetails": {
                        "$ref": "#/components/schemas/WebApiFactoryCertificateDetails"
                    },
                    "SystemMetaData": {
                        "description": "Extended system meta data",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiFactoryCertificateDetails": {
                "required": [
                    "Thumbprint",
                    "DistinguishedName",
                    "Issuer"
                ],
                "type": "object",
                "properties": {
                    "Thumbprint": {
                        "type": "string"
                    },
                    "DistinguishedName": {
                        "type": "string"
                    },
                    "Issuer": {
                        "description": "Issuer name",
                        "type": "string"
                    },
                    "ExpirationInUtc": {
                        "format": "date-time",
                        "description": "Certificate expiration in UTC",
                        "type": "string"
                    }
                }
            },
            "FactorySystemRegistrationResponse": {
                "type": "object",
                "properties": {
                    "FactorySystemRegistrationResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FactorySystemRegistrationResult"
                        }
                    },
                    "IsBatchImportSuccess": {
                        "description": "TRUE when all the systems in batch are imported successfully and FALSE if at least one fails",
                        "type": "boolean"
                    }
                }
            },
            "FactorySystemRegistrationResult": {
                "type": "object",
                "properties": {
                    "SystemId": {
                        "description": "Unique id of the system",
                        "type": "string"
                    },
                    "IsImportSuccessful": {
                        "description": "status of system import",
                        "type": "boolean"
                    }
                }
            },
            "WebApiSubsystemDetails": {
                "required": [
                    "SystemId"
                ],
                "type": "object",
                "properties": {
                    "SystemId": {
                        "description": "Unique id of the system",
                        "type": "string"
                    }
                }
            },
            "WebApiFactorySubsystemBatchRegistrationResponse": {
                "type": "object",
                "properties": {
                    "IsBatchImportSuccess": {
                        "type": "boolean"
                    },
                    "SubsystemRegistrationResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebApiFactorySubsystemRegistrationResult"
                        }
                    }
                }
            },
            "WebApiFactorySubsystemRegistrationResult": {
                "type": "object",
                "properties": {
                    "SystemId": {
                        "description": "Unique id of the system",
                        "type": "string"
                    },
                    "IsImportSuccessful": {
                        "description": "status of subsystem import",
                        "type": "boolean"
                    }
                }
            },
            "WebApiSystemDetail": {
                "required": [
                    "SystemType",
                    "User",
                    "SystemId"
                ],
                "type": "object",
                "properties": {
                    "SystemType": {
                        "description": "Type of the system",
                        "type": "string"
                    },
                    "User": {
                        "description": "User performing the registration",
                        "type": "string"
                    },
                    "SystemId": {
                        "description": "Unique id of the system",
                        "type": "string"
                    },
                    "SystemPublicKey": {
                        "description": "Public Key of the system",
                        "type": "string"
                    },
                    "CertificateDetails": {
                        "$ref": "#/components/schemas/WebApiFactoryCertificateDetails"
                    },
                    "SystemMetaData": {
                        "description": "Extended system meta data",
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiSystemRegistrationResponse": {
                "type": "object",
                "properties": {
                    "SystemId": {
                        "description": "Unique id of the system",
                        "type": "string"
                    },
                    "SystemOwnershipCode": {
                        "description": "Unique 8 digit code",
                        "type": "string"
                    }
                }
            },
            "WebApiSystemPublicKey": {
                "required": [
                    "PublicKey"
                ],
                "type": "object",
                "properties": {
                    "PublicKey": {
                        "description": "Public Key of the system",
                        "type": "string"
                    }
                }
            },
            "WebApiVersionableAssetVersion": {
                "type": "object",
                "properties": {
                    "Version": {
                        "description": "The asset version",
                        "type": "string"
                    },
                    "CompatibleVersions": {
                        "description": "Eligible versions to get updated with this asset",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "AssetType": {
                        "description": "The asset type",
                        "type": "string"
                    },
                    "ReleaseState": {
                        "description": "Draft/Released",
                        "type": "string"
                    },
                    "VerificationCode": {
                        "description": "The Verification Code",
                        "type": "string"
                    },
                    "Priority": {
                        "description": "The version priority",
                        "type": "string"
                    },
                    "CreatedById": {
                        "description": "AD Object id of the logged in user/application",
                        "type": "string"
                    },
                    "CreatedBy": {
                        "description": "Name of the logged in user/application",
                        "type": "string"
                    },
                    "CreatedOn": {
                        "format": "date-time",
                        "description": "Created Date in UTC.",
                        "type": "string"
                    },
                    "ModifiedById": {
                        "description": "AD Object id of the logged in user/application",
                        "type": "string"
                    },
                    "ModifiedBy": {
                        "description": "Name of the logged in user/application",
                        "type": "string"
                    },
                    "ModifiedOn": {
                        "format": "date-time",
                        "description": "Modified Date in UTC. Set a value only in update operations.",
                        "type": "string"
                    }
                }
            },
            "WebApiVersionableAssetUploadRequest": {
                "required": [
                    "AssetBytes",
                    "AssetVersion"
                ],
                "type": "object",
                "properties": {
                    "AssetBytes": {
                        "description": "The asset byte array",
                        "type": "string"
                    },
                    "AssetVersion": {
                        "description": "The asset version",
                        "type": "string"
                    },
                    "CompatibleVersions": {
                        "description": "Eligible versions to get updated with this asset",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ReleaseState": {
                        "description": "Draft/Released",
                        "type": "string"
                    },
                    "VerificationCode": {
                        "description": "The Verification Code",
                        "pattern": "(^$)|(^[0-9a-fA-F]{32}$)|(^[0-9a-fA-F]{40}$)",
                        "type": "string"
                    },
                    "Priority": {
                        "description": "The version priority",
                        "type": "string"
                    }
                }
            },
            "WebApiVersionableAssetStreamUploadRequest": {
                "required": [
                    "AssetVersion"
                ],
                "type": "object",
                "properties": {
                    "AssetVersion": {
                        "description": "The asset version",
                        "type": "string"
                    },
                    "CompatibleVersions": {
                        "description": "Eligible versions to get updated with this asset",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ReleaseState": {
                        "description": "Draft/Released",
                        "type": "string"
                    },
                    "VerificationCode": {
                        "description": "The Verification Code",
                        "pattern": "(^$)|(^[0-9a-fA-F]{32}$)|(^[0-9a-fA-F]{40}$)",
                        "type": "string"
                    },
                    "Priority": {
                        "description": "The version priority",
                        "type": "string"
                    }
                }
            },
            "WebApiGetDeviceFirmwareDetailResponse": {
                "type": "object",
                "properties": {
                    "Version": {
                        "type": "string"
                    },
                    "VerificationCode": {
                        "type": "string"
                    },
                    "AssetName": {
                        "type": "string"
                    }
                }
            },
            "WebApiFixtureDetails": {
                "description": "Contains details of the fixture which is registering devices.",
                "required": [
                    "FixtureId"
                ],
                "type": "object",
                "properties": {
                    "FixtureId": {
                        "description": "Unique Id of the current fixture that is registered.",
                        "type": "string"
                    }
                }
            },
            "RpkChallenge": {
                "type": "object",
                "properties": {
                    "ChallengeString": {
                        "type": "string"
                    },
                    "ChallengeResponseApiUrl": {
                        "type": "string"
                    }
                }
            },
            "FixtureRpkChallengeResponse": {
                "description": "Contains response details for the Rpk challenge obtained for Fixture",
                "required": [
                    "FixtureId",
                    "ClientRandom",
                    "ClientRandomSignature"
                ],
                "type": "object",
                "properties": {
                    "FixtureId": {
                        "description": "Unique id of the Fixture",
                        "type": "string"
                    },
                    "ClientRandom": {
                        "description": "Base64-encoded 32-byte cryptographic-quality random number.",
                        "type": "string"
                    },
                    "ClientRandomSignature": {
                        "description": "result of Sign(Kpriv, Nonce(SHA (Challenge | ClientRandom)))",
                        "type": "string"
                    }
                }
            },
            "WebApiFixtureRegistrationRequest": {
                "required": [
                    "PublicKey"
                ],
                "type": "object",
                "properties": {
                    "PublicKey": {
                        "description": "Public Key of the fixture",
                        "type": "string"
                    },
                    "FixtureName": {
                        "description": "Name of the fixture",
                        "type": "string"
                    }
                }
            },
            "WebApiFixtureRegistrationResponse": {
                "required": [
                    "FixtureExpiryDateTime",
                    "FixtureId"
                ],
                "type": "object",
                "properties": {
                    "FixtureExpiryDateTime": {
                        "format": "date-time",
                        "description": "Last date untill which the fixture can be used to add systems",
                        "type": "string"
                    },
                    "FixtureId": {
                        "description": "Unique Id of the current fixture that is registered.This unique id shall be presented to following apis to uniquely identify the fixture\r\n            1) api/authentication/fixture/rpkchallenge\r\n            2) api/authentication/fixture/rpkchallengeresponse\r\n            3) api/systems",
                        "type": "string"
                    }
                }
            },
            "WebApiFixtureDetailsResponse": {
                "type": "object",
                "properties": {
                    "FixtureExpiryDateTime": {
                        "format": "date-time",
                        "description": "Last date till which the fixture can be used to add gateways to system registry using api/systems/batchimport .",
                        "type": "string"
                    },
                    "UniqueId": {
                        "description": "Unique Id of the current fixture that is registered.This unique id shall be presented to following apis to uniquely identify the fixture\r\n            1) api/authentication/fixture/rpkchallenge\r\n            2) api/authentication/fixture/rpkchallengeresponse\r\n            3) api/systems/batchimport",
                        "type": "string"
                    },
                    "PublicKey": {
                        "description": "Public Key of the fixture",
                        "type": "string"
                    }
                }
            },
            "WebApiModelTypeRegistrationRequest": {
                "required": [
                    "ModelTypeId"
                ],
                "type": "object",
                "properties": {
                    "ModelTypeId": {
                        "description": "The model type Id",
                        "pattern": "^[a-zA-Z0-9:-]{1,49}$",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The model type description",
                        "type": "string"
                    }
                }
            },
            "WebApiModelTypeResponse": {
                "type": "object",
                "properties": {
                    "ModelTypeId": {
                        "description": "The model type id",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The model type description",
                        "type": "string"
                    }
                }
            },
            "NewApplicationRequest": {
                "required": [
                    "ApplicationName"
                ],
                "type": "object",
                "properties": {
                    "ApplicationName": {
                        "type": "string"
                    },
                    "Email": {
                        "type": "string"
                    },
                    "ReplyUrl": {
                        "type": "string"
                    }
                }
            },
            "WebApiApplicationRegistrationResult": {
                "type": "object",
                "properties": {
                    "ApplicationId": {
                        "type": "string"
                    },
                    "ApplicationKey": {
                        "type": "string"
                    },
                    "ApplicationAppIdUri": {
                        "type": "string"
                    }
                }
            },
            "WebApiCreateApplicationRequest": {
                "description": "The request data which holds the parameters required to create the application identity.",
                "required": [
                    "ApplicationName",
                    "RedirectionUrl"
                ],
                "type": "object",
                "properties": {
                    "ApplicationName": {
                        "description": "Name of the application identity which needs to be created.",
                        "type": "string"
                    },
                    "ApplicationLoginUrl": {
                        "description": "The Login Url which needs to be linked with this application identity.\r\n            This is optional for application identities.",
                        "type": "string"
                    },
                    "RedirectionUrl": {
                        "description": "The rediction Url which needs to be linked with this application identity.\r\n            This should be https.",
                        "type": "string"
                    },
                    "SupportEmail": {
                        "description": "The email address of the support person or team who will be owning this application identity.\r\n            This is optional.",
                        "type": "string"
                    },
                    "SupportPhone": {
                        "description": "The phone number of the support person or team who will be owning this application identity.",
                        "type": "string"
                    },
                    "SupportWebsite": {
                        "description": "The website of the support team who will be owning this application identity.",
                        "type": "string"
                    }
                }
            },
            "WebApiCreateApplicationResponse": {
                "description": "The response data which contains the details about that application identity which is created.",
                "type": "object",
                "properties": {
                    "ApplicationName": {
                        "description": "Name of the application  identity which is created.",
                        "type": "string"
                    },
                    "ApplicationGuid": {
                        "description": "The Guid of the application  identity which is created.",
                        "type": "string"
                    },
                    "BaseUrl": {
                        "description": "The Url from which an JWT token can be requested for this application.",
                        "type": "string"
                    },
                    "SupportEmail": {
                        "description": "The email address of the support person or team who will be owning this application identity.",
                        "type": "string"
                    },
                    "SupportPhone": {
                        "description": "The phone number of the support person or team who will be owning this application identity.",
                        "type": "string"
                    },
                    "SupportWebsite": {
                        "description": "The website of the support team who will be owning this application identity.",
                        "type": "string"
                    },
                    "ClientId": {
                        "description": "The client id of the application identity which is created.\r\n            This is very sensitive and should be treated as user id and should not be shared.",
                        "type": "string"
                    },
                    "ClientSecret": {
                        "description": "The client secret of the application identity which is created.\r\n            This is very sensitive and should be treated as a password and should not be shared.",
                        "type": "string"
                    },
                    "Realm": {
                        "description": "The name of the realm which is linked with this application identity.\r\n            This is used while requesting a JWT Token for this application identity.",
                        "type": "string"
                    }
                }
            },
            "WebApiCheckSelfPermissionRequest": {
                "description": "Request object to check self permissions.",
                "type": "object",
                "properties": {
                    "EntityType": {
                        "description": "Type of permission to be checked (e.g. System, SystemType, Model, ModelType, SystemTypeAndSystem, ModelTypeAndModel, Global).",
                        "type": "string"
                    },
                    "EntityId": {
                        "description": "Id of the respective entity for permission needs to be checked (eg. SystemGuid for System and SystemTypeAndSystem, SystemTypeId for SystemType, ModelId for Model and ModelTypeAndModel, ModelTypeId for ModelType, Null for Global).",
                        "type": "string"
                    },
                    "ActivityIds": {
                        "description": "List of activities to check permission.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiCheckPermissionResponse": {
                "type": "object",
                "properties": {
                    "Activity": {
                        "description": "Name of activity that requested to check permission",
                        "type": "string"
                    },
                    "IsAuthorized": {
                        "description": "Requested activity is authorized or not",
                        "type": "boolean"
                    }
                }
            },
            "WebApiCheckPermissionRequest": {
                "description": "Request object to check permissions for the other application/user.",
                "type": "object",
                "properties": {
                    "EntityType": {
                        "description": "Type of permission to be checked (e.g. System, SystemType, Model, ModelType, SystemTypeAndSystem, ModelTypeAndModel, Global).",
                        "type": "string"
                    },
                    "EntityId": {
                        "description": "Id of the respective entity for permission needs to be checked (eg. SystemGuid for System and SystemTypeAndSystem, SystemTypeId for SystemType, ModelId for Model and ModelTypeAndModel, ModelTypeId for ModelType, Null for Global).",
                        "type": "string"
                    },
                    "ActivityIds": {
                        "description": "List of activities to check permission.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "WebApiClaims": {
                        "description": "List of claims required to check permissions.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebApiClaim"
                        }
                    }
                }
            },
            "WebApiClaim": {
                "description": "Represents a claim.",
                "type": "object",
                "properties": {
                    "Type": {
                        "description": "Gets and Sets the claim type of the claim.",
                        "type": "string"
                    },
                    "Value": {
                        "description": "Gets and Sets the value of the claim.",
                        "type": "string"
                    }
                }
            },
            "WebApiFetchProjectsReponse": {
                "description": "",
                "type": "object",
                "properties": {
                    "Projects": {
                        "description": "List of projects",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiCreateProjectRequest": {
                "description": "Project creation request",
                "required": [
                    "Name",
                    "ParentProjectName"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "description": "Name of the project to be created",
                        "type": "string"
                    },
                    "ParentProjectName": {
                        "description": "The parent project name. If the parent is root, the value should be \"/\"",
                        "type": "string"
                    }
                }
            },
            "WebApiCreateProjectActivitiesRequest": {
                "description": "Project activities creation request",
                "required": [
                    "Activities",
                    "ProjectName"
                ],
                "type": "object",
                "properties": {
                    "Activities": {
                        "description": "List of activities to be created",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ProjectName": {
                        "description": "Project name under which to create the activities. If the project is root, the value should be \"/\".",
                        "type": "string"
                    }
                }
            },
            "WebApiFetchProjectActivitiesResponse": {
                "description": "",
                "type": "object",
                "properties": {
                    "Activities": {
                        "description": "List of project activities",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiDeleteProjectActivitiesRequest": {
                "description": "Payload for deleting the project activities",
                "required": [
                    "Activities"
                ],
                "type": "object",
                "properties": {
                    "Activities": {
                        "description": "Activities to be deleted",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiCreateProjectTagsRequest": {
                "description": "Project tags creation request",
                "required": [
                    "Tags",
                    "ProjectName"
                ],
                "type": "object",
                "properties": {
                    "Tags": {
                        "description": "List of activities to be created",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ProjectName": {
                        "description": "Project name under which to create the activities. If the project is root, the value should be \"/\".",
                        "type": "string"
                    }
                }
            },
            "WebApiGetProjectTagsResponse": {
                "description": "",
                "type": "object",
                "properties": {
                    "Tags": {
                        "description": "List of project activities",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiDeleteProjectTagsRequest": {
                "description": "Payload for deleting the project tags",
                "required": [
                    "Tags"
                ],
                "type": "object",
                "properties": {
                    "Tags": {
                        "description": "Tags to be deleted",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiProjectGlobalActivitiesRequest": {
                "description": "Request object for project level permissions",
                "required": [
                    "GlobalActivities"
                ],
                "type": "object",
                "properties": {
                    "GlobalActivities": {
                        "description": "Activities to which permissions are required",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiCheckProjectPermissionResponse": {
                "type": "object",
                "properties": {
                    "HasPermission": {
                        "type": "boolean"
                    }
                }
            },
            "WebApiFetchTagsResponse": {
                "description": "",
                "type": "object",
                "properties": {
                    "Tags": {
                        "description": "List of tags",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiProjectActivitiesRequest": {
                "description": "Request object for project activity permissions",
                "required": [
                    "Activities"
                ],
                "type": "object",
                "properties": {
                    "Activities": {
                        "description": "Activities to which permissions are required",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiCheckTagPermissionResponse": {
                "type": "object",
                "properties": {
                    "HasPermission": {
                        "type": "boolean"
                    }
                }
            },
            "WebApiJsonKeySetResponse": {
                "type": "object",
                "properties": {
                    "keys": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebApiJsonWebKey"
                        }
                    }
                }
            },
            "WebApiJsonWebKey": {
                "type": "object",
                "properties": {
                    "d": {
                        "type": "string"
                    },
                    "dp": {
                        "type": "string"
                    },
                    "dq": {
                        "type": "string"
                    },
                    "e": {
                        "type": "string"
                    },
                    "k": {
                        "type": "string"
                    },
                    "keyops": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "kid": {
                        "type": "string"
                    },
                    "kty": {
                        "type": "string"
                    },
                    "n": {
                        "type": "string"
                    },
                    "p": {
                        "type": "string"
                    },
                    "q": {
                        "type": "string"
                    },
                    "qi": {
                        "type": "string"
                    },
                    "t": {
                        "type": "string"
                    }
                }
            },
            "SystemDetails": {
                "required": [
                    "SystemId",
                    "SystemType"
                ],
                "type": "object",
                "properties": {
                    "SystemId": {
                        "description": "Unique id of the system",
                        "type": "string"
                    },
                    "SystemType": {
                        "description": "Type of the system",
                        "type": "string"
                    }
                }
            },
            "RpkChallengeResponse": {
                "required": [
                    "SystemId",
                    "SystemType",
                    "ClientRandom",
                    "ClientRandomSignature"
                ],
                "type": "object",
                "properties": {
                    "SystemId": {
                        "description": "Unique id of the system",
                        "type": "string"
                    },
                    "SystemType": {
                        "description": "Type of the system",
                        "type": "string"
                    },
                    "ClientRandom": {
                        "description": "Base64-encoded 32-byte cryptographic-quality random number.",
                        "type": "string"
                    },
                    "ClientRandomSignature": {
                        "description": "result of Sign(Kpriv, Nonce(SHA (Challenge | ClientRandom)))",
                        "type": "string"
                    }
                }
            },
            "ServiceDetails": {
                "type": "object",
                "properties": {
                    "Url": {
                        "type": "string"
                    },
                    "ActiveDirectoryResourceId": {
                        "type": "string"
                    }
                }
            },
            "RegisterServiceDetailsRequest": {
                "description": "RegisterServiceDetailsRequest",
                "required": [
                    "ServiceRegistrationRequests"
                ],
                "type": "object",
                "properties": {
                    "ServiceRegistrationRequests": {
                        "description": "List of ServiceRegistrationRequest",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ServiceRegistrationRequest"
                        }
                    }
                }
            },
            "ServiceRegistrationRequest": {
                "description": "ServiceRegistrationRequest",
                "required": [
                    "ServiceId",
                    "UrlFormat",
                    "ActiveDirectoryResourceId"
                ],
                "type": "object",
                "properties": {
                    "ServiceId": {
                        "description": "Service Id",
                        "type": "string"
                    },
                    "UrlFormat": {
                        "description": "Url Format",
                        "type": "string"
                    },
                    "ActiveDirectoryResourceId": {
                        "description": "Active Directory Resource Id",
                        "type": "string"
                    }
                }
            },
            "WebApiUnconnectedSystemDetailResponse": {
                "type": "object",
                "properties": {
                    "SystemGuid": {
                        "type": "string"
                    },
                    "SystemId": {
                        "type": "string"
                    },
                    "Description": {
                        "type": "string"
                    }
                }
            },
            "WebApiSystemConnectionDetailResponse": {
                "type": "object",
                "properties": {
                    "Path": {
                        "description": "Specifies the remote connection path. This is a URI. example.com:8042//EventStream//consumer\"http://example.com:8042/EventStream/consumer or prtobuf://example.com:8042/EventStream/consumer",
                        "type": "string"
                    },
                    "UserName": {
                        "description": "Specifies the user name used to authenticate a client trying to access a remote device/system/service. Typically used when the authentication mode is basic/digest",
                        "type": "string"
                    },
                    "Password": {
                        "description": "Specifies the password used to authenticate a client trying to access a remote device/system/service. Typically used when the authentication mode is basic/digest",
                        "type": "string"
                    },
                    "ServerType": {
                        "description": "Defines the conection server type for this connection set.  For IoTHub connections this would be IoTHub or IoTHub2.",
                        "type": "string"
                    },
                    "AuthMode": {
                        "description": "None/Basic/Digest, Specifies the authentication type used to access a remote device/system/service",
                        "type": "string"
                    },
                    "CredentialType": {
                        "description": "AES256, Specifies the encryption type used to encrypt the data/message while communicating with a remote device/system/service",
                        "type": "string"
                    },
                    "Credential": {
                        "description": "session key, Specifies the encryption key used to encrypt the data/message that is sent to a remote device/system/service",
                        "type": "string"
                    },
                    "UseExistingConnection": {
                        "description": "true/false, If set to true, specifies that an established connection would be used for communication with the remote device/system/service.",
                        "type": "boolean"
                    },
                    "CertificateType": {
                        "description": "X_p_509_Base64/X_p_509_DER",
                        "type": "string"
                    },
                    "Certificate": {
                        "description": "ValueNet server certificate used for restricting to specific servers",
                        "type": "string"
                    }
                }
            },
            "WebApiSystemProvisioningRequest": {
                "type": "object",
                "properties": {
                    "SystemType": {
                        "type": "string"
                    },
                    "OwnershipCode": {
                        "type": "string"
                    }
                }
            },
            "WebApiSystemProvisioningPrepareRequest2": {
                "type": "object",
                "properties": {
                    "OwnershipCode": {
                        "type": "string"
                    },
                    "TenantName": {
                        "type": "string"
                    }
                }
            },
            "WebApiSystemAssociationResponse": {
                "type": "object",
                "properties": {
                    "OwnershipCode": {
                        "type": "string"
                    },
                    "SystemGuid": {
                        "type": "string"
                    },
                    "Result": {
                        "$ref": "#/components/schemas/AssociationResult"
                    }
                }
            },
            "AssociationResult": {
                "type": "object",
                "properties": {
                    "IsSucess": {
                        "type": "boolean"
                    },
                    "ErrorMessage": {
                        "type": "string"
                    }
                }
            },
            "WebApiSystemAssociationResetResponse": {
                "type": "object",
                "properties": {
                    "OwnershipCode": {
                        "type": "string"
                    },
                    "Result": {
                        "$ref": "#/components/schemas/AssociationResult"
                    }
                }
            },
            "WebApiSystemReplaceRequest": {
                "required": [
                    "SystemType",
                    "CurrentOwnershipCode",
                    "ReplacementOwnershipCode"
                ],
                "type": "object",
                "properties": {
                    "SystemType": {
                        "description": "Type of the system",
                        "type": "string"
                    },
                    "CurrentOwnershipCode": {
                        "description": "Unique 8 digit code for current system",
                        "type": "string"
                    },
                    "ReplacementOwnershipCode": {
                        "description": "Unique 8 digit code for replacement system",
                        "type": "string"
                    }
                }
            },
            "WebApiSystemReplaceRequestV2": {
                "required": [
                    "CurrentOwnershipCode",
                    "ReplacementOwnershipCode"
                ],
                "type": "object",
                "properties": {
                    "CurrentOwnershipCode": {
                        "description": "Unique 8 digit code for current system",
                        "type": "string"
                    },
                    "ReplacementOwnershipCode": {
                        "description": "Unique 8 digit code for replacement system",
                        "type": "string"
                    }
                }
            },
            "WebApiSystemDeProvisionRequest": {
                "required": [
                    "SystemType",
                    "SystemId"
                ],
                "type": "object",
                "properties": {
                    "SystemType": {
                        "description": "Type of the system",
                        "type": "string"
                    },
                    "SystemId": {
                        "description": "Unique id of the system",
                        "type": "string"
                    }
                }
            },
            "WebApiSubsystemProvisioningRequest": {
                "required": [
                    "TenantName"
                ],
                "type": "object",
                "properties": {
                    "SystemId": {
                        "description": "Unique id of the system",
                        "pattern": "^[a-zA-Z0-9:\\-_]{1,49}$",
                        "type": "string"
                    },
                    "TenantName": {
                        "description": "Tenant name",
                        "type": "string"
                    }
                }
            },
            "WebApiSubsystemProvisioningBatchResponse": {
                "type": "object",
                "properties": {
                    "Result": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebApiSubsystemProvisioningResponse"
                        }
                    },
                    "IsBatchSuccessful": {
                        "description": "Status of batch import",
                        "type": "boolean"
                    }
                }
            },
            "WebApiSubsystemProvisioningResponse": {
                "type": "object",
                "properties": {
                    "SystemId": {
                        "type": "string"
                    },
                    "SystemGuid": {
                        "type": "string"
                    },
                    "Result": {
                        "$ref": "#/components/schemas/AssociationResult"
                    }
                }
            },
            "WebApiSystemRegistryGetSystemResponse": {
                "type": "object",
                "properties": {
                    "SystemId": {
                        "type": "string"
                    },
                    "SystemType": {
                        "type": "string"
                    },
                    "SystemGuid": {
                        "description": "May be null if the System hasn't been associated yet",
                        "type": "string"
                    },
                    "Details": {
                        "description": "Any specific details of the System. In the case of an RPK system, this is an JSON document with OwnershipCode, PublicKey and registring User",
                        "type": "string"
                    },
                    "MetaData": {
                        "description": "Any extra metadata provided by the registering fixture or application, this is a JSON document with a dictionary.",
                        "type": "string"
                    }
                }
            },
            "WebApiSystemRegistryGraphQlRequest": {
                "required": [
                    "Query"
                ],
                "type": "object",
                "properties": {
                    "OperationName": {
                        "description": "Operation name inside the query to be executed",
                        "type": "string"
                    },
                    "NamedQuery": {
                        "description": "Name of supported query.",
                        "type": "string"
                    },
                    "Query": {
                        "description": "A GraphQL to be executed\r\n             Query example:\r\n             query namedQuery{\r\n                systemRegistryDetails(systemType: \"type1\" )\r\n                {\r\n                    systemType\r\n                    systems(provisioningStatus: \"Provisioned\" first: 2)\r\n                    {\r\n                        systemId\r\n                        systemGuid\r\n                        details\r\n                        provisioningStatus\r\n                    }\r\n                }\r\n            }",
                        "type": "string"
                    },
                    "Variables": {
                        "description": "A JSON-encoded object containing the variables for the query",
                        "type": "string"
                    }
                }
            },
            "WebApiSystemRegistryGraphQlResponse": {
                "type": "object",
                "properties": {
                    "errors": {
                        "description": "Gets the GraphQL query execution errors.\r\n            http://facebook.github.io/graphql/October2016/#sec-Errors",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebApiSystemRegistryGraphQlError"
                        }
                    },
                    "data": {
                        "$ref": "#/components/schemas/Object"
                    }
                }
            },
            "WebApiSystemRegistryGraphQlError": {
                "type": "object",
                "properties": {
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebApiSystemRegistryGraphQlErrorLocation"
                        }
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "Object": {
                "type": "object",
                "properties": {}
            },
            "WebApiSystemRegistryGraphQlErrorLocation": {
                "type": "object",
                "properties": {
                    "line": {
                        "format": "int32",
                        "description": "Gets the line number where the error was found within the query",
                        "type": "integer"
                    },
                    "column": {
                        "format": "int32",
                        "description": "Gets the column where the error was found within the query",
                        "type": "integer"
                    }
                }
            },
            "WebApiSystemServiceDetailsResponse": {
                "type": "object",
                "properties": {
                    "ServiceId": {
                        "type": "string"
                    },
                    "SystemTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiSetSystemEnabledStatusRequest": {
                "description": "The request of SetSystemEnabledStatus API",
                "required": [
                    "Enabled"
                ],
                "type": "object",
                "properties": {
                    "Enabled": {
                        "description": "The system enabled status",
                        "type": "boolean"
                    }
                }
            },
            "WebApiGetSystemEnabledStatusResponse": {
                "description": "The response of GetSystemEnabledStatus API",
                "required": [
                    "Enabled"
                ],
                "type": "object",
                "properties": {
                    "Enabled": {
                        "description": "Enabled Status",
                        "type": "boolean"
                    }
                }
            },
            "WebApiSystemServicePermissionsRequest": {
                "required": [
                    "Activities"
                ],
                "type": "object",
                "properties": {
                    "Activities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiSystemServiceActivitiesResponse": {
                "type": "object",
                "properties": {
                    "Activities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WebApiRegisterSystemServiceRequest": {
                "description": "Request to register a System Service with the Provisioning Service. Simple System Services with a fixed URL for all devices should set this via the Url parameter of the request. System Services that have different connection details for each system can set the Callback parameter to the REST endpoint which will implement the callback interface that can provide connection details dynamically for each provisioned system. Only one of URL and Callback can be set for request.",
                "required": [
                    "Audience",
                    "IsJwtRequired"
                ],
                "type": "object",
                "properties": {
                    "Url": {
                        "description": "Url of the system service endpoint devices should use to communicate with the service. If this is supplied Callback should not be set.",
                        "type": "string"
                    },
                    "Audience": {
                        "description": "Audience of the token which is used by system service",
                        "type": "string"
                    },
                    "IsJwtRequired": {
                        "description": "Indicates if need Global to generate JWT token for the system service",
                        "type": "boolean"
                    },
                    "Callback": {
                        "description": "Callback Url the provisioning service should use to request connection details for a device from the system service. If this is supplied Url should not be set.",
                        "type": "string"
                    }
                }
            },
            "WebApiSystemServiceRegistrationResponse": {
                "type": "object",
                "properties": {
                    "ServiceId": {
                        "type": "string"
                    },
                    "TenantName": {
                        "type": "string"
                    },
                    "URL": {
                        "type": "string"
                    },
                    "Audience": {
                        "type": "string"
                    },
                    "IsJWTRequired": {
                        "type": "boolean"
                    },
                    "Callback": {
                        "type": "string"
                    }
                }
            },
            "WebApiSystemAndModelMappingResponse": {
                "type": "object",
                "properties": {
                    "SystemGuid": {
                        "description": "SystemGuid",
                        "type": "string"
                    },
                    "ModelId": {
                        "description": "Mapped modelId",
                        "type": "string"
                    },
                    "CreatorType": {
                        "format": "int32",
                        "description": "CreatorType of the model",
                        "enum": [
                            0,
                            1,
                            -1
                        ],
                        "type": "integer"
                    }
                }
            },
            "WebApiAddSystemTypeRequest": {
                "required": [
                    "SystemType"
                ],
                "type": "object",
                "properties": {
                    "SystemType": {
                        "description": "The system type name to be added",
                        "type": "string"
                    },
                    "OwnershipCodeGenerationType": {
                        "description": "Indicates the rule to be used for generating the ownership code",
                        "type": "string"
                    }
                }
            },
            "WebApiTestGroup": {
                "type": "object",
                "properties": {
                    "Name": {
                        "description": "The test group name",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The test group description",
                        "type": "string"
                    },
                    "DeviceType": {
                        "description": "The device type associated with the test group",
                        "type": "string"
                    },
                    "Systems": {
                        "description": "The systems that are associated with the test group",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "Versions": {
                        "description": "The asset type and version pairs that are associated with the test group",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebApiTestGroupAssetVersion"
                        }
                    },
                    "CreatedById": {
                        "description": "AD Object id of the logged in user/application",
                        "type": "string"
                    },
                    "CreatedBy": {
                        "description": "Name of the logged in user/application",
                        "type": "string"
                    },
                    "CreatedOn": {
                        "format": "date-time",
                        "description": "Created Date in UTC.",
                        "type": "string"
                    },
                    "ModifiedById": {
                        "description": "AD Object id of the logged in user/application",
                        "type": "string"
                    },
                    "ModifiedBy": {
                        "description": "Name of the logged in user/application",
                        "type": "string"
                    },
                    "ModifiedOn": {
                        "format": "date-time",
                        "description": "Modified Date in UTC. Set a value only in update operations.",
                        "type": "string"
                    }
                }
            },
            "WebApiTestGroupAssetVersion": {
                "required": [
                    "AssetType"
                ],
                "type": "object",
                "properties": {
                    "AssetType": {
                        "description": "The asset type",
                        "type": "string"
                    },
                    "Version": {
                        "description": "The version to be used in the test group",
                        "type": "string"
                    }
                }
            },
            "WebApiTestGroupAddRequest": {
                "required": [
                    "Name"
                ],
                "type": "object",
                "properties": {
                    "Name": {
                        "description": "The test group name",
                        "pattern": "^[A-Za-z0-9]{1,256}$",
                        "type": "string"
                    },
                    "Description": {
                        "description": "The test group description",
                        "type": "string"
                    }
                }
            },
            "WebApiUpdateQueryRequest": {
                "type": "object",
                "properties": {
                    "DeviceType": {
                        "type": "string"
                    },
                    "CurrentAssets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebApiAssetUpdateRequest"
                        }
                    }
                }
            },
            "WebApiAssetUpdateRequest": {
                "required": [
                    "AssetName"
                ],
                "type": "object",
                "properties": {
                    "AssetName": {
                        "type": "string"
                    },
                    "CurrentVersion": {
                        "type": "string"
                    },
                    "VerificationCode": {
                        "type": "string"
                    }
                }
            },
            "WebApiAssetUpdateResponse": {
                "type": "object",
                "properties": {
                    "AssetName": {
                        "type": "string"
                    },
                    "NewVersion": {
                        "type": "string"
                    },
                    "DownloadUrl": {
                        "type": "string"
                    },
                    "VerificationCode": {
                        "type": "string"
                    },
                    "Priority": {
                        "type": "string"
                    }
                }
            }
        }
    }
}
